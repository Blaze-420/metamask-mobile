diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
index 6f48d64..a70d3f4 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
@@ -1,24 +1,29 @@
 "use strict";
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
 var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
     if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TokenBalancesController_handle, _TokenBalancesController_interval, _TokenBalancesController_tokens, _TokenBalancesController_disabled;
+var _TokenBalancesController_instances, _TokenBalancesController_queryMultipleAccounts, _TokenBalancesController_allTokens, _TokenBalancesController_allDetectedTokens, _TokenBalancesController_calculateQueryMultipleAccounts, _TokenBalancesController_onPreferencesStateChange, _TokenBalancesController_onTokensStateChange, _TokenBalancesController_onNetworkStateChange, _TokenBalancesController_getChainIds, _TokenBalancesController_getNetworkClient;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TokenBalancesController = exports.getDefaultTokenBalancesState = void 0;
-const base_controller_1 = require("@metamask/base-controller");
+const contracts_1 = require("@ethersproject/contracts");
+const providers_1 = require("@ethersproject/providers");
 const controller_utils_1 = require("@metamask/controller-utils");
+const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
+const polling_controller_1 = require("@metamask/polling-controller");
+const lodash_1 = require("lodash");
+const multicall_1 = require("./multicall.cjs");
 const DEFAULT_INTERVAL = 180000;
 const controllerName = 'TokenBalancesController';
 const metadata = {
-    contractBalances: { persist: true, anonymous: false },
+    tokenBalances: { persist: true, anonymous: false },
 };
 /**
  * Get the default TokenBalancesController state.
@@ -27,7 +32,7 @@ const metadata = {
  */
 function getDefaultTokenBalancesState() {
     return {
-        contractBalances: {},
+        tokenBalances: {},
     };
 }
 exports.getDefaultTokenBalancesState = getDefaultTokenBalancesState;
@@ -35,18 +40,17 @@ exports.getDefaultTokenBalancesState = getDefaultTokenBalancesState;
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-class TokenBalancesController extends base_controller_1.BaseController {
+class TokenBalancesController extends (0, polling_controller_1.StaticIntervalPollingController)() {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval = DEFAULT_INTERVAL, tokens = [], disabled = false, messenger, state = {}, }) {
+    constructor({ interval = DEFAULT_INTERVAL, messenger, state = {}, }) {
+        var _a, _b;
         super({
             name: controllerName,
             metadata,
@@ -56,77 +60,137 @@ class TokenBalancesController extends base_controller_1.BaseController {
                 ...state,
             },
         });
-        _TokenBalancesController_handle.set(this, void 0);
-        _TokenBalancesController_interval.set(this, void 0);
-        _TokenBalancesController_tokens.set(this, void 0);
-        _TokenBalancesController_disabled.set(this, void 0);
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, disabled, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_tokens, tokens, "f");
-        this.messagingSystem.subscribe('TokensController:stateChange', ({ tokens: newTokens, detectedTokens }) => {
-            __classPrivateFieldSet(this, _TokenBalancesController_tokens, [...newTokens, ...detectedTokens], "f");
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.updateBalances();
+        _TokenBalancesController_instances.add(this);
+        _TokenBalancesController_queryMultipleAccounts.set(this, void 0);
+        _TokenBalancesController_allTokens.set(this, void 0);
+        _TokenBalancesController_allDetectedTokens.set(this, void 0);
+        /**
+         * Determines whether to query all accounts, or just the selected account.
+         * @param preferences - The preferences state.
+         * @param preferences.isMultiAccountBalancesEnabled - whether to query all accounts (mobile).
+         * @param preferences.useMultiAccountBalanceChecker - whether to query all accounts (extension).
+         * @returns true if all accounts should be queried.
+         */
+        _TokenBalancesController_calculateQueryMultipleAccounts.set(this, ({ isMultiAccountBalancesEnabled, useMultiAccountBalanceChecker, }) => {
+            return Boolean(
+            // Note: These settings have different names on extension vs mobile
+            isMultiAccountBalancesEnabled || useMultiAccountBalanceChecker);
         });
-        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-        // eslint-disable-next-line @typescript-eslint/no-floating-promises
-        this.poll();
-    }
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, false, "f");
+        /**
+         * Handles the event for preferences state changes.
+         * @param preferences - The preferences state.
+         */
+        _TokenBalancesController_onPreferencesStateChange.set(this, (preferences) => {
+            // Update the user preference for whether to query multiple accounts.
+            const queryMultipleAccounts = __classPrivateFieldGet(this, _TokenBalancesController_calculateQueryMultipleAccounts, "f").call(this, preferences);
+            // Refresh when flipped off -> on
+            const refresh = queryMultipleAccounts && !__classPrivateFieldGet(this, _TokenBalancesController_queryMultipleAccounts, "f");
+            __classPrivateFieldSet(this, _TokenBalancesController_queryMultipleAccounts, queryMultipleAccounts, "f");
+            if (refresh) {
+                this.updateBalances().catch(console.error);
+            }
+        });
+        /**
+         * Handles the event for tokens state changes.
+         * @param state - The token state.
+         * @param state.allTokens - The state for imported tokens across all chains.
+         * @param state.allDetectedTokens - The state for detected tokens across all chains.
+         */
+        _TokenBalancesController_onTokensStateChange.set(this, ({ allTokens, allDetectedTokens, }) => {
+            // Refresh token balances on chains whose tokens have changed.
+            const chainIds = __classPrivateFieldGet(this, _TokenBalancesController_getChainIds, "f").call(this, allTokens, allDetectedTokens);
+            const chainIdsToUpdate = chainIds.filter((chainId) => !(0, lodash_1.isEqual)(__classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f")[chainId], allTokens[chainId]) ||
+                !(0, lodash_1.isEqual)(__classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")[chainId], allDetectedTokens[chainId]));
+            __classPrivateFieldSet(this, _TokenBalancesController_allTokens, allTokens, "f");
+            __classPrivateFieldSet(this, _TokenBalancesController_allDetectedTokens, allDetectedTokens, "f");
+            this.updateBalances({ chainIds: chainIdsToUpdate }).catch(console.error);
+        });
+        /**
+         * Returns an array of chain ids that have tokens.
+         * @param allTokens - The state for imported tokens across all chains.
+         * @param allDetectedTokens - The state for detected tokens across all chains.
+         * @returns An array of chain ids that have tokens.
+         */
+        _TokenBalancesController_getChainIds.set(this, (allTokens, allDetectedTokens) => [
+            ...new Set([
+                ...Object.keys(allTokens),
+                ...Object.keys(allDetectedTokens),
+            ]),
+        ]);
+        this.setIntervalLength(interval);
+        // Set initial preference for querying multiple accounts, and subscribe to changes
+        __classPrivateFieldSet(this, _TokenBalancesController_queryMultipleAccounts, __classPrivateFieldGet(this, _TokenBalancesController_calculateQueryMultipleAccounts, "f").call(this, this.messagingSystem.call('PreferencesController:getState')), "f");
+        this.messagingSystem.subscribe('PreferencesController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_onPreferencesStateChange, "f").bind(this));
+        // Set initial tokens, and subscribe to changes
+        (_a = this, _b = this, {
+            allTokens: ({ set value(_c) { __classPrivateFieldSet(_a, _TokenBalancesController_allTokens, _c, "f"); } }).value,
+            allDetectedTokens: ({ set value(_c) { __classPrivateFieldSet(_b, _TokenBalancesController_allDetectedTokens, _c, "f"); } }).value,
+        } = this.messagingSystem.call('TokensController:getState'));
+        this.messagingSystem.subscribe('TokensController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_onTokensStateChange, "f").bind(this));
+        // Subscribe to network state changes
+        this.messagingSystem.subscribe('NetworkController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_instances, "m", _TokenBalancesController_onNetworkStateChange).bind(this));
     }
     /**
-     * Blocks controller from updating tracked tokens contract balances.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.chainId - The chain id to poll token balances on.
      */
-    disable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, true, "f");
+    async _executePoll({ chainId }) {
+        await this.updateBalancesByChainId({ chainId });
     }
     /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
+     * Updates the token balances for the given chain ids.
+     * @param input - The input for the update.
+     * @param input.chainIds - The chain ids to update token balances for.
+     * Or omitted to update all chains that contain tokens.
      */
-    async poll(interval) {
-        if (interval) {
-            __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        }
-        if (__classPrivateFieldGet(this, _TokenBalancesController_handle, "f")) {
-            clearTimeout(__classPrivateFieldGet(this, _TokenBalancesController_handle, "f"));
-        }
-        await (0, controller_utils_1.safelyExecute)(() => this.updateBalances());
-        __classPrivateFieldSet(this, _TokenBalancesController_handle, setTimeout(() => {
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.poll(__classPrivateFieldGet(this, _TokenBalancesController_interval, "f"));
-        }, __classPrivateFieldGet(this, _TokenBalancesController_interval, "f")), "f");
+    async updateBalances({ chainIds } = {}) {
+        chainIds ?? (chainIds = __classPrivateFieldGet(this, _TokenBalancesController_getChainIds, "f").call(this, __classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f"), __classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")));
+        await Promise.allSettled(chainIds.map((chainId) => this.updateBalancesByChainId({ chainId })));
     }
     /**
-     * Updates balances for all tokens.
+     * Updates token balances for the given chain id.
+     * @param input - The input for the update.
+     * @param input.chainId - The chain id to update token balances on.
      */
-    async updateBalances() {
-        if (__classPrivateFieldGet(this, _TokenBalancesController_disabled, "f")) {
-            return;
+    async updateBalancesByChainId({ chainId }) {
+        const { address: selectedAccountAddress } = this.messagingSystem.call('AccountsController:getSelectedAccount');
+        const isSelectedAccount = (accountAddress) => (0, controller_utils_1.toChecksumHexAddress)(accountAddress) ===
+            (0, controller_utils_1.toChecksumHexAddress)(selectedAccountAddress);
+        const accountTokenPairs = [];
+        const addTokens = ([accountAddress, tokens]) => __classPrivateFieldGet(this, _TokenBalancesController_queryMultipleAccounts, "f") || isSelectedAccount(accountAddress)
+            ? tokens.forEach((t) => accountTokenPairs.push({
+                accountAddress: accountAddress,
+                tokenAddress: t.address,
+            }))
+            : undefined;
+        // Balances will be updated for both imported and detected tokens
+        Object.entries(__classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f")[chainId] ?? {}).forEach(addTokens);
+        Object.entries(__classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")[chainId] ?? {}).forEach(addTokens);
+        let results = [];
+        if (accountTokenPairs.length > 0) {
+            const provider = new providers_1.Web3Provider(__classPrivateFieldGet(this, _TokenBalancesController_instances, "m", _TokenBalancesController_getNetworkClient).call(this, chainId).provider);
+            const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({
+                contract: new contracts_1.Contract(tokenAddress, metamask_eth_abis_1.abiERC20, provider),
+                functionSignature: 'balanceOf(address)',
+                arguments: [accountAddress],
+            }));
+            results = await (0, multicall_1.multicallOrFallback)(calls, chainId, provider);
         }
-        const selectedInternalAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
-        const newContractBalances = {};
-        for (const token of __classPrivateFieldGet(this, _TokenBalancesController_tokens, "f")) {
-            const { address } = token;
-            try {
-                const balance = await this.messagingSystem.call('AssetsContractController:getERC20BalanceOf', address, selectedInternalAccount.address);
-                newContractBalances[address] = (0, controller_utils_1.toHex)(balance);
-                token.hasBalanceError = false;
+        this.update((state) => {
+            var _a, _b;
+            // Reset so that when accounts or tokens are removed,
+            // their balances are removed rather than left stale.
+            for (const accountAddress of Object.keys(state.tokenBalances)) {
+                state.tokenBalances[accountAddress][chainId] = {};
             }
-            catch (error) {
-                newContractBalances[address] = (0, controller_utils_1.toHex)(0);
-                token.hasBalanceError = true;
+            for (let i = 0; i < results.length; i++) {
+                const { success, value } = results[i];
+                const { accountAddress, tokenAddress } = accountTokenPairs[i];
+                if (success) {
+                    ((_b = ((_a = state.tokenBalances)[accountAddress] ?? (_a[accountAddress] = {})))[chainId] ?? (_b[chainId] = {}))[tokenAddress] = (0, controller_utils_1.toHex)(value);
+                }
             }
-        }
-        this.update((state) => {
-            state.contractBalances = newContractBalances;
         });
     }
     /**
@@ -139,6 +203,27 @@ class TokenBalancesController extends base_controller_1.BaseController {
     }
 }
 exports.TokenBalancesController = TokenBalancesController;
-_TokenBalancesController_handle = new WeakMap(), _TokenBalancesController_interval = new WeakMap(), _TokenBalancesController_tokens = new WeakMap(), _TokenBalancesController_disabled = new WeakMap();
+_TokenBalancesController_queryMultipleAccounts = new WeakMap(), _TokenBalancesController_allTokens = new WeakMap(), _TokenBalancesController_allDetectedTokens = new WeakMap(), _TokenBalancesController_calculateQueryMultipleAccounts = new WeakMap(), _TokenBalancesController_onPreferencesStateChange = new WeakMap(), _TokenBalancesController_onTokensStateChange = new WeakMap(), _TokenBalancesController_getChainIds = new WeakMap(), _TokenBalancesController_instances = new WeakSet(), _TokenBalancesController_onNetworkStateChange = function _TokenBalancesController_onNetworkStateChange(_, patches) {
+    // Remove state for deleted networks
+    for (const patch of patches) {
+        if (patch.op === 'remove' &&
+            patch.path[0] === 'networkConfigurationsByChainId') {
+            const removedChainId = patch.path[1];
+            this.update((state) => {
+                for (const accountAddress of Object.keys(state.tokenBalances)) {
+                    delete state.tokenBalances[accountAddress][removedChainId];
+                }
+            });
+        }
+    }
+}, _TokenBalancesController_getNetworkClient = function _TokenBalancesController_getNetworkClient(chainId) {
+    const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+    const networkConfiguration = networkConfigurationsByChainId[chainId];
+    if (!networkConfiguration) {
+        throw new Error(`TokenBalancesController: No network configuration found for chainId ${chainId}`);
+    }
+    const { networkClientId } = networkConfiguration.rpcEndpoints[networkConfiguration.defaultRpcEndpointIndex];
+    return this.messagingSystem.call(`NetworkController:getNetworkClientById`, networkClientId);
+};
 exports.default = TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.cjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
index 26bd8c2..2931bdc 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.cjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\n\nimport type { AssetsContractControllerGetERC20BalanceOfAction } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AssetsContractControllerGetERC20BalanceOfAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateBalances();\n      },\n    );\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n    const selectedInternalAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      try {\n        const balance = await this.messagingSystem.call(\n          'AssetsContractController:getERC20BalanceOf',\n          address,\n          selectedInternalAccount.address,\n        );\n        newContractBalances[address] = toHex(balance);\n        token.hasBalanceError = false;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.hasBalanceError = true;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenBalancesState();\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.cjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { toChecksumHexAddress, toHex } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n  PreferencesState,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport type BN from 'bn.js';\nimport type { Patch } from 'immer';\nimport { isEqual } from 'lodash';\n\nimport type { MulticallResult } from './multicall';\nimport { multicallOrFallback } from './multicall';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerState,\n  TokensControllerStateChangeEvent,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  tokenBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property messenger - A controller messenger.\n * @property state - Initial state for the controller.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * A mapping from account address to chain id to token address to balance.\n */\ntype TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;\n\n/**\n * Token balances controller state\n * @property tokenBalances - A mapping from account address to chain id to token address to balance.\n */\nexport type TokenBalancesControllerState = {\n  tokenBalances: TokenBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | TokensControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | AccountsControllerGetSelectedAccountAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | PreferencesControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    tokenBalances: {},\n  };\n}\n\n/** The input to start polling for the {@link TokenBalancesController} */\nexport type TokenBalancesPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends StaticIntervalPollingController<TokenBalancesPollingInput>()<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #queryMultipleAccounts: boolean;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(interval);\n\n    // Set initial preference for querying multiple accounts, and subscribe to changes\n    this.#queryMultipleAccounts = this.#calculateQueryMultipleAccounts(\n      this.messagingSystem.call('PreferencesController:getState'),\n    );\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      this.#onPreferencesStateChange.bind(this),\n    );\n\n    // Set initial tokens, and subscribe to changes\n    ({\n      allTokens: this.#allTokens,\n      allDetectedTokens: this.#allDetectedTokens,\n    } = this.messagingSystem.call('TokensController:getState'));\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      this.#onTokensStateChange.bind(this),\n    );\n\n    // Subscribe to network state changes\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      this.#onNetworkStateChange.bind(this),\n    );\n  }\n\n  /**\n   * Determines whether to query all accounts, or just the selected account.\n   * @param preferences - The preferences state.\n   * @param preferences.isMultiAccountBalancesEnabled - whether to query all accounts (mobile).\n   * @param preferences.useMultiAccountBalanceChecker - whether to query all accounts (extension).\n   * @returns true if all accounts should be queried.\n   */\n  #calculateQueryMultipleAccounts = ({\n    isMultiAccountBalancesEnabled,\n    useMultiAccountBalanceChecker,\n  }: PreferencesState & { useMultiAccountBalanceChecker?: boolean }) => {\n    return Boolean(\n      // Note: These settings have different names on extension vs mobile\n      isMultiAccountBalancesEnabled || useMultiAccountBalanceChecker,\n    );\n  };\n\n  /**\n   * Handles the event for preferences state changes.\n   * @param preferences - The preferences state.\n   */\n  #onPreferencesStateChange = (preferences: PreferencesState) => {\n    // Update the user preference for whether to query multiple accounts.\n    const queryMultipleAccounts =\n      this.#calculateQueryMultipleAccounts(preferences);\n\n    // Refresh when flipped off -> on\n    const refresh = queryMultipleAccounts && !this.#queryMultipleAccounts;\n    this.#queryMultipleAccounts = queryMultipleAccounts;\n\n    if (refresh) {\n      this.updateBalances().catch(console.error);\n    }\n  };\n\n  /**\n   * Handles the event for tokens state changes.\n   * @param state - The token state.\n   * @param state.allTokens - The state for imported tokens across all chains.\n   * @param state.allDetectedTokens - The state for detected tokens across all chains.\n   */\n  #onTokensStateChange = ({\n    allTokens,\n    allDetectedTokens,\n  }: TokensControllerState) => {\n    // Refresh token balances on chains whose tokens have changed.\n    const chainIds = this.#getChainIds(allTokens, allDetectedTokens);\n    const chainIdsToUpdate = chainIds.filter(\n      (chainId) =>\n        !isEqual(this.#allTokens[chainId], allTokens[chainId]) ||\n        !isEqual(this.#allDetectedTokens[chainId], allDetectedTokens[chainId]),\n    );\n\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.updateBalances({ chainIds: chainIdsToUpdate }).catch(console.error);\n  };\n\n  /**\n   * Handles the event for network state changes.\n   * @param _ - The network state.\n   * @param patches - An array of patch operations performed on the network state.\n   */\n  #onNetworkStateChange(_: NetworkState, patches: Patch[]) {\n    // Remove state for deleted networks\n    for (const patch of patches) {\n      if (\n        patch.op === 'remove' &&\n        patch.path[0] === 'networkConfigurationsByChainId'\n      ) {\n        const removedChainId = patch.path[1] as Hex;\n\n        this.update((state) => {\n          for (const accountAddress of Object.keys(state.tokenBalances)) {\n            delete state.tokenBalances[accountAddress as Hex][removedChainId];\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns an array of chain ids that have tokens.\n   * @param allTokens - The state for imported tokens across all chains.\n   * @param allDetectedTokens - The state for detected tokens across all chains.\n   * @returns An array of chain ids that have tokens.\n   */\n  #getChainIds = (\n    allTokens: TokensControllerState['allTokens'],\n    allDetectedTokens: TokensControllerState['allDetectedTokens'],\n  ) =>\n    [\n      ...new Set([\n        ...Object.keys(allTokens),\n        ...Object.keys(allDetectedTokens),\n      ]),\n    ] as Hex[];\n\n  /**\n   * Polls for erc20 token balances.\n   * @param input - The input for the poll.\n   * @param input.chainId - The chain id to poll token balances on.\n   */\n  async _executePoll({ chainId }: TokenBalancesPollingInput) {\n    await this.updateBalancesByChainId({ chainId });\n  }\n\n  /**\n   * Updates the token balances for the given chain ids.\n   * @param input - The input for the update.\n   * @param input.chainIds - The chain ids to update token balances for.\n   * Or omitted to update all chains that contain tokens.\n   */\n  async updateBalances({ chainIds }: { chainIds?: Hex[] } = {}) {\n    chainIds ??= this.#getChainIds(this.#allTokens, this.#allDetectedTokens);\n\n    await Promise.allSettled(\n      chainIds.map((chainId) => this.updateBalancesByChainId({ chainId })),\n    );\n  }\n\n  /**\n   * Updates token balances for the given chain id.\n   * @param input - The input for the update.\n   * @param input.chainId - The chain id to update token balances on.\n   */\n  async updateBalancesByChainId({ chainId }: { chainId: Hex }) {\n    const { address: selectedAccountAddress } = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const isSelectedAccount = (accountAddress: string) =>\n      toChecksumHexAddress(accountAddress) ===\n      toChecksumHexAddress(selectedAccountAddress);\n\n    const accountTokenPairs: { accountAddress: Hex; tokenAddress: Hex }[] = [];\n\n    const addTokens = ([accountAddress, tokens]: [string, Token[]]) =>\n      this.#queryMultipleAccounts || isSelectedAccount(accountAddress)\n        ? tokens.forEach((t) =>\n            accountTokenPairs.push({\n              accountAddress: accountAddress as Hex,\n              tokenAddress: t.address as Hex,\n            }),\n          )\n        : undefined;\n\n    // Balances will be updated for both imported and detected tokens\n    Object.entries(this.#allTokens[chainId] ?? {}).forEach(addTokens);\n    Object.entries(this.#allDetectedTokens[chainId] ?? {}).forEach(addTokens);\n\n    let results: MulticallResult[] = [];\n\n    if (accountTokenPairs.length > 0) {\n      const provider = new Web3Provider(\n        this.#getNetworkClient(chainId).provider,\n      );\n\n      const calls = accountTokenPairs.map(\n        ({ accountAddress, tokenAddress }) => ({\n          contract: new Contract(tokenAddress, abiERC20, provider),\n          functionSignature: 'balanceOf(address)',\n          arguments: [accountAddress],\n        }),\n      );\n\n      results = await multicallOrFallback(calls, chainId, provider);\n    }\n\n    this.update((state) => {\n      // Reset so that when accounts or tokens are removed,\n      // their balances are removed rather than left stale.\n      for (const accountAddress of Object.keys(state.tokenBalances)) {\n        state.tokenBalances[accountAddress as Hex][chainId] = {};\n      }\n\n      for (let i = 0; i < results.length; i++) {\n        const { success, value } = results[i];\n        const { accountAddress, tokenAddress } = accountTokenPairs[i];\n\n        if (success) {\n          ((state.tokenBalances[accountAddress] ??= {})[chainId] ??= {})[\n            tokenAddress\n          ] = toHex(value as BN);\n        }\n      }\n    });\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenBalancesState();\n    });\n  }\n\n  /**\n   * Returns the network client for a given chain id\n   * @param chainId - The chain id to get the network client for.\n   * @returns The network client for the given chain id.\n   */\n  #getNetworkClient(chainId: Hex) {\n    const { networkConfigurationsByChainId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n\n    const networkConfiguration = networkConfigurationsByChainId[chainId];\n    if (!networkConfiguration) {\n      throw new Error(\n        `TokenBalancesController: No network configuration found for chainId ${chainId}`,\n      );\n    }\n\n    const { networkClientId } =\n      networkConfiguration.rpcEndpoints[\n        networkConfiguration.defaultRpcEndpointIndex\n      ];\n\n    return this.messagingSystem.call(\n      `NetworkController:getNetworkClientById`,\n      networkClientId,\n    );\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
index d5e18e6..f1e74fe 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
@@ -1,40 +1,38 @@
 import type { AccountsControllerGetSelectedAccountAction } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
-import { BaseController } from "@metamask/base-controller";
-import type { AssetsContractControllerGetERC20BalanceOfAction } from "./AssetsContractController.cjs";
-import type { Token } from "./TokenRatesController.cjs";
-import type { TokensControllerStateChangeEvent } from "./TokensController.cjs";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
+import type { PreferencesControllerGetStateAction, PreferencesControllerStateChangeEvent } from "@metamask/preferences-controller";
+import type { Hex } from "@metamask/utils";
+import type { TokensControllerGetStateAction, TokensControllerStateChangeEvent } from "./TokensController.cjs";
 declare const controllerName = "TokenBalancesController";
 /**
  * Token balances controller options
  * @property interval - Polling interval used to fetch new token balances.
- * @property tokens - List of tokens to track balances for.
- * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.
+ * @property messenger - A controller messenger.
+ * @property state - Initial state for the controller.
  */
 type TokenBalancesControllerOptions = {
     interval?: number;
-    tokens?: Token[];
-    disabled?: boolean;
     messenger: TokenBalancesControllerMessenger;
     state?: Partial<TokenBalancesControllerState>;
 };
 /**
- * Represents a mapping of hash token contract addresses to their balances.
+ * A mapping from account address to chain id to token address to balance.
  */
-type ContractBalances = Record<string, string>;
+type TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;
 /**
  * Token balances controller state
- * @property contractBalances - Hash of token contract addresses to balances
+ * @property tokenBalances - A mapping from account address to chain id to token address to balance.
  */
 export type TokenBalancesControllerState = {
-    contractBalances: ContractBalances;
+    tokenBalances: TokenBalances;
 };
 export type TokenBalancesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerActions = TokenBalancesControllerGetStateAction;
-export type AllowedActions = AccountsControllerGetSelectedAccountAction | AssetsContractControllerGetERC20BalanceOfAction;
+export type AllowedActions = NetworkControllerGetNetworkClientByIdAction | NetworkControllerGetStateAction | TokensControllerGetStateAction | PreferencesControllerGetStateAction | AccountsControllerGetSelectedAccountAction;
 export type TokenBalancesControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerEvents = TokenBalancesControllerStateChangeEvent;
-export type AllowedEvents = TokensControllerStateChangeEvent;
+export type AllowedEvents = TokensControllerStateChangeEvent | PreferencesControllerStateChangeEvent | NetworkControllerStateChangeEvent;
 export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typeof controllerName, TokenBalancesControllerActions | AllowedActions, TokenBalancesControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
 /**
  * Get the default TokenBalancesController state.
@@ -42,41 +40,63 @@ export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typ
  * @returns The default TokenBalancesController state.
  */
 export declare function getDefaultTokenBalancesState(): TokenBalancesControllerState;
+/** The input to start polling for the {@link TokenBalancesController} */
+export type TokenBalancesPollingInput = {
+    chainId: Hex;
+};
+declare const TokenBalancesController_base: (abstract new (...args: any[]) => {
+    readonly "__#787887@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#787887@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: TokenBalancesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#787879@#pollingTokenSets": Map<string, Set<string>>;
+    "__#787879@#callbacks": Map<string, Set<(input: TokenBalancesPollingInput) => void>>;
+    _executePoll(input: TokenBalancesPollingInput): Promise<void>;
+    startPolling(input: TokenBalancesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: TokenBalancesPollingInput, callback: (input: TokenBalancesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export declare class TokenBalancesController extends BaseController<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
+export declare class TokenBalancesController extends TokenBalancesController_base<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
     #private;
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval, tokens, disabled, messenger, state, }: TokenBalancesControllerOptions);
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable(): void;
+    constructor({ interval, messenger, state, }: TokenBalancesControllerOptions);
     /**
-     * Blocks controller from updating tracked tokens contract balances.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.chainId - The chain id to poll token balances on.
      */
-    disable(): void;
+    _executePoll({ chainId }: TokenBalancesPollingInput): Promise<void>;
     /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
+     * Updates the token balances for the given chain ids.
+     * @param input - The input for the update.
+     * @param input.chainIds - The chain ids to update token balances for.
+     * Or omitted to update all chains that contain tokens.
      */
-    poll(interval?: number): Promise<void>;
+    updateBalances({ chainIds }?: {
+        chainIds?: Hex[];
+    }): Promise<void>;
     /**
-     * Updates balances for all tokens.
+     * Updates token balances for the given chain id.
+     * @param input - The input for the update.
+     * @param input.chainId - The chain id to update token balances on.
      */
-    updateBalances(): Promise<void>;
+    updateBalancesByChainId({ chainId }: {
+        chainId: Hex;
+    }): Promise<void>;
     /**
      * Reset the controller state to the default state.
      */
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
index 1340bd2..1f8480a 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.d.cts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AACnC,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAG3D,OAAO,KAAK,EAAE,+CAA+C,EAAE,uCAAmC;AAClG,OAAO,KAAK,EAAE,KAAK,EAAE,mCAA+B;AACpD,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,+CAA+C,CAAC;AAEpD,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IASC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA8BjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAkB5C;;OAEG;IACG,cAAc;IA8BpB;;OAEG;IACH,UAAU;CAKX;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.d.cts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AAGnC,OAAO,KAAK,EACV,2CAA2C,EAC3C,+BAA+B,EAC/B,iCAAiC,EAElC,qCAAqC;AAEtC,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EAEtC,yCAAyC;AAC1C,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAQ3C,OAAO,KAAK,EACV,8BAA8B,EAE9B,gCAAgC,EACjC,+BAA2B;AAI5B,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,aAAa,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,2CAA2C,GAC3C,+BAA+B,GAC/B,8BAA8B,GAC9B,mCAAmC,GACnC,0CAA0C,CAAC;AAE/C,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GACrB,gCAAgC,GAChC,qCAAqC,GACrC,iCAAiC,CAAC;AAEtC,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED,yEAAyE;AACzE,MAAM,MAAM,yBAAyB,GAAG;IACtC,OAAO,EAAE,GAAG,CAAC;CACd,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,6BAC3C,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAOC;;;;;;;OAOG;gBACS,EACV,QAA2B,EAC3B,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA2IjC;;;;OAIG;IACG,YAAY,CAAC,EAAE,OAAO,EAAE,EAAE,yBAAyB;IAIzD;;;;;OAKG;IACG,cAAc,CAAC,EAAE,QAAQ,EAAE,GAAE;QAAE,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAA;KAAO;IAQ5D;;;;OAIG;IACG,uBAAuB,CAAC,EAAE,OAAO,EAAE,EAAE;QAAE,OAAO,EAAE,GAAG,CAAA;KAAE;IA+D3D;;OAEG;IACH,UAAU;CAiCX;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
index 7695335..169b9d1 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
@@ -1,40 +1,38 @@
 import type { AccountsControllerGetSelectedAccountAction } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
-import { BaseController } from "@metamask/base-controller";
-import type { AssetsContractControllerGetERC20BalanceOfAction } from "./AssetsContractController.mjs";
-import type { Token } from "./TokenRatesController.mjs";
-import type { TokensControllerStateChangeEvent } from "./TokensController.mjs";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
+import type { PreferencesControllerGetStateAction, PreferencesControllerStateChangeEvent } from "@metamask/preferences-controller";
+import type { Hex } from "@metamask/utils";
+import type { TokensControllerGetStateAction, TokensControllerStateChangeEvent } from "./TokensController.mjs";
 declare const controllerName = "TokenBalancesController";
 /**
  * Token balances controller options
  * @property interval - Polling interval used to fetch new token balances.
- * @property tokens - List of tokens to track balances for.
- * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.
+ * @property messenger - A controller messenger.
+ * @property state - Initial state for the controller.
  */
 type TokenBalancesControllerOptions = {
     interval?: number;
-    tokens?: Token[];
-    disabled?: boolean;
     messenger: TokenBalancesControllerMessenger;
     state?: Partial<TokenBalancesControllerState>;
 };
 /**
- * Represents a mapping of hash token contract addresses to their balances.
+ * A mapping from account address to chain id to token address to balance.
  */
-type ContractBalances = Record<string, string>;
+type TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;
 /**
  * Token balances controller state
- * @property contractBalances - Hash of token contract addresses to balances
+ * @property tokenBalances - A mapping from account address to chain id to token address to balance.
  */
 export type TokenBalancesControllerState = {
-    contractBalances: ContractBalances;
+    tokenBalances: TokenBalances;
 };
 export type TokenBalancesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerActions = TokenBalancesControllerGetStateAction;
-export type AllowedActions = AccountsControllerGetSelectedAccountAction | AssetsContractControllerGetERC20BalanceOfAction;
+export type AllowedActions = NetworkControllerGetNetworkClientByIdAction | NetworkControllerGetStateAction | TokensControllerGetStateAction | PreferencesControllerGetStateAction | AccountsControllerGetSelectedAccountAction;
 export type TokenBalancesControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerEvents = TokenBalancesControllerStateChangeEvent;
-export type AllowedEvents = TokensControllerStateChangeEvent;
+export type AllowedEvents = TokensControllerStateChangeEvent | PreferencesControllerStateChangeEvent | NetworkControllerStateChangeEvent;
 export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typeof controllerName, TokenBalancesControllerActions | AllowedActions, TokenBalancesControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
 /**
  * Get the default TokenBalancesController state.
@@ -42,41 +40,63 @@ export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typ
  * @returns The default TokenBalancesController state.
  */
 export declare function getDefaultTokenBalancesState(): TokenBalancesControllerState;
+/** The input to start polling for the {@link TokenBalancesController} */
+export type TokenBalancesPollingInput = {
+    chainId: Hex;
+};
+declare const TokenBalancesController_base: (abstract new (...args: any[]) => {
+    readonly "__#787887@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#787887@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: TokenBalancesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#787879@#pollingTokenSets": Map<string, Set<string>>;
+    "__#787879@#callbacks": Map<string, Set<(input: TokenBalancesPollingInput) => void>>;
+    _executePoll(input: TokenBalancesPollingInput): Promise<void>;
+    startPolling(input: TokenBalancesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: TokenBalancesPollingInput, callback: (input: TokenBalancesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export declare class TokenBalancesController extends BaseController<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
+export declare class TokenBalancesController extends TokenBalancesController_base<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
     #private;
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval, tokens, disabled, messenger, state, }: TokenBalancesControllerOptions);
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable(): void;
+    constructor({ interval, messenger, state, }: TokenBalancesControllerOptions);
     /**
-     * Blocks controller from updating tracked tokens contract balances.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.chainId - The chain id to poll token balances on.
      */
-    disable(): void;
+    _executePoll({ chainId }: TokenBalancesPollingInput): Promise<void>;
     /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
+     * Updates the token balances for the given chain ids.
+     * @param input - The input for the update.
+     * @param input.chainIds - The chain ids to update token balances for.
+     * Or omitted to update all chains that contain tokens.
      */
-    poll(interval?: number): Promise<void>;
+    updateBalances({ chainIds }?: {
+        chainIds?: Hex[];
+    }): Promise<void>;
     /**
-     * Updates balances for all tokens.
+     * Updates token balances for the given chain id.
+     * @param input - The input for the update.
+     * @param input.chainId - The chain id to update token balances on.
      */
-    updateBalances(): Promise<void>;
+    updateBalancesByChainId({ chainId }: {
+        chainId: Hex;
+    }): Promise<void>;
     /**
      * Reset the controller state to the default state.
      */
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
index 1ec203c..a4baad6 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.d.mts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AACnC,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAG3D,OAAO,KAAK,EAAE,+CAA+C,EAAE,uCAAmC;AAClG,OAAO,KAAK,EAAE,KAAK,EAAE,mCAA+B;AACpD,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,+CAA+C,CAAC;AAEpD,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IASC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA8BjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAkB5C;;OAEG;IACG,cAAc;IA8BpB;;OAEG;IACH,UAAU;CAKX;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.d.mts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AAGnC,OAAO,KAAK,EACV,2CAA2C,EAC3C,+BAA+B,EAC/B,iCAAiC,EAElC,qCAAqC;AAEtC,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EAEtC,yCAAyC;AAC1C,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAQ3C,OAAO,KAAK,EACV,8BAA8B,EAE9B,gCAAgC,EACjC,+BAA2B;AAI5B,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,aAAa,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,2CAA2C,GAC3C,+BAA+B,GAC/B,8BAA8B,GAC9B,mCAAmC,GACnC,0CAA0C,CAAC;AAE/C,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GACrB,gCAAgC,GAChC,qCAAqC,GACrC,iCAAiC,CAAC;AAEtC,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED,yEAAyE;AACzE,MAAM,MAAM,yBAAyB,GAAG;IACtC,OAAO,EAAE,GAAG,CAAC;CACd,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,6BAC3C,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IAOC;;;;;;;OAOG;gBACS,EACV,QAA2B,EAC3B,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA2IjC;;;;OAIG;IACG,YAAY,CAAC,EAAE,OAAO,EAAE,EAAE,yBAAyB;IAIzD;;;;;OAKG;IACG,cAAc,CAAC,EAAE,QAAQ,EAAE,GAAE;QAAE,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAA;KAAO;IAQ5D;;;;OAIG;IACG,uBAAuB,CAAC,EAAE,OAAO,EAAE,EAAE;QAAE,OAAO,EAAE,GAAG,CAAA;KAAE;IA+D3D;;OAEG;IACH,UAAU;CAiCX;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
index a87eb7a..f228960 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
@@ -1,21 +1,27 @@
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
 var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
     if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TokenBalancesController_handle, _TokenBalancesController_interval, _TokenBalancesController_tokens, _TokenBalancesController_disabled;
-import { BaseController } from "@metamask/base-controller";
-import { safelyExecute, toHex } from "@metamask/controller-utils";
+var _TokenBalancesController_instances, _TokenBalancesController_queryMultipleAccounts, _TokenBalancesController_allTokens, _TokenBalancesController_allDetectedTokens, _TokenBalancesController_calculateQueryMultipleAccounts, _TokenBalancesController_onPreferencesStateChange, _TokenBalancesController_onTokensStateChange, _TokenBalancesController_onNetworkStateChange, _TokenBalancesController_getChainIds, _TokenBalancesController_getNetworkClient;
+import { Contract } from "@ethersproject/contracts";
+import { Web3Provider } from "@ethersproject/providers";
+import { toChecksumHexAddress, toHex } from "@metamask/controller-utils";
+import { abiERC20 } from "@metamask/metamask-eth-abis";
+import { StaticIntervalPollingController } from "@metamask/polling-controller";
+import $lodash from "lodash";
+const { isEqual } = $lodash;
+import { multicallOrFallback } from "./multicall.mjs";
 const DEFAULT_INTERVAL = 180000;
 const controllerName = 'TokenBalancesController';
 const metadata = {
-    contractBalances: { persist: true, anonymous: false },
+    tokenBalances: { persist: true, anonymous: false },
 };
 /**
  * Get the default TokenBalancesController state.
@@ -24,25 +30,24 @@ const metadata = {
  */
 export function getDefaultTokenBalancesState() {
     return {
-        contractBalances: {},
+        tokenBalances: {},
     };
 }
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export class TokenBalancesController extends BaseController {
+export class TokenBalancesController extends StaticIntervalPollingController() {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval = DEFAULT_INTERVAL, tokens = [], disabled = false, messenger, state = {}, }) {
+    constructor({ interval = DEFAULT_INTERVAL, messenger, state = {}, }) {
+        var _a, _b;
         super({
             name: controllerName,
             metadata,
@@ -52,77 +57,137 @@ export class TokenBalancesController extends BaseController {
                 ...state,
             },
         });
-        _TokenBalancesController_handle.set(this, void 0);
-        _TokenBalancesController_interval.set(this, void 0);
-        _TokenBalancesController_tokens.set(this, void 0);
-        _TokenBalancesController_disabled.set(this, void 0);
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, disabled, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_tokens, tokens, "f");
-        this.messagingSystem.subscribe('TokensController:stateChange', ({ tokens: newTokens, detectedTokens }) => {
-            __classPrivateFieldSet(this, _TokenBalancesController_tokens, [...newTokens, ...detectedTokens], "f");
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.updateBalances();
+        _TokenBalancesController_instances.add(this);
+        _TokenBalancesController_queryMultipleAccounts.set(this, void 0);
+        _TokenBalancesController_allTokens.set(this, void 0);
+        _TokenBalancesController_allDetectedTokens.set(this, void 0);
+        /**
+         * Determines whether to query all accounts, or just the selected account.
+         * @param preferences - The preferences state.
+         * @param preferences.isMultiAccountBalancesEnabled - whether to query all accounts (mobile).
+         * @param preferences.useMultiAccountBalanceChecker - whether to query all accounts (extension).
+         * @returns true if all accounts should be queried.
+         */
+        _TokenBalancesController_calculateQueryMultipleAccounts.set(this, ({ isMultiAccountBalancesEnabled, useMultiAccountBalanceChecker, }) => {
+            return Boolean(
+            // Note: These settings have different names on extension vs mobile
+            isMultiAccountBalancesEnabled || useMultiAccountBalanceChecker);
         });
-        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-        // eslint-disable-next-line @typescript-eslint/no-floating-promises
-        this.poll();
-    }
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, false, "f");
+        /**
+         * Handles the event for preferences state changes.
+         * @param preferences - The preferences state.
+         */
+        _TokenBalancesController_onPreferencesStateChange.set(this, (preferences) => {
+            // Update the user preference for whether to query multiple accounts.
+            const queryMultipleAccounts = __classPrivateFieldGet(this, _TokenBalancesController_calculateQueryMultipleAccounts, "f").call(this, preferences);
+            // Refresh when flipped off -> on
+            const refresh = queryMultipleAccounts && !__classPrivateFieldGet(this, _TokenBalancesController_queryMultipleAccounts, "f");
+            __classPrivateFieldSet(this, _TokenBalancesController_queryMultipleAccounts, queryMultipleAccounts, "f");
+            if (refresh) {
+                this.updateBalances().catch(console.error);
+            }
+        });
+        /**
+         * Handles the event for tokens state changes.
+         * @param state - The token state.
+         * @param state.allTokens - The state for imported tokens across all chains.
+         * @param state.allDetectedTokens - The state for detected tokens across all chains.
+         */
+        _TokenBalancesController_onTokensStateChange.set(this, ({ allTokens, allDetectedTokens, }) => {
+            // Refresh token balances on chains whose tokens have changed.
+            const chainIds = __classPrivateFieldGet(this, _TokenBalancesController_getChainIds, "f").call(this, allTokens, allDetectedTokens);
+            const chainIdsToUpdate = chainIds.filter((chainId) => !isEqual(__classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f")[chainId], allTokens[chainId]) ||
+                !isEqual(__classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")[chainId], allDetectedTokens[chainId]));
+            __classPrivateFieldSet(this, _TokenBalancesController_allTokens, allTokens, "f");
+            __classPrivateFieldSet(this, _TokenBalancesController_allDetectedTokens, allDetectedTokens, "f");
+            this.updateBalances({ chainIds: chainIdsToUpdate }).catch(console.error);
+        });
+        /**
+         * Returns an array of chain ids that have tokens.
+         * @param allTokens - The state for imported tokens across all chains.
+         * @param allDetectedTokens - The state for detected tokens across all chains.
+         * @returns An array of chain ids that have tokens.
+         */
+        _TokenBalancesController_getChainIds.set(this, (allTokens, allDetectedTokens) => [
+            ...new Set([
+                ...Object.keys(allTokens),
+                ...Object.keys(allDetectedTokens),
+            ]),
+        ]);
+        this.setIntervalLength(interval);
+        // Set initial preference for querying multiple accounts, and subscribe to changes
+        __classPrivateFieldSet(this, _TokenBalancesController_queryMultipleAccounts, __classPrivateFieldGet(this, _TokenBalancesController_calculateQueryMultipleAccounts, "f").call(this, this.messagingSystem.call('PreferencesController:getState')), "f");
+        this.messagingSystem.subscribe('PreferencesController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_onPreferencesStateChange, "f").bind(this));
+        // Set initial tokens, and subscribe to changes
+        (_a = this, _b = this, {
+            allTokens: ({ set value(_c) { __classPrivateFieldSet(_a, _TokenBalancesController_allTokens, _c, "f"); } }).value,
+            allDetectedTokens: ({ set value(_c) { __classPrivateFieldSet(_b, _TokenBalancesController_allDetectedTokens, _c, "f"); } }).value,
+        } = this.messagingSystem.call('TokensController:getState'));
+        this.messagingSystem.subscribe('TokensController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_onTokensStateChange, "f").bind(this));
+        // Subscribe to network state changes
+        this.messagingSystem.subscribe('NetworkController:stateChange', __classPrivateFieldGet(this, _TokenBalancesController_instances, "m", _TokenBalancesController_onNetworkStateChange).bind(this));
     }
     /**
-     * Blocks controller from updating tracked tokens contract balances.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.chainId - The chain id to poll token balances on.
      */
-    disable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, true, "f");
+    async _executePoll({ chainId }) {
+        await this.updateBalancesByChainId({ chainId });
     }
     /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
+     * Updates the token balances for the given chain ids.
+     * @param input - The input for the update.
+     * @param input.chainIds - The chain ids to update token balances for.
+     * Or omitted to update all chains that contain tokens.
      */
-    async poll(interval) {
-        if (interval) {
-            __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        }
-        if (__classPrivateFieldGet(this, _TokenBalancesController_handle, "f")) {
-            clearTimeout(__classPrivateFieldGet(this, _TokenBalancesController_handle, "f"));
-        }
-        await safelyExecute(() => this.updateBalances());
-        __classPrivateFieldSet(this, _TokenBalancesController_handle, setTimeout(() => {
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.poll(__classPrivateFieldGet(this, _TokenBalancesController_interval, "f"));
-        }, __classPrivateFieldGet(this, _TokenBalancesController_interval, "f")), "f");
+    async updateBalances({ chainIds } = {}) {
+        chainIds ?? (chainIds = __classPrivateFieldGet(this, _TokenBalancesController_getChainIds, "f").call(this, __classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f"), __classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")));
+        await Promise.allSettled(chainIds.map((chainId) => this.updateBalancesByChainId({ chainId })));
     }
     /**
-     * Updates balances for all tokens.
+     * Updates token balances for the given chain id.
+     * @param input - The input for the update.
+     * @param input.chainId - The chain id to update token balances on.
      */
-    async updateBalances() {
-        if (__classPrivateFieldGet(this, _TokenBalancesController_disabled, "f")) {
-            return;
+    async updateBalancesByChainId({ chainId }) {
+        const { address: selectedAccountAddress } = this.messagingSystem.call('AccountsController:getSelectedAccount');
+        const isSelectedAccount = (accountAddress) => toChecksumHexAddress(accountAddress) ===
+            toChecksumHexAddress(selectedAccountAddress);
+        const accountTokenPairs = [];
+        const addTokens = ([accountAddress, tokens]) => __classPrivateFieldGet(this, _TokenBalancesController_queryMultipleAccounts, "f") || isSelectedAccount(accountAddress)
+            ? tokens.forEach((t) => accountTokenPairs.push({
+                accountAddress: accountAddress,
+                tokenAddress: t.address,
+            }))
+            : undefined;
+        // Balances will be updated for both imported and detected tokens
+        Object.entries(__classPrivateFieldGet(this, _TokenBalancesController_allTokens, "f")[chainId] ?? {}).forEach(addTokens);
+        Object.entries(__classPrivateFieldGet(this, _TokenBalancesController_allDetectedTokens, "f")[chainId] ?? {}).forEach(addTokens);
+        let results = [];
+        if (accountTokenPairs.length > 0) {
+            const provider = new Web3Provider(__classPrivateFieldGet(this, _TokenBalancesController_instances, "m", _TokenBalancesController_getNetworkClient).call(this, chainId).provider);
+            const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({
+                contract: new Contract(tokenAddress, abiERC20, provider),
+                functionSignature: 'balanceOf(address)',
+                arguments: [accountAddress],
+            }));
+            results = await multicallOrFallback(calls, chainId, provider);
         }
-        const selectedInternalAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
-        const newContractBalances = {};
-        for (const token of __classPrivateFieldGet(this, _TokenBalancesController_tokens, "f")) {
-            const { address } = token;
-            try {
-                const balance = await this.messagingSystem.call('AssetsContractController:getERC20BalanceOf', address, selectedInternalAccount.address);
-                newContractBalances[address] = toHex(balance);
-                token.hasBalanceError = false;
+        this.update((state) => {
+            var _a, _b;
+            // Reset so that when accounts or tokens are removed,
+            // their balances are removed rather than left stale.
+            for (const accountAddress of Object.keys(state.tokenBalances)) {
+                state.tokenBalances[accountAddress][chainId] = {};
             }
-            catch (error) {
-                newContractBalances[address] = toHex(0);
-                token.hasBalanceError = true;
+            for (let i = 0; i < results.length; i++) {
+                const { success, value } = results[i];
+                const { accountAddress, tokenAddress } = accountTokenPairs[i];
+                if (success) {
+                    ((_b = ((_a = state.tokenBalances)[accountAddress] ?? (_a[accountAddress] = {})))[chainId] ?? (_b[chainId] = {}))[tokenAddress] = toHex(value);
+                }
             }
-        }
-        this.update((state) => {
-            state.contractBalances = newContractBalances;
         });
     }
     /**
@@ -134,6 +199,27 @@ export class TokenBalancesController extends BaseController {
         });
     }
 }
-_TokenBalancesController_handle = new WeakMap(), _TokenBalancesController_interval = new WeakMap(), _TokenBalancesController_tokens = new WeakMap(), _TokenBalancesController_disabled = new WeakMap();
+_TokenBalancesController_queryMultipleAccounts = new WeakMap(), _TokenBalancesController_allTokens = new WeakMap(), _TokenBalancesController_allDetectedTokens = new WeakMap(), _TokenBalancesController_calculateQueryMultipleAccounts = new WeakMap(), _TokenBalancesController_onPreferencesStateChange = new WeakMap(), _TokenBalancesController_onTokensStateChange = new WeakMap(), _TokenBalancesController_getChainIds = new WeakMap(), _TokenBalancesController_instances = new WeakSet(), _TokenBalancesController_onNetworkStateChange = function _TokenBalancesController_onNetworkStateChange(_, patches) {
+    // Remove state for deleted networks
+    for (const patch of patches) {
+        if (patch.op === 'remove' &&
+            patch.path[0] === 'networkConfigurationsByChainId') {
+            const removedChainId = patch.path[1];
+            this.update((state) => {
+                for (const accountAddress of Object.keys(state.tokenBalances)) {
+                    delete state.tokenBalances[accountAddress][removedChainId];
+                }
+            });
+        }
+    }
+}, _TokenBalancesController_getNetworkClient = function _TokenBalancesController_getNetworkClient(chainId) {
+    const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+    const networkConfiguration = networkConfigurationsByChainId[chainId];
+    if (!networkConfiguration) {
+        throw new Error(`TokenBalancesController: No network configuration found for chainId ${chainId}`);
+    }
+    const { networkClientId } = networkConfiguration.rpcEndpoints[networkConfiguration.defaultRpcEndpointIndex];
+    return this.messagingSystem.call(`NetworkController:getNetworkClientById`, networkClientId);
+};
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
index a95bf2d..276bc2d 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.mjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAMA,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAC3D,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,mCAAmC;AAMlE,MAAM,gBAAgB,GAAG,MAAM,CAAC;AAEhC,MAAM,cAAc,GAAG,yBAAyB,CAAC;AAEjD,MAAM,QAAQ,GAAG;IACf,gBAAgB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACtD,CAAC;AA4DF;;;;GAIG;AACH,MAAM,UAAU,4BAA4B;IAC1C,OAAO;QACL,gBAAgB,EAAE,EAAE;KACrB,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,cAI5C;IASC;;;;;;;;;OASG;IACH,YAAY,EACV,QAAQ,GAAG,gBAAgB,EAC3B,MAAM,GAAG,EAAE,EACX,QAAQ,GAAG,KAAK,EAChB,SAAS,EACT,KAAK,GAAG,EAAE,GACqB;QAC/B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,4BAA4B,EAAE;gBACjC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;QAjCL,kDAAwC;QAExC,oDAAkB;QAElB,kDAAiB;QAEjB,oDAAmB;QA6BjB,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,mCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,8BAA8B,EAC9B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,EAAE,EAAE;YACxC,uBAAA,IAAI,mCAAW,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,CAAC,MAAA,CAAC;YACjD,gFAAgF;YAChF,mEAAmE;YACnE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CACF,CAAC;QAEF,gFAAgF;QAChF,mEAAmE;QACnE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,uBAAA,IAAI,qCAAa,KAAK,MAAA,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,OAAO;QACL,uBAAA,IAAI,qCAAa,IAAI,MAAA,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,QAAiB;QAC1B,IAAI,QAAQ,EAAE;YACZ,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;SAC3B;QAED,IAAI,uBAAA,IAAI,uCAAQ,EAAE;YAChB,YAAY,CAAC,uBAAA,IAAI,uCAAQ,CAAC,CAAC;SAC5B;QAED,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QAEjD,uBAAA,IAAI,mCAAW,UAAU,CAAC,GAAG,EAAE;YAC7B,gFAAgF;YAChF,mEAAmE;YACnE,IAAI,CAAC,IAAI,CAAC,uBAAA,IAAI,yCAAU,CAAC,CAAC;QAC5B,CAAC,EAAE,uBAAA,IAAI,yCAAU,CAAC,MAAA,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,IAAI,uBAAA,IAAI,yCAAU,EAAE;YAClB,OAAO;SACR;QACD,MAAM,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACvD,uCAAuC,CACxC,CAAC;QAEF,MAAM,mBAAmB,GAAqB,EAAE,CAAC;QACjD,KAAK,MAAM,KAAK,IAAI,uBAAA,IAAI,uCAAQ,EAAE;YAChC,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;YAC1B,IAAI;gBACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,4CAA4C,EAC5C,OAAO,EACP,uBAAuB,CAAC,OAAO,CAChC,CAAC;gBACF,mBAAmB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC9C,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACd,mBAAmB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;aAC9B;SACF;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO,4BAA4B,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;CACF;;AAED,eAAe,uBAAuB,CAAC","sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\n\nimport type { AssetsContractControllerGetERC20BalanceOfAction } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AssetsContractControllerGetERC20BalanceOfAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateBalances();\n      },\n    );\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n    const selectedInternalAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      try {\n        const balance = await this.messagingSystem.call(\n          'AssetsContractController:getERC20BalanceOf',\n          address,\n          selectedInternalAccount.address,\n        );\n        newContractBalances[address] = toHex(balance);\n        token.hasBalanceError = false;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.hasBalanceError = true;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenBalancesState();\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.mjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,EAAE,YAAY,EAAE,iCAAiC;AAOxD,OAAO,EAAE,oBAAoB,EAAE,KAAK,EAAE,mCAAmC;AACzE,OAAO,EAAE,QAAQ,EAAE,oCAAoC;AAOvD,OAAO,EAAE,+BAA+B,EAAE,qCAAqC;;;AAY/E,OAAO,EAAE,mBAAmB,EAAE,wBAAoB;AAQlD,MAAM,gBAAgB,GAAG,MAAM,CAAC;AAEhC,MAAM,cAAc,GAAG,yBAAyB,CAAC;AAEjD,MAAM,QAAQ,GAAG;IACf,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACnD,CAAC;AAgEF;;;;GAIG;AACH,MAAM,UAAU,4BAA4B;IAC1C,OAAO;QACL,aAAa,EAAE,EAAE;KAClB,CAAC;AACJ,CAAC;AAOD;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,+BAA+B,EAI3E;IAOC;;;;;;;OAOG;IACH,YAAY,EACV,QAAQ,GAAG,gBAAgB,EAC3B,SAAS,EACT,KAAK,GAAG,EAAE,GACqB;;QAC/B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,4BAA4B,EAAE;gBACjC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;;QA3BL,iEAAgC;QAEhC,qDAA+C;QAE/C,6DAA+D;QAsD/D;;;;;;WAMG;QACH,kEAAkC,CAAC,EACjC,6BAA6B,EAC7B,6BAA6B,GACkC,EAAE,EAAE;YACnE,OAAO,OAAO;YACZ,mEAAmE;YACnE,6BAA6B,IAAI,6BAA6B,CAC/D,CAAC;QACJ,CAAC,EAAC;QAEF;;;WAGG;QACH,4DAA4B,CAAC,WAA6B,EAAE,EAAE;YAC5D,qEAAqE;YACrE,MAAM,qBAAqB,GACzB,uBAAA,IAAI,+DAAgC,MAApC,IAAI,EAAiC,WAAW,CAAC,CAAC;YAEpD,iCAAiC;YACjC,MAAM,OAAO,GAAG,qBAAqB,IAAI,CAAC,uBAAA,IAAI,sDAAuB,CAAC;YACtE,uBAAA,IAAI,kDAA0B,qBAAqB,MAAA,CAAC;YAEpD,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,cAAc,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC5C;QACH,CAAC,EAAC;QAEF;;;;;WAKG;QACH,uDAAuB,CAAC,EACtB,SAAS,EACT,iBAAiB,GACK,EAAE,EAAE;YAC1B,8DAA8D;YAC9D,MAAM,QAAQ,GAAG,uBAAA,IAAI,4CAAa,MAAjB,IAAI,EAAc,SAAS,EAAE,iBAAiB,CAAC,CAAC;YACjE,MAAM,gBAAgB,GAAG,QAAQ,CAAC,MAAM,CACtC,CAAC,OAAO,EAAE,EAAE,CACV,CAAC,OAAO,CAAC,uBAAA,IAAI,0CAAW,CAAC,OAAO,CAAC,EAAE,SAAS,CAAC,OAAO,CAAC,CAAC;gBACtD,CAAC,OAAO,CAAC,uBAAA,IAAI,kDAAmB,CAAC,OAAO,CAAC,EAAE,iBAAiB,CAAC,OAAO,CAAC,CAAC,CACzE,CAAC;YAEF,uBAAA,IAAI,sCAAc,SAAS,MAAA,CAAC;YAC5B,uBAAA,IAAI,8CAAsB,iBAAiB,MAAA,CAAC;YAE5C,IAAI,CAAC,cAAc,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC3E,CAAC,EAAC;QAyBF;;;;;WAKG;QACH,+CAAe,CACb,SAA6C,EAC7C,iBAA6D,EAC7D,EAAE,CACF;YACE,GAAG,IAAI,GAAG,CAAC;gBACT,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC;gBACzB,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC;aAClC,CAAC;SACM,EAAC;QA9HX,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;QAEjC,kFAAkF;QAClF,uBAAA,IAAI,kDAA0B,uBAAA,IAAI,+DAAgC,MAApC,IAAI,EAChC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,gCAAgC,CAAC,CAC5D,MAAA,CAAC;QACF,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,mCAAmC,EACnC,uBAAA,IAAI,yDAA0B,CAAC,IAAI,CAAC,IAAI,CAAC,CAC1C,CAAC;QAEF,+CAA+C;QAC/C,MACa,IAAI,OACI,IAAI,EAFxB;YACC,SAAS,wGAAiB;YAC1B,iBAAiB,gHAAyB;SAC3C,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC,CAAC;QAE5D,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,8BAA8B,EAC9B,uBAAA,IAAI,oDAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CACrC,CAAC;QAEF,qCAAqC;QACrC,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,+BAA+B,EAC/B,uBAAA,IAAI,yFAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CACtC,CAAC;IACJ,CAAC;IAqGD;;;;OAIG;IACH,KAAK,CAAC,YAAY,CAAC,EAAE,OAAO,EAA6B;QACvD,MAAM,IAAI,CAAC,uBAAuB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC;IAClD,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,cAAc,CAAC,EAAE,QAAQ,KAA2B,EAAE;QAC1D,QAAQ,KAAR,QAAQ,GAAK,uBAAA,IAAI,4CAAa,MAAjB,IAAI,EAAc,uBAAA,IAAI,0CAAW,EAAE,uBAAA,IAAI,kDAAmB,CAAC,EAAC;QAEzE,MAAM,OAAO,CAAC,UAAU,CACtB,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,CACrE,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,uBAAuB,CAAC,EAAE,OAAO,EAAoB;QACzD,MAAM,EAAE,OAAO,EAAE,sBAAsB,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACnE,uCAAuC,CACxC,CAAC;QAEF,MAAM,iBAAiB,GAAG,CAAC,cAAsB,EAAE,EAAE,CACnD,oBAAoB,CAAC,cAAc,CAAC;YACpC,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;QAE/C,MAAM,iBAAiB,GAAiD,EAAE,CAAC;QAE3E,MAAM,SAAS,GAAG,CAAC,CAAC,cAAc,EAAE,MAAM,CAAoB,EAAE,EAAE,CAChE,uBAAA,IAAI,sDAAuB,IAAI,iBAAiB,CAAC,cAAc,CAAC;YAC9D,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CACnB,iBAAiB,CAAC,IAAI,CAAC;gBACrB,cAAc,EAAE,cAAqB;gBACrC,YAAY,EAAE,CAAC,CAAC,OAAc;aAC/B,CAAC,CACH;YACH,CAAC,CAAC,SAAS,CAAC;QAEhB,iEAAiE;QACjE,MAAM,CAAC,OAAO,CAAC,uBAAA,IAAI,0CAAW,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAClE,MAAM,CAAC,OAAO,CAAC,uBAAA,IAAI,kDAAmB,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;QAE1E,IAAI,OAAO,GAAsB,EAAE,CAAC;QAEpC,IAAI,iBAAiB,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,MAAM,QAAQ,GAAG,IAAI,YAAY,CAC/B,uBAAA,IAAI,qFAAkB,MAAtB,IAAI,EAAmB,OAAO,CAAC,CAAC,QAAQ,CACzC,CAAC;YAEF,MAAM,KAAK,GAAG,iBAAiB,CAAC,GAAG,CACjC,CAAC,EAAE,cAAc,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;gBACrC,QAAQ,EAAE,IAAI,QAAQ,CAAC,YAAY,EAAE,QAAQ,EAAE,QAAQ,CAAC;gBACxD,iBAAiB,EAAE,oBAAoB;gBACvC,SAAS,EAAE,CAAC,cAAc,CAAC;aAC5B,CAAC,CACH,CAAC;YAEF,OAAO,GAAG,MAAM,mBAAmB,CAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SAC/D;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;;YACpB,qDAAqD;YACrD,qDAAqD;YACrD,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;gBAC7D,KAAK,CAAC,aAAa,CAAC,cAAqB,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aAC1D;YAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBACtC,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;gBAE9D,IAAI,OAAO,EAAE;oBACX,OAAC,OAAC,KAAK,CAAC,aAAa,EAAC,cAAc,SAAd,cAAc,IAAM,EAAE,EAAC,EAAC,OAAO,SAAP,OAAO,IAAM,EAAE,EAAC,CAC5D,YAAY,CACb,GAAG,KAAK,CAAC,KAAW,CAAC,CAAC;iBACxB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;OAEG;IACH,UAAU;QACR,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO,4BAA4B,EAAE,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;CA6BF;2kBAlKuB,CAAe,EAAE,OAAgB;IACrD,oCAAoC;IACpC,KAAK,MAAM,KAAK,IAAI,OAAO,EAAE;QAC3B,IACE,KAAK,CAAC,EAAE,KAAK,QAAQ;YACrB,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,gCAAgC,EAClD;YACA,MAAM,cAAc,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAQ,CAAC;YAE5C,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;gBACpB,KAAK,MAAM,cAAc,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,EAAE;oBAC7D,OAAO,KAAK,CAAC,aAAa,CAAC,cAAqB,CAAC,CAAC,cAAc,CAAC,CAAC;iBACnE;YACH,CAAC,CAAC,CAAC;SACJ;KACF;AACH,CAAC,iGA4HiB,OAAY;IAC5B,MAAM,EAAE,8BAA8B,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAClE,4BAA4B,CAC7B,CAAC;IAEF,MAAM,oBAAoB,GAAG,8BAA8B,CAAC,OAAO,CAAC,CAAC;IACrE,IAAI,CAAC,oBAAoB,EAAE;QACzB,MAAM,IAAI,KAAK,CACb,uEAAuE,OAAO,EAAE,CACjF,CAAC;KACH;IAED,MAAM,EAAE,eAAe,EAAE,GACvB,oBAAoB,CAAC,YAAY,CAC/B,oBAAoB,CAAC,uBAAuB,CAC7C,CAAC;IAEJ,OAAO,IAAI,CAAC,eAAe,CAAC,IAAI,CAC9B,wCAAwC,EACxC,eAAe,CAChB,CAAC;AACJ,CAAC;AAGH,eAAe,uBAAuB,CAAC","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { toChecksumHexAddress, toHex } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n  PreferencesState,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport type BN from 'bn.js';\nimport type { Patch } from 'immer';\nimport { isEqual } from 'lodash';\n\nimport type { MulticallResult } from './multicall';\nimport { multicallOrFallback } from './multicall';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerState,\n  TokensControllerStateChangeEvent,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  tokenBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property messenger - A controller messenger.\n * @property state - Initial state for the controller.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * A mapping from account address to chain id to token address to balance.\n */\ntype TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;\n\n/**\n * Token balances controller state\n * @property tokenBalances - A mapping from account address to chain id to token address to balance.\n */\nexport type TokenBalancesControllerState = {\n  tokenBalances: TokenBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | TokensControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | AccountsControllerGetSelectedAccountAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | PreferencesControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    tokenBalances: {},\n  };\n}\n\n/** The input to start polling for the {@link TokenBalancesController} */\nexport type TokenBalancesPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends StaticIntervalPollingController<TokenBalancesPollingInput>()<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #queryMultipleAccounts: boolean;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(interval);\n\n    // Set initial preference for querying multiple accounts, and subscribe to changes\n    this.#queryMultipleAccounts = this.#calculateQueryMultipleAccounts(\n      this.messagingSystem.call('PreferencesController:getState'),\n    );\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      this.#onPreferencesStateChange.bind(this),\n    );\n\n    // Set initial tokens, and subscribe to changes\n    ({\n      allTokens: this.#allTokens,\n      allDetectedTokens: this.#allDetectedTokens,\n    } = this.messagingSystem.call('TokensController:getState'));\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      this.#onTokensStateChange.bind(this),\n    );\n\n    // Subscribe to network state changes\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      this.#onNetworkStateChange.bind(this),\n    );\n  }\n\n  /**\n   * Determines whether to query all accounts, or just the selected account.\n   * @param preferences - The preferences state.\n   * @param preferences.isMultiAccountBalancesEnabled - whether to query all accounts (mobile).\n   * @param preferences.useMultiAccountBalanceChecker - whether to query all accounts (extension).\n   * @returns true if all accounts should be queried.\n   */\n  #calculateQueryMultipleAccounts = ({\n    isMultiAccountBalancesEnabled,\n    useMultiAccountBalanceChecker,\n  }: PreferencesState & { useMultiAccountBalanceChecker?: boolean }) => {\n    return Boolean(\n      // Note: These settings have different names on extension vs mobile\n      isMultiAccountBalancesEnabled || useMultiAccountBalanceChecker,\n    );\n  };\n\n  /**\n   * Handles the event for preferences state changes.\n   * @param preferences - The preferences state.\n   */\n  #onPreferencesStateChange = (preferences: PreferencesState) => {\n    // Update the user preference for whether to query multiple accounts.\n    const queryMultipleAccounts =\n      this.#calculateQueryMultipleAccounts(preferences);\n\n    // Refresh when flipped off -> on\n    const refresh = queryMultipleAccounts && !this.#queryMultipleAccounts;\n    this.#queryMultipleAccounts = queryMultipleAccounts;\n\n    if (refresh) {\n      this.updateBalances().catch(console.error);\n    }\n  };\n\n  /**\n   * Handles the event for tokens state changes.\n   * @param state - The token state.\n   * @param state.allTokens - The state for imported tokens across all chains.\n   * @param state.allDetectedTokens - The state for detected tokens across all chains.\n   */\n  #onTokensStateChange = ({\n    allTokens,\n    allDetectedTokens,\n  }: TokensControllerState) => {\n    // Refresh token balances on chains whose tokens have changed.\n    const chainIds = this.#getChainIds(allTokens, allDetectedTokens);\n    const chainIdsToUpdate = chainIds.filter(\n      (chainId) =>\n        !isEqual(this.#allTokens[chainId], allTokens[chainId]) ||\n        !isEqual(this.#allDetectedTokens[chainId], allDetectedTokens[chainId]),\n    );\n\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.updateBalances({ chainIds: chainIdsToUpdate }).catch(console.error);\n  };\n\n  /**\n   * Handles the event for network state changes.\n   * @param _ - The network state.\n   * @param patches - An array of patch operations performed on the network state.\n   */\n  #onNetworkStateChange(_: NetworkState, patches: Patch[]) {\n    // Remove state for deleted networks\n    for (const patch of patches) {\n      if (\n        patch.op === 'remove' &&\n        patch.path[0] === 'networkConfigurationsByChainId'\n      ) {\n        const removedChainId = patch.path[1] as Hex;\n\n        this.update((state) => {\n          for (const accountAddress of Object.keys(state.tokenBalances)) {\n            delete state.tokenBalances[accountAddress as Hex][removedChainId];\n          }\n        });\n      }\n    }\n  }\n\n  /**\n   * Returns an array of chain ids that have tokens.\n   * @param allTokens - The state for imported tokens across all chains.\n   * @param allDetectedTokens - The state for detected tokens across all chains.\n   * @returns An array of chain ids that have tokens.\n   */\n  #getChainIds = (\n    allTokens: TokensControllerState['allTokens'],\n    allDetectedTokens: TokensControllerState['allDetectedTokens'],\n  ) =>\n    [\n      ...new Set([\n        ...Object.keys(allTokens),\n        ...Object.keys(allDetectedTokens),\n      ]),\n    ] as Hex[];\n\n  /**\n   * Polls for erc20 token balances.\n   * @param input - The input for the poll.\n   * @param input.chainId - The chain id to poll token balances on.\n   */\n  async _executePoll({ chainId }: TokenBalancesPollingInput) {\n    await this.updateBalancesByChainId({ chainId });\n  }\n\n  /**\n   * Updates the token balances for the given chain ids.\n   * @param input - The input for the update.\n   * @param input.chainIds - The chain ids to update token balances for.\n   * Or omitted to update all chains that contain tokens.\n   */\n  async updateBalances({ chainIds }: { chainIds?: Hex[] } = {}) {\n    chainIds ??= this.#getChainIds(this.#allTokens, this.#allDetectedTokens);\n\n    await Promise.allSettled(\n      chainIds.map((chainId) => this.updateBalancesByChainId({ chainId })),\n    );\n  }\n\n  /**\n   * Updates token balances for the given chain id.\n   * @param input - The input for the update.\n   * @param input.chainId - The chain id to update token balances on.\n   */\n  async updateBalancesByChainId({ chainId }: { chainId: Hex }) {\n    const { address: selectedAccountAddress } = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const isSelectedAccount = (accountAddress: string) =>\n      toChecksumHexAddress(accountAddress) ===\n      toChecksumHexAddress(selectedAccountAddress);\n\n    const accountTokenPairs: { accountAddress: Hex; tokenAddress: Hex }[] = [];\n\n    const addTokens = ([accountAddress, tokens]: [string, Token[]]) =>\n      this.#queryMultipleAccounts || isSelectedAccount(accountAddress)\n        ? tokens.forEach((t) =>\n            accountTokenPairs.push({\n              accountAddress: accountAddress as Hex,\n              tokenAddress: t.address as Hex,\n            }),\n          )\n        : undefined;\n\n    // Balances will be updated for both imported and detected tokens\n    Object.entries(this.#allTokens[chainId] ?? {}).forEach(addTokens);\n    Object.entries(this.#allDetectedTokens[chainId] ?? {}).forEach(addTokens);\n\n    let results: MulticallResult[] = [];\n\n    if (accountTokenPairs.length > 0) {\n      const provider = new Web3Provider(\n        this.#getNetworkClient(chainId).provider,\n      );\n\n      const calls = accountTokenPairs.map(\n        ({ accountAddress, tokenAddress }) => ({\n          contract: new Contract(tokenAddress, abiERC20, provider),\n          functionSignature: 'balanceOf(address)',\n          arguments: [accountAddress],\n        }),\n      );\n\n      results = await multicallOrFallback(calls, chainId, provider);\n    }\n\n    this.update((state) => {\n      // Reset so that when accounts or tokens are removed,\n      // their balances are removed rather than left stale.\n      for (const accountAddress of Object.keys(state.tokenBalances)) {\n        state.tokenBalances[accountAddress as Hex][chainId] = {};\n      }\n\n      for (let i = 0; i < results.length; i++) {\n        const { success, value } = results[i];\n        const { accountAddress, tokenAddress } = accountTokenPairs[i];\n\n        if (success) {\n          ((state.tokenBalances[accountAddress] ??= {})[chainId] ??= {})[\n            tokenAddress\n          ] = toHex(value as BN);\n        }\n      }\n    });\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenBalancesState();\n    });\n  }\n\n  /**\n   * Returns the network client for a given chain id\n   * @param chainId - The chain id to get the network client for.\n   * @returns The network client for the given chain id.\n   */\n  #getNetworkClient(chainId: Hex) {\n    const { networkConfigurationsByChainId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n\n    const networkConfiguration = networkConfigurationsByChainId[chainId];\n    if (!networkConfiguration) {\n      throw new Error(\n        `TokenBalancesController: No network configuration found for chainId ${chainId}`,\n      );\n    }\n\n    const { networkClientId } =\n      networkConfiguration.rpcEndpoints[\n        networkConfiguration.defaultRpcEndpointIndex\n      ];\n\n    return this.messagingSystem.call(\n      `NetworkController:getNetworkClientById`,\n      networkClientId,\n    );\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
index ab23c95..c6f9cbb 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
@@ -273,9 +273,12 @@ _TokenDetectionController_intervalId = new WeakMap(), _TokenDetectionController_
  * Starts a new polling interval.
  */
 async function _TokenDetectionController_startPolling() {
+  console.log('startPolling ......', !this.isActive);
     if (!this.isActive) {
         return;
     }
+    console.log('startPolling 2 ......');
+
     __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_stopPolling).call(this);
     await this.detectTokens();
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
index a66ad22..36ba967 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
@@ -209,9 +209,13 @@ class TokensController extends base_controller_1.BaseController {
         const releaseLock = await __classPrivateFieldGet(this, _TokensController_mutex, "f").acquire();
         const { allTokens, ignoredTokens, allDetectedTokens } = this.state;
         const importedTokensMap = {};
+        let interactingChainId;
+        if (networkClientId) {
+            interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
+        }
         // Used later to dedupe imported tokens
         const newTokensMap = [
-            ...(allTokens[__classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).address] || []),
+            ...(allTokens[interactingChainId ?? __classPrivateFieldGet(this, _TokensController_chainId, "f")]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAccount).call(this).address] || []),
             ...tokensToImport,
         ].reduce((output, token) => {
             output[token.address] = token;
@@ -235,10 +239,6 @@ class TokensController extends base_controller_1.BaseController {
             });
             const newTokens = Object.values(newTokensMap);
             const newIgnoredTokens = ignoredTokens.filter((tokenAddress) => !newTokensMap[tokenAddress.toLowerCase()]);
-            let interactingChainId;
-            if (networkClientId) {
-                interactingChainId = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId).configuration.chainId;
-            }
             const detectedTokensForGivenChain = interactingChainId
                 ? allDetectedTokens?.[interactingChainId]?.[__classPrivateFieldGet(this, _TokensController_instances, "m", _TokensController_getSelectedAddress).call(this)]
                 : [];
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.cjs b/node_modules/@metamask/assets-controllers/dist/multicall.cjs
new file mode 100644
index 0000000..bf9aa5e
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.cjs
@@ -0,0 +1,350 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.multicallOrFallback = void 0;
+const contracts_1 = require("@ethersproject/contracts");
+const assetsUtil_1 = require("./assetsUtil.cjs");
+// https://github.com/mds1/multicall/blob/main/deployments.json
+const MULTICALL_CONTRACT_BY_CHAINID = {
+    '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x53': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x52': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',
+    '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x405': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x406': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x659': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',
+};
+const multicallAbi = [
+    {
+        name: 'tryAggregate',
+        type: 'function',
+        stateMutability: 'payable',
+        inputs: [
+            { name: 'requireSuccess', type: 'bool' },
+            {
+                name: 'calls',
+                type: 'tuple[]',
+                components: [
+                    { name: 'target', type: 'address' },
+                    { name: 'callData', type: 'bytes' },
+                ],
+            },
+        ],
+        outputs: [
+            {
+                name: 'returnData',
+                type: 'tuple[]',
+                components: [
+                    { name: 'success', type: 'bool' },
+                    { name: 'returnData', type: 'bytes' },
+                ],
+            },
+        ],
+    },
+];
+const multicall = async (calls, multicallAddress, provider, maxCallsPerMulticall) => {
+    const multicallContract = new contracts_1.Contract(multicallAddress, multicallAbi, provider);
+    return await (0, assetsUtil_1.reduceInBatchesSerially)({
+        values: calls,
+        batchSize: maxCallsPerMulticall,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const calldata = batch.map((call) => ({
+                target: call.contract.address,
+                callData: call.contract.interface.encodeFunctionData(call.contract.interface.functions[call.functionSignature], call.arguments),
+            }));
+            const results = await multicallContract.callStatic.tryAggregate(false, calldata);
+            return [
+                ...workingResult,
+                ...results.map((r, i) => ({
+                    success: r.success,
+                    value: r.success
+                        ? batch[i].contract.interface.decodeFunctionResult(batch[i].functionSignature, r.returnData)[0]
+                        : undefined,
+                })),
+            ];
+        },
+    });
+};
+const fallback = async (calls, maxCallsParallel) => {
+    return await (0, assetsUtil_1.reduceInBatchesSerially)({
+        values: calls,
+        batchSize: maxCallsParallel,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const results = await Promise.allSettled(batch.map((call) => call.contract[call.functionSignature](...call.arguments)));
+            return [
+                ...workingResult,
+                ...results.map((p) => ({
+                    success: p.status === 'fulfilled',
+                    value: p.status === 'fulfilled' ? p.value : undefined,
+                })),
+            ];
+        },
+    });
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+const multicallOrFallback = async (calls, chainId, provider, maxCallsPerMulticall = 300, maxCallsParallel = 20) => {
+    if (calls.length === 0) {
+        return [];
+    }
+    const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];
+    return await (multicallAddress
+        ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)
+        : fallback(calls, maxCallsParallel));
+};
+exports.multicallOrFallback = multicallOrFallback;
+//# sourceMappingURL=multicall.cjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map b/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map
new file mode 100644
index 0000000..147eb33
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.cjs","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport type { Hex } from '@metamask/utils';\n\nimport { reduceInBatchesSerially } from './assetsUtil';\n\n// https://github.com/mds1/multicall/blob/main/deployments.json\nconst MULTICALL_CONTRACT_BY_CHAINID = {\n  '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x53': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x52': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',\n  '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x405': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x406': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x659': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',\n} as Record<Hex, Hex>;\n\nconst multicallAbi = [\n  {\n    name: 'tryAggregate',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'requireSuccess', type: 'bool' },\n      {\n        name: 'calls',\n        type: 'tuple[]',\n        components: [\n          { name: 'target', type: 'address' },\n          { name: 'callData', type: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'returnData',\n        type: 'tuple[]',\n        components: [\n          { name: 'success', type: 'bool' },\n          { name: 'returnData', type: 'bytes' },\n        ],\n      },\n    ],\n  },\n];\n\ntype Call = {\n  contract: Contract;\n  functionSignature: string;\n  arguments: unknown[];\n};\n\nexport type MulticallResult = { success: boolean; value: unknown };\n\nconst multicall = async (\n  calls: Call[],\n  multicallAddress: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall: number,\n): Promise<MulticallResult[]> => {\n  const multicallContract = new Contract(\n    multicallAddress,\n    multicallAbi,\n    provider,\n  );\n\n  return await reduceInBatchesSerially<Call, MulticallResult[]>({\n    values: calls,\n    batchSize: maxCallsPerMulticall,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const calldata = batch.map((call) => ({\n        target: call.contract.address,\n        callData: call.contract.interface.encodeFunctionData(\n          call.contract.interface.functions[call.functionSignature],\n          call.arguments,\n        ),\n      }));\n\n      const results = await multicallContract.callStatic.tryAggregate(\n        false,\n        calldata,\n      );\n\n      return [\n        ...workingResult,\n        ...results.map(\n          (r: { success: boolean; returnData: string }, i: number) => ({\n            success: r.success,\n            value: r.success\n              ? batch[i].contract.interface.decodeFunctionResult(\n                  batch[i].functionSignature,\n                  r.returnData,\n                )[0]\n              : undefined,\n          }),\n        ),\n      ];\n    },\n  });\n};\n\nconst fallback = async (\n  calls: Call[],\n  maxCallsParallel: number,\n): Promise<MulticallResult[]> => {\n  return await reduceInBatchesSerially<Call, MulticallResult[]>({\n    values: calls,\n    batchSize: maxCallsParallel,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const results = await Promise.allSettled(\n        batch.map((call) =>\n          call.contract[call.functionSignature](...call.arguments),\n        ),\n      );\n      return [\n        ...workingResult,\n        ...results.map((p) => ({\n          success: p.status === 'fulfilled',\n          value: p.status === 'fulfilled' ? p.value : undefined,\n        })),\n      ];\n    },\n  });\n};\n\n/**\n * Executes an array of contract calls. If the chain supports multicalls,\n * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).\n * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).\n * @param calls - An array of contract calls to execute.\n * @param chainId - The hexadecimal chain id.\n * @param provider - An ethers rpc provider.\n * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.\n * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.\n * @returns An array of results, with a success boolean and value for each call.\n */\nexport const multicallOrFallback = async (\n  calls: Call[],\n  chainId: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall = 300,\n  maxCallsParallel = 20,\n): Promise<MulticallResult[]> => {\n  if (calls.length === 0) {\n    return [];\n  }\n\n  const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];\n  return await (multicallAddress\n    ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)\n    : fallback(calls, maxCallsParallel));\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.cts b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts
new file mode 100644
index 0000000..530da8d
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts
@@ -0,0 +1,26 @@
+import { Contract } from "@ethersproject/contracts";
+import type { Web3Provider } from "@ethersproject/providers";
+import type { Hex } from "@metamask/utils";
+type Call = {
+    contract: Contract;
+    functionSignature: string;
+    arguments: unknown[];
+};
+export type MulticallResult = {
+    success: boolean;
+    value: unknown;
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export declare const multicallOrFallback: (calls: Call[], chainId: Hex, provider: Web3Provider, maxCallsPerMulticall?: number, maxCallsParallel?: number) => Promise<MulticallResult[]>;
+export {};
+//# sourceMappingURL=multicall.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map
new file mode 100644
index 0000000..4664714
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.d.cts","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,KAAK,EAAE,YAAY,EAAE,iCAAiC;AAC7D,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAgS3C,KAAK,IAAI,GAAG;IACV,QAAQ,EAAE,QAAQ,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,SAAS,EAAE,OAAO,EAAE,CAAC;CACtB,CAAC;AAEF,MAAM,MAAM,eAAe,GAAG;IAAE,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,EAAE,OAAO,CAAA;CAAE,CAAC;AA2EnE;;;;;;;;;;GAUG;AACH,eAAO,MAAM,mBAAmB,UACvB,IAAI,EAAE,WACJ,GAAG,YACF,YAAY,+DAGrB,QAAQ,eAAe,EAAE,CAS3B,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.mts b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts
new file mode 100644
index 0000000..7a7c199
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts
@@ -0,0 +1,26 @@
+import { Contract } from "@ethersproject/contracts";
+import type { Web3Provider } from "@ethersproject/providers";
+import type { Hex } from "@metamask/utils";
+type Call = {
+    contract: Contract;
+    functionSignature: string;
+    arguments: unknown[];
+};
+export type MulticallResult = {
+    success: boolean;
+    value: unknown;
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export declare const multicallOrFallback: (calls: Call[], chainId: Hex, provider: Web3Provider, maxCallsPerMulticall?: number, maxCallsParallel?: number) => Promise<MulticallResult[]>;
+export {};
+//# sourceMappingURL=multicall.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map
new file mode 100644
index 0000000..73e9b1b
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.d.mts","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,KAAK,EAAE,YAAY,EAAE,iCAAiC;AAC7D,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAgS3C,KAAK,IAAI,GAAG;IACV,QAAQ,EAAE,QAAQ,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,SAAS,EAAE,OAAO,EAAE,CAAC;CACtB,CAAC;AAEF,MAAM,MAAM,eAAe,GAAG;IAAE,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,EAAE,OAAO,CAAA;CAAE,CAAC;AA2EnE;;;;;;;;;;GAUG;AACH,eAAO,MAAM,mBAAmB,UACvB,IAAI,EAAE,WACJ,GAAG,YACF,YAAY,+DAGrB,QAAQ,eAAe,EAAE,CAS3B,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.mjs b/node_modules/@metamask/assets-controllers/dist/multicall.mjs
new file mode 100644
index 0000000..8fbe011
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.mjs
@@ -0,0 +1,346 @@
+import { Contract } from "@ethersproject/contracts";
+import { reduceInBatchesSerially } from "./assetsUtil.mjs";
+// https://github.com/mds1/multicall/blob/main/deployments.json
+const MULTICALL_CONTRACT_BY_CHAINID = {
+    '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x53': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x52': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',
+    '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x405': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x406': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x659': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',
+};
+const multicallAbi = [
+    {
+        name: 'tryAggregate',
+        type: 'function',
+        stateMutability: 'payable',
+        inputs: [
+            { name: 'requireSuccess', type: 'bool' },
+            {
+                name: 'calls',
+                type: 'tuple[]',
+                components: [
+                    { name: 'target', type: 'address' },
+                    { name: 'callData', type: 'bytes' },
+                ],
+            },
+        ],
+        outputs: [
+            {
+                name: 'returnData',
+                type: 'tuple[]',
+                components: [
+                    { name: 'success', type: 'bool' },
+                    { name: 'returnData', type: 'bytes' },
+                ],
+            },
+        ],
+    },
+];
+const multicall = async (calls, multicallAddress, provider, maxCallsPerMulticall) => {
+    const multicallContract = new Contract(multicallAddress, multicallAbi, provider);
+    return await reduceInBatchesSerially({
+        values: calls,
+        batchSize: maxCallsPerMulticall,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const calldata = batch.map((call) => ({
+                target: call.contract.address,
+                callData: call.contract.interface.encodeFunctionData(call.contract.interface.functions[call.functionSignature], call.arguments),
+            }));
+            const results = await multicallContract.callStatic.tryAggregate(false, calldata);
+            return [
+                ...workingResult,
+                ...results.map((r, i) => ({
+                    success: r.success,
+                    value: r.success
+                        ? batch[i].contract.interface.decodeFunctionResult(batch[i].functionSignature, r.returnData)[0]
+                        : undefined,
+                })),
+            ];
+        },
+    });
+};
+const fallback = async (calls, maxCallsParallel) => {
+    return await reduceInBatchesSerially({
+        values: calls,
+        batchSize: maxCallsParallel,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const results = await Promise.allSettled(batch.map((call) => call.contract[call.functionSignature](...call.arguments)));
+            return [
+                ...workingResult,
+                ...results.map((p) => ({
+                    success: p.status === 'fulfilled',
+                    value: p.status === 'fulfilled' ? p.value : undefined,
+                })),
+            ];
+        },
+    });
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export const multicallOrFallback = async (calls, chainId, provider, maxCallsPerMulticall = 300, maxCallsParallel = 20) => {
+    if (calls.length === 0) {
+        return [];
+    }
+    const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];
+    return await (multicallAddress
+        ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)
+        : fallback(calls, maxCallsParallel));
+};
+//# sourceMappingURL=multicall.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map b/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map
new file mode 100644
index 0000000..568f618
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.mjs","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport type { Hex } from '@metamask/utils';\n\nimport { reduceInBatchesSerially } from './assetsUtil';\n\n// https://github.com/mds1/multicall/blob/main/deployments.json\nconst MULTICALL_CONTRACT_BY_CHAINID = {\n  '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x53': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x52': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',\n  '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x405': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x406': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x659': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',\n} as Record<Hex, Hex>;\n\nconst multicallAbi = [\n  {\n    name: 'tryAggregate',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'requireSuccess', type: 'bool' },\n      {\n        name: 'calls',\n        type: 'tuple[]',\n        components: [\n          { name: 'target', type: 'address' },\n          { name: 'callData', type: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'returnData',\n        type: 'tuple[]',\n        components: [\n          { name: 'success', type: 'bool' },\n          { name: 'returnData', type: 'bytes' },\n        ],\n      },\n    ],\n  },\n];\n\ntype Call = {\n  contract: Contract;\n  functionSignature: string;\n  arguments: unknown[];\n};\n\nexport type MulticallResult = { success: boolean; value: unknown };\n\nconst multicall = async (\n  calls: Call[],\n  multicallAddress: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall: number,\n): Promise<MulticallResult[]> => {\n  const multicallContract = new Contract(\n    multicallAddress,\n    multicallAbi,\n    provider,\n  );\n\n  return await reduceInBatchesSerially<Call, MulticallResult[]>({\n    values: calls,\n    batchSize: maxCallsPerMulticall,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const calldata = batch.map((call) => ({\n        target: call.contract.address,\n        callData: call.contract.interface.encodeFunctionData(\n          call.contract.interface.functions[call.functionSignature],\n          call.arguments,\n        ),\n      }));\n\n      const results = await multicallContract.callStatic.tryAggregate(\n        false,\n        calldata,\n      );\n\n      return [\n        ...workingResult,\n        ...results.map(\n          (r: { success: boolean; returnData: string }, i: number) => ({\n            success: r.success,\n            value: r.success\n              ? batch[i].contract.interface.decodeFunctionResult(\n                  batch[i].functionSignature,\n                  r.returnData,\n                )[0]\n              : undefined,\n          }),\n        ),\n      ];\n    },\n  });\n};\n\nconst fallback = async (\n  calls: Call[],\n  maxCallsParallel: number,\n): Promise<MulticallResult[]> => {\n  return await reduceInBatchesSerially<Call, MulticallResult[]>({\n    values: calls,\n    batchSize: maxCallsParallel,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const results = await Promise.allSettled(\n        batch.map((call) =>\n          call.contract[call.functionSignature](...call.arguments),\n        ),\n      );\n      return [\n        ...workingResult,\n        ...results.map((p) => ({\n          success: p.status === 'fulfilled',\n          value: p.status === 'fulfilled' ? p.value : undefined,\n        })),\n      ];\n    },\n  });\n};\n\n/**\n * Executes an array of contract calls. If the chain supports multicalls,\n * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).\n * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).\n * @param calls - An array of contract calls to execute.\n * @param chainId - The hexadecimal chain id.\n * @param provider - An ethers rpc provider.\n * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.\n * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.\n * @returns An array of results, with a success boolean and value for each call.\n */\nexport const multicallOrFallback = async (\n  calls: Call[],\n  chainId: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall = 300,\n  maxCallsParallel = 20,\n): Promise<MulticallResult[]> => {\n  if (calls.length === 0) {\n    return [];\n  }\n\n  const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];\n  return await (multicallAddress\n    ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)\n    : fallback(calls, maxCallsParallel));\n};\n"]}
\ No newline at end of file
