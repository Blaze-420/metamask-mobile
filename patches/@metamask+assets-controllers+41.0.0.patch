diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.cjs b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.cjs
index aac84e5..983c3f1 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.cjs
@@ -1,19 +1,19 @@
 "use strict";
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
 var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
     if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _AccountTrackerController_instances, _AccountTrackerController_refreshMutex, _AccountTrackerController_handle, _AccountTrackerController_getCurrentChainId, _AccountTrackerController_getCorrectNetworkClient, _AccountTrackerController_getBalanceFromChain;
+var _AccountTrackerController_instances, _AccountTrackerController_refreshMutex, _AccountTrackerController_includeStakedAssets, _AccountTrackerController_getStakedBalanceForChain, _AccountTrackerController_handle, _AccountTrackerController_getCurrentChainId, _AccountTrackerController_getCorrectNetworkClient, _AccountTrackerController_getBalanceFromChain;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.AccountTrackerController = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
@@ -47,8 +47,10 @@ class AccountTrackerController extends (0, polling_controller_1.StaticIntervalPo
      * @param options.interval - Polling interval used to fetch new account balances.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller messaging system.
+     * @param options.getStakedBalanceForChain - The function to get the staked native asset balance for a chain.
+     * @param options.includeStakedAssets - Whether to include staked assets in the account balances.
      */
-    constructor({ interval = 10000, state, messenger, }) {
+    constructor({ interval = 10000, state, messenger, getStakedBalanceForChain, includeStakedAssets = false, }) {
         const { selectedNetworkClientId } = messenger.call('NetworkController:getState');
         const { configuration: { chainId }, } = messenger.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
         super({
@@ -65,7 +67,11 @@ class AccountTrackerController extends (0, polling_controller_1.StaticIntervalPo
         });
         _AccountTrackerController_instances.add(this);
         _AccountTrackerController_refreshMutex.set(this, new async_mutex_1.Mutex());
+        _AccountTrackerController_includeStakedAssets.set(this, void 0);
+        _AccountTrackerController_getStakedBalanceForChain.set(this, void 0);
         _AccountTrackerController_handle.set(this, void 0);
+        __classPrivateFieldSet(this, _AccountTrackerController_getStakedBalanceForChain, getStakedBalanceForChain, "f");
+        __classPrivateFieldSet(this, _AccountTrackerController_includeStakedAssets, includeStakedAssets, "f");
         this.setIntervalLength(interval);
         // TODO: Either fix this lint violation or explain why it's necessary to ignore.
         // eslint-disable-next-line @typescript-eslint/no-floating-promises
@@ -171,6 +177,15 @@ class AccountTrackerController extends (0, polling_controller_1.StaticIntervalPo
                         balance,
                     };
                 }
+                if (__classPrivateFieldGet(this, _AccountTrackerController_includeStakedAssets, "f")) {
+                    const stakedBalance = await __classPrivateFieldGet(this, _AccountTrackerController_getStakedBalanceForChain, "f").call(this, address, networkClientId);
+                    if (stakedBalance) {
+                        accountsForChain[address] = {
+                            ...accountsForChain[address],
+                            stakedBalance,
+                        };
+                    }
+                }
             }
             this.update((state) => {
                 if (chainId === __classPrivateFieldGet(this, _AccountTrackerController_instances, "m", _AccountTrackerController_getCurrentChainId).call(this)) {
@@ -196,18 +211,23 @@ class AccountTrackerController extends (0, polling_controller_1.StaticIntervalPo
             return (0, controller_utils_1.safelyExecuteWithTimeout)(async () => {
                 (0, utils_1.assert)(ethQuery, 'Provider not set.');
                 const balance = await (0, controller_utils_1.query)(ethQuery, 'getBalance', [address]);
-                return [address, balance];
+                let stakedBalance;
+                if (__classPrivateFieldGet(this, _AccountTrackerController_includeStakedAssets, "f")) {
+                    stakedBalance = await __classPrivateFieldGet(this, _AccountTrackerController_getStakedBalanceForChain, "f").call(this, address, networkClientId);
+                }
+                return [address, balance, stakedBalance];
             });
         })).then((value) => {
             return value.reduce((obj, item) => {
                 if (!item) {
                     return obj;
                 }
-                const [address, balance] = item;
+                const [address, balance, stakedBalance] = item;
                 return {
                     ...obj,
                     [address]: {
                         balance,
+                        stakedBalance,
                     },
                 };
             }, {});
@@ -215,7 +235,7 @@ class AccountTrackerController extends (0, polling_controller_1.StaticIntervalPo
     }
 }
 exports.AccountTrackerController = AccountTrackerController;
-_AccountTrackerController_refreshMutex = new WeakMap(), _AccountTrackerController_handle = new WeakMap(), _AccountTrackerController_instances = new WeakSet(), _AccountTrackerController_getCurrentChainId = function _AccountTrackerController_getCurrentChainId() {
+_AccountTrackerController_refreshMutex = new WeakMap(), _AccountTrackerController_includeStakedAssets = new WeakMap(), _AccountTrackerController_getStakedBalanceForChain = new WeakMap(), _AccountTrackerController_handle = new WeakMap(), _AccountTrackerController_instances = new WeakSet(), _AccountTrackerController_getCurrentChainId = function _AccountTrackerController_getCurrentChainId() {
     const { selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     return chainId;
diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.cts b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.cts
index 144e018..6b7d8cd 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.cts
@@ -2,6 +2,7 @@ import type { AccountsControllerSelectedEvmAccountChangeEvent, AccountsControlle
 import type { ControllerStateChangeEvent, ControllerGetStateAction, RestrictedControllerMessenger } from "@metamask/base-controller";
 import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction } from "@metamask/network-controller";
 import type { PreferencesControllerGetStateAction } from "@metamask/preferences-controller";
+import type { AssetsContractController, StakedBalance } from "./AssetsContractController.cjs";
 /**
  * The name of the {@link AccountTrackerController}.
  */
@@ -10,10 +11,12 @@ declare const controllerName = "AccountTrackerController";
  * @type AccountInformation
  *
  * Account information object
- * @property balance - Hex string of an account balancec in wei
+ * @property balance - Hex string of an account balance in wei
+ * @property stakedBalance - Hex string of an account staked balance in wei
  */
 export type AccountInformation = {
     balance: string;
+    stakedBalance?: string;
 };
 /**
  * @type AccountTrackerControllerState
@@ -62,18 +65,15 @@ type AccountTrackerPollingInput = {
     networkClientId: NetworkClientId;
 };
 declare const AccountTrackerController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#784968@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#784968@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: AccountTrackerPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: AccountTrackerPollingInput) => void>>;
+    readonly "__#784960@#pollingTokenSets": Map<string, Set<string>>;
+    "__#784960@#callbacks": Map<string, Set<(input: AccountTrackerPollingInput) => void>>;
     _executePoll(input: AccountTrackerPollingInput): Promise<void>;
-    /**
-     * The action that can be performed to get the state of the {@link AccountTrackerController}.
-     */
     startPolling(input: AccountTrackerPollingInput): string;
     stopAllPolling(): void;
     stopPollingByPollingToken(pollingToken: string): void;
@@ -91,11 +91,15 @@ export declare class AccountTrackerController extends AccountTrackerController_b
      * @param options.interval - Polling interval used to fetch new account balances.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller messaging system.
+     * @param options.getStakedBalanceForChain - The function to get the staked native asset balance for a chain.
+     * @param options.includeStakedAssets - Whether to include staked assets in the account balances.
      */
-    constructor({ interval, state, messenger, }: {
+    constructor({ interval, state, messenger, getStakedBalanceForChain, includeStakedAssets, }: {
         interval?: number;
         state?: Partial<AccountTrackerControllerState>;
         messenger: AccountTrackerControllerMessenger;
+        getStakedBalanceForChain: AssetsContractController['getStakedBalanceForChain'];
+        includeStakedAssets?: boolean;
     });
     private syncAccounts;
     /**
@@ -128,6 +132,7 @@ export declare class AccountTrackerController extends AccountTrackerController_b
      */
     syncBalanceWithAddresses(addresses: string[], networkClientId?: NetworkClientId): Promise<Record<string, {
         balance: string;
+        stakedBalance?: StakedBalance;
     }>>;
 }
 export default AccountTrackerController;
diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.mts b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.mts
index b25212c..20d566f 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.d.mts
@@ -2,6 +2,7 @@ import type { AccountsControllerSelectedEvmAccountChangeEvent, AccountsControlle
 import type { ControllerStateChangeEvent, ControllerGetStateAction, RestrictedControllerMessenger } from "@metamask/base-controller";
 import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction } from "@metamask/network-controller";
 import type { PreferencesControllerGetStateAction } from "@metamask/preferences-controller";
+import type { AssetsContractController, StakedBalance } from "./AssetsContractController.mjs";
 /**
  * The name of the {@link AccountTrackerController}.
  */
@@ -10,10 +11,12 @@ declare const controllerName = "AccountTrackerController";
  * @type AccountInformation
  *
  * Account information object
- * @property balance - Hex string of an account balancec in wei
+ * @property balance - Hex string of an account balance in wei
+ * @property stakedBalance - Hex string of an account staked balance in wei
  */
 export type AccountInformation = {
     balance: string;
+    stakedBalance?: string;
 };
 /**
  * @type AccountTrackerControllerState
@@ -62,18 +65,15 @@ type AccountTrackerPollingInput = {
     networkClientId: NetworkClientId;
 };
 declare const AccountTrackerController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#784968@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#784968@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: AccountTrackerPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: AccountTrackerPollingInput) => void>>;
+    readonly "__#784960@#pollingTokenSets": Map<string, Set<string>>;
+    "__#784960@#callbacks": Map<string, Set<(input: AccountTrackerPollingInput) => void>>;
     _executePoll(input: AccountTrackerPollingInput): Promise<void>;
-    /**
-     * The action that can be performed to get the state of the {@link AccountTrackerController}.
-     */
     startPolling(input: AccountTrackerPollingInput): string;
     stopAllPolling(): void;
     stopPollingByPollingToken(pollingToken: string): void;
@@ -91,11 +91,15 @@ export declare class AccountTrackerController extends AccountTrackerController_b
      * @param options.interval - Polling interval used to fetch new account balances.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller messaging system.
+     * @param options.getStakedBalanceForChain - The function to get the staked native asset balance for a chain.
+     * @param options.includeStakedAssets - Whether to include staked assets in the account balances.
      */
-    constructor({ interval, state, messenger, }: {
+    constructor({ interval, state, messenger, getStakedBalanceForChain, includeStakedAssets, }: {
         interval?: number;
         state?: Partial<AccountTrackerControllerState>;
         messenger: AccountTrackerControllerMessenger;
+        getStakedBalanceForChain: AssetsContractController['getStakedBalanceForChain'];
+        includeStakedAssets?: boolean;
     });
     private syncAccounts;
     /**
@@ -128,6 +132,7 @@ export declare class AccountTrackerController extends AccountTrackerController_b
      */
     syncBalanceWithAddresses(addresses: string[], networkClientId?: NetworkClientId): Promise<Record<string, {
         balance: string;
+        stakedBalance?: StakedBalance;
     }>>;
 }
 export default AccountTrackerController;
diff --git a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
index 4c4bf70..48cb006 100644
--- a/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/AccountTrackerController.mjs
@@ -1,15 +1,15 @@
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
 var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
     if (kind === "m") throw new TypeError("Private method is not writable");
     if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
     return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
 };
-var _AccountTrackerController_instances, _AccountTrackerController_refreshMutex, _AccountTrackerController_handle, _AccountTrackerController_getCurrentChainId, _AccountTrackerController_getCorrectNetworkClient, _AccountTrackerController_getBalanceFromChain;
+var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
+    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
+    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
+    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
+};
+var _AccountTrackerController_instances, _AccountTrackerController_refreshMutex, _AccountTrackerController_includeStakedAssets, _AccountTrackerController_getStakedBalanceForChain, _AccountTrackerController_handle, _AccountTrackerController_getCurrentChainId, _AccountTrackerController_getCorrectNetworkClient, _AccountTrackerController_getBalanceFromChain;
 function $importDefault(module) {
     if (module?.__esModule) {
         return module.default;
@@ -49,8 +49,10 @@ export class AccountTrackerController extends StaticIntervalPollingController()
      * @param options.interval - Polling interval used to fetch new account balances.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller messaging system.
+     * @param options.getStakedBalanceForChain - The function to get the staked native asset balance for a chain.
+     * @param options.includeStakedAssets - Whether to include staked assets in the account balances.
      */
-    constructor({ interval = 10000, state, messenger, }) {
+    constructor({ interval = 10000, state, messenger, getStakedBalanceForChain, includeStakedAssets = false, }) {
         const { selectedNetworkClientId } = messenger.call('NetworkController:getState');
         const { configuration: { chainId }, } = messenger.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
         super({
@@ -67,7 +69,11 @@ export class AccountTrackerController extends StaticIntervalPollingController()
         });
         _AccountTrackerController_instances.add(this);
         _AccountTrackerController_refreshMutex.set(this, new Mutex());
+        _AccountTrackerController_includeStakedAssets.set(this, void 0);
+        _AccountTrackerController_getStakedBalanceForChain.set(this, void 0);
         _AccountTrackerController_handle.set(this, void 0);
+        __classPrivateFieldSet(this, _AccountTrackerController_getStakedBalanceForChain, getStakedBalanceForChain, "f");
+        __classPrivateFieldSet(this, _AccountTrackerController_includeStakedAssets, includeStakedAssets, "f");
         this.setIntervalLength(interval);
         // TODO: Either fix this lint violation or explain why it's necessary to ignore.
         // eslint-disable-next-line @typescript-eslint/no-floating-promises
@@ -173,6 +179,15 @@ export class AccountTrackerController extends StaticIntervalPollingController()
                         balance,
                     };
                 }
+                if (__classPrivateFieldGet(this, _AccountTrackerController_includeStakedAssets, "f")) {
+                    const stakedBalance = await __classPrivateFieldGet(this, _AccountTrackerController_getStakedBalanceForChain, "f").call(this, address, networkClientId);
+                    if (stakedBalance) {
+                        accountsForChain[address] = {
+                            ...accountsForChain[address],
+                            stakedBalance,
+                        };
+                    }
+                }
             }
             this.update((state) => {
                 if (chainId === __classPrivateFieldGet(this, _AccountTrackerController_instances, "m", _AccountTrackerController_getCurrentChainId).call(this)) {
@@ -198,25 +213,30 @@ export class AccountTrackerController extends StaticIntervalPollingController()
             return safelyExecuteWithTimeout(async () => {
                 assert(ethQuery, 'Provider not set.');
                 const balance = await query(ethQuery, 'getBalance', [address]);
-                return [address, balance];
+                let stakedBalance;
+                if (__classPrivateFieldGet(this, _AccountTrackerController_includeStakedAssets, "f")) {
+                    stakedBalance = await __classPrivateFieldGet(this, _AccountTrackerController_getStakedBalanceForChain, "f").call(this, address, networkClientId);
+                }
+                return [address, balance, stakedBalance];
             });
         })).then((value) => {
             return value.reduce((obj, item) => {
                 if (!item) {
                     return obj;
                 }
-                const [address, balance] = item;
+                const [address, balance, stakedBalance] = item;
                 return {
                     ...obj,
                     [address]: {
                         balance,
+                        stakedBalance,
                     },
                 };
             }, {});
         });
     }
 }
-_AccountTrackerController_refreshMutex = new WeakMap(), _AccountTrackerController_handle = new WeakMap(), _AccountTrackerController_instances = new WeakSet(), _AccountTrackerController_getCurrentChainId = function _AccountTrackerController_getCurrentChainId() {
+_AccountTrackerController_refreshMutex = new WeakMap(), _AccountTrackerController_includeStakedAssets = new WeakMap(), _AccountTrackerController_getStakedBalanceForChain = new WeakMap(), _AccountTrackerController_handle = new WeakMap(), _AccountTrackerController_instances = new WeakSet(), _AccountTrackerController_getCurrentChainId = function _AccountTrackerController_getCurrentChainId() {
     const { selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     return chainId;
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.cjs b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.cjs
index a8ba346..6b39491 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.cjs
@@ -15,7 +15,9 @@ var __importDefault = (this && this.__importDefault) || function (mod) {
 };
 var _AssetsContractController_instances, _AssetsContractController_provider, _AssetsContractController_ipfsGateway, _AssetsContractController_chainId, _AssetsContractController_registerActionHandlers, _AssetsContractController_registerEventSubscriptions, _AssetsContractController_getCorrectProvider, _AssetsContractController_getCorrectChainId;
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.AssetsContractController = exports.MISSING_PROVIDER_ERROR = exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = void 0;
+exports.AssetsContractController = exports.MISSING_PROVIDER_ERROR = exports.STAKING_CONTRACT_ADDRESS_BY_CHAINID = exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = void 0;
+// import { BigNumber } from '@ethersproject/bignumber';
+const bignumber_1 = require("@ethersproject/bignumber");
 const contracts_1 = require("@ethersproject/contracts");
 const providers_1 = require("@ethersproject/providers");
 const controller_utils_1 = require("@metamask/controller-utils");
@@ -51,6 +53,10 @@ exports.SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = {
     [assetsUtil_1.SupportedTokenDetectionNetworks.moonbeam]: '0x6aa75276052d96696134252587894ef5ffa520af',
     [assetsUtil_1.SupportedTokenDetectionNetworks.moonriver]: '0x6aa75276052d96696134252587894ef5ffa520af',
 };
+exports.STAKING_CONTRACT_ADDRESS_BY_CHAINID = {
+    [assetsUtil_1.SupportedStakedBalanceNetworks.mainnet]: '0x4fef9d741011476750a243ac70b9789a63dd47df',
+    [assetsUtil_1.SupportedStakedBalanceNetworks.holesky]: '0x37bf0883c27365cffcd0c4202918df930989891f',
+};
 exports.MISSING_PROVIDER_ERROR = 'AssetsContractController failed to set the provider correctly. A provider must be set for this method to be available';
 /**
  * The name of the {@link AssetsContractController}
@@ -333,6 +339,60 @@ class AssetsContractController {
         }
         return nonZeroBalances;
     }
+    /**
+     * Get the staked ethereum balance for an address in a single call.
+     *
+     * @param address - The address to check staked ethereum balance for.
+     * @param networkClientId - Network Client ID to fetch the provider with.
+     * @returns The hex staked ethereum balance for address.
+     */
+    async getStakedBalanceForChain(address, networkClientId) {
+        const chainId = __classPrivateFieldGet(this, _AssetsContractController_instances, "m", _AssetsContractController_getCorrectChainId).call(this, networkClientId);
+        const provider = __classPrivateFieldGet(this, _AssetsContractController_instances, "m", _AssetsContractController_getCorrectProvider).call(this, networkClientId);
+        // balance defaults to zero
+        let balance = bignumber_1.BigNumber.from(0);
+        // Only fetch staked balance on supported networks
+        if (![
+            assetsUtil_1.SupportedStakedBalanceNetworks.mainnet,
+            assetsUtil_1.SupportedStakedBalanceNetworks.holesky,
+        ].includes(chainId)) {
+            return undefined;
+        }
+        // Only fetch staked balance if contract address exists
+        if (!((id) => id in exports.STAKING_CONTRACT_ADDRESS_BY_CHAINID)(chainId)) {
+            return undefined;
+        }
+        const contractAddress = exports.STAKING_CONTRACT_ADDRESS_BY_CHAINID[chainId];
+        const abi = [
+            {
+                inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
+                name: 'getShares',
+                outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
+                stateMutability: 'view',
+                type: 'function',
+            },
+            {
+                inputs: [{ internalType: 'uint256', name: 'shares', type: 'uint256' }],
+                name: 'convertToAssets',
+                outputs: [{ internalType: 'uint256', name: 'assets', type: 'uint256' }],
+                stateMutability: 'view',
+                type: 'function',
+            },
+        ];
+        try {
+            const contract = new contracts_1.Contract(contractAddress, abi, provider);
+            const userShares = await contract.getShares(address);
+            // convert shares to assets only if address shares > 0 else return default balance
+            if (!userShares.lte(0)) {
+                balance = await contract.convertToAssets(userShares.toString());
+            }
+        }
+        catch (error) {
+            // if we get an error, log and return the default value
+            console.error(error);
+        }
+        return balance.toHexString();
+    }
 }
 exports.AssetsContractController = AssetsContractController;
 _AssetsContractController_provider = new WeakMap(), _AssetsContractController_ipfsGateway = new WeakMap(), _AssetsContractController_chainId = new WeakMap(), _AssetsContractController_instances = new WeakSet(), _AssetsContractController_registerActionHandlers = function _AssetsContractController_registerActionHandlers() {
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.cts b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.cts
index d7d9b61..b7bf69d 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.cts
@@ -32,6 +32,10 @@ export declare const SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID: {
     readonly "0x504": "0x6aa75276052d96696134252587894ef5ffa520af";
     readonly "0x505": "0x6aa75276052d96696134252587894ef5ffa520af";
 };
+export declare const STAKING_CONTRACT_ADDRESS_BY_CHAINID: {
+    readonly "0x1": "0x4fef9d741011476750a243ac70b9789a63dd47df";
+    readonly "0x4268": "0x37bf0883c27365cffcd0c4202918df930989891f";
+};
 export declare const MISSING_PROVIDER_ERROR = "AssetsContractController failed to set the provider correctly. A provider must be set for this method to be available";
 /**
  * @type BalanceMap
@@ -98,6 +102,7 @@ export type AllowedEvents = PreferencesControllerStateChangeEvent | NetworkContr
  * The messenger of the {@link AssetsContractController}.
  */
 export type AssetsContractControllerMessenger = RestrictedControllerMessenger<typeof name, AssetsContractControllerActions | AllowedActions, AssetsContractControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
+export type StakedBalance = string | undefined;
 /**
  * Controller that interacts with contracts on mainnet through web3
  */
@@ -272,6 +277,14 @@ export declare class AssetsContractController {
      * @returns The list of non-zero token balances.
      */
     getBalancesInSingleCall(selectedAddress: string, tokensToDetect: string[], networkClientId?: NetworkClientId): Promise<BalanceMap>;
+    /**
+     * Get the staked ethereum balance for an address in a single call.
+     *
+     * @param address - The address to check staked ethereum balance for.
+     * @param networkClientId - Network Client ID to fetch the provider with.
+     * @returns The hex staked ethereum balance for address.
+     */
+    getStakedBalanceForChain(address: string, networkClientId?: NetworkClientId): Promise<StakedBalance>;
 }
 export default AssetsContractController;
 //# sourceMappingURL=AssetsContractController.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.mts b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.mts
index a7916fb..9cbee8c 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.d.mts
@@ -32,6 +32,10 @@ export declare const SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID: {
     readonly "0x504": "0x6aa75276052d96696134252587894ef5ffa520af";
     readonly "0x505": "0x6aa75276052d96696134252587894ef5ffa520af";
 };
+export declare const STAKING_CONTRACT_ADDRESS_BY_CHAINID: {
+    readonly "0x1": "0x4fef9d741011476750a243ac70b9789a63dd47df";
+    readonly "0x4268": "0x37bf0883c27365cffcd0c4202918df930989891f";
+};
 export declare const MISSING_PROVIDER_ERROR = "AssetsContractController failed to set the provider correctly. A provider must be set for this method to be available";
 /**
  * @type BalanceMap
@@ -98,6 +102,7 @@ export type AllowedEvents = PreferencesControllerStateChangeEvent | NetworkContr
  * The messenger of the {@link AssetsContractController}.
  */
 export type AssetsContractControllerMessenger = RestrictedControllerMessenger<typeof name, AssetsContractControllerActions | AllowedActions, AssetsContractControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
+export type StakedBalance = string | undefined;
 /**
  * Controller that interacts with contracts on mainnet through web3
  */
@@ -272,6 +277,14 @@ export declare class AssetsContractController {
      * @returns The list of non-zero token balances.
      */
     getBalancesInSingleCall(selectedAddress: string, tokensToDetect: string[], networkClientId?: NetworkClientId): Promise<BalanceMap>;
+    /**
+     * Get the staked ethereum balance for an address in a single call.
+     *
+     * @param address - The address to check staked ethereum balance for.
+     * @param networkClientId - Network Client ID to fetch the provider with.
+     * @returns The hex staked ethereum balance for address.
+     */
+    getStakedBalanceForChain(address: string, networkClientId?: NetworkClientId): Promise<StakedBalance>;
 }
 export default AssetsContractController;
 //# sourceMappingURL=AssetsContractController.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
index 15a0e56..deeb1eb 100644
--- a/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/AssetsContractController.mjs
@@ -16,13 +16,15 @@ function $importDefault(module) {
     }
     return module;
 }
+// import { BigNumber } from '@ethersproject/bignumber';
+import { BigNumber } from "@ethersproject/bignumber";
 import { Contract } from "@ethersproject/contracts";
 import { Web3Provider } from "@ethersproject/providers";
 import { IPFS_DEFAULT_GATEWAY_URL } from "@metamask/controller-utils";
 import { getKnownPropertyNames } from "@metamask/utils";
 import $abiSingleCallBalancesContract from "single-call-balance-checker-abi";
 const abiSingleCallBalancesContract = $importDefault($abiSingleCallBalancesContract);
-import { SupportedTokenDetectionNetworks } from "./assetsUtil.mjs";
+import { SupportedStakedBalanceNetworks, SupportedTokenDetectionNetworks } from "./assetsUtil.mjs";
 import { ERC20Standard } from "./Standards/ERC20Standard.mjs";
 import { ERC1155Standard } from "./Standards/NftStandards/ERC1155/ERC1155Standard.mjs";
 import { ERC721Standard } from "./Standards/NftStandards/ERC721/ERC721Standard.mjs";
@@ -52,6 +54,10 @@ export const SINGLE_CALL_BALANCES_ADDRESS_BY_CHAINID = {
     [SupportedTokenDetectionNetworks.moonbeam]: '0x6aa75276052d96696134252587894ef5ffa520af',
     [SupportedTokenDetectionNetworks.moonriver]: '0x6aa75276052d96696134252587894ef5ffa520af',
 };
+export const STAKING_CONTRACT_ADDRESS_BY_CHAINID = {
+    [SupportedStakedBalanceNetworks.mainnet]: '0x4fef9d741011476750a243ac70b9789a63dd47df',
+    [SupportedStakedBalanceNetworks.holesky]: '0x37bf0883c27365cffcd0c4202918df930989891f',
+};
 export const MISSING_PROVIDER_ERROR = 'AssetsContractController failed to set the provider correctly. A provider must be set for this method to be available';
 /**
  * The name of the {@link AssetsContractController}
@@ -334,6 +340,60 @@ export class AssetsContractController {
         }
         return nonZeroBalances;
     }
+    /**
+     * Get the staked ethereum balance for an address in a single call.
+     *
+     * @param address - The address to check staked ethereum balance for.
+     * @param networkClientId - Network Client ID to fetch the provider with.
+     * @returns The hex staked ethereum balance for address.
+     */
+    async getStakedBalanceForChain(address, networkClientId) {
+        const chainId = __classPrivateFieldGet(this, _AssetsContractController_instances, "m", _AssetsContractController_getCorrectChainId).call(this, networkClientId);
+        const provider = __classPrivateFieldGet(this, _AssetsContractController_instances, "m", _AssetsContractController_getCorrectProvider).call(this, networkClientId);
+        // balance defaults to zero
+        let balance = BigNumber.from(0);
+        // Only fetch staked balance on supported networks
+        if (![
+            SupportedStakedBalanceNetworks.mainnet,
+            SupportedStakedBalanceNetworks.holesky,
+        ].includes(chainId)) {
+            return undefined;
+        }
+        // Only fetch staked balance if contract address exists
+        if (!((id) => id in STAKING_CONTRACT_ADDRESS_BY_CHAINID)(chainId)) {
+            return undefined;
+        }
+        const contractAddress = STAKING_CONTRACT_ADDRESS_BY_CHAINID[chainId];
+        const abi = [
+            {
+                inputs: [{ internalType: 'address', name: 'account', type: 'address' }],
+                name: 'getShares',
+                outputs: [{ internalType: 'uint256', name: '', type: 'uint256' }],
+                stateMutability: 'view',
+                type: 'function',
+            },
+            {
+                inputs: [{ internalType: 'uint256', name: 'shares', type: 'uint256' }],
+                name: 'convertToAssets',
+                outputs: [{ internalType: 'uint256', name: 'assets', type: 'uint256' }],
+                stateMutability: 'view',
+                type: 'function',
+            },
+        ];
+        try {
+            const contract = new Contract(contractAddress, abi, provider);
+            const userShares = await contract.getShares(address);
+            // convert shares to assets only if address shares > 0 else return default balance
+            if (!userShares.lte(0)) {
+                balance = await contract.convertToAssets(userShares.toString());
+            }
+        }
+        catch (error) {
+            // if we get an error, log and return the default value
+            console.error(error);
+        }
+        return balance.toHexString();
+    }
 }
 _AssetsContractController_provider = new WeakMap(), _AssetsContractController_ipfsGateway = new WeakMap(), _AssetsContractController_chainId = new WeakMap(), _AssetsContractController_instances = new WeakSet(), _AssetsContractController_registerActionHandlers = function _AssetsContractController_registerActionHandlers() {
     const methodsExcludedFromMessenger = [
diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.cjs b/node_modules/@metamask/assets-controllers/dist/NftController.cjs
index 82613cf..f7fd41e 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.cjs
@@ -13,7 +13,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _NftController_instances, _NftController_mutex, _NftController_selectedAccountId, _NftController_chainId, _NftController_ipfsGateway, _NftController_openSeaEnabled, _NftController_useIpfsSubdomains, _NftController_isIpfsGatewayEnabled, _NftController_onNftAdded, _NftController_onNetworkControllerNetworkDidChange, _NftController_onPreferencesControllerStateChange, _NftController_onSelectedAccountChange, _NftController_updateNestedNftState, _NftController_getNftCollectionApi, _NftController_getNftInformationFromApi, _NftController_getNftInformationFromTokenURI, _NftController_getNftURIAndStandard, _NftController_getNftInformation, _NftController_getNftContractInformationFromContract, _NftController_getNftContractInformation, _NftController_addIndividualNft, _NftController_addNftContract, _NftController_removeAndIgnoreIndividualNft, _NftController_removeIndividualNft, _NftController_removeNftContract, _NftController_validateWatchNft, _NftController_getCorrectChainId, _NftController_getAddressOrSelectedAddress, _NftController_updateNftUpdateForAccount;
+var _NftController_instances, _NftController_mutex, _NftController_selectedAccountId, _NftController_chainId, _NftController_ipfsGateway, _NftController_displayNftMedia, _NftController_useIpfsSubdomains, _NftController_isIpfsGatewayEnabled, _NftController_onNftAdded, _NftController_onNetworkControllerNetworkDidChange, _NftController_onPreferencesControllerStateChange, _NftController_onSelectedAccountChange, _NftController_updateNestedNftState, _NftController_getNftCollectionApi, _NftController_getNftInformationFromApi, _NftController_getNftInformationFromTokenURI, _NftController_getNftURIAndStandard, _NftController_getNftInformation, _NftController_getNftContractInformationFromContract, _NftController_getNftContractInformation, _NftController_addIndividualNft, _NftController_addNftContract, _NftController_removeAndIgnoreIndividualNft, _NftController_removeIndividualNft, _NftController_removeNftContract, _NftController_validateWatchNft, _NftController_getCorrectChainId, _NftController_getAddressOrSelectedAddress, _NftController_updateNftUpdateForAccount;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.NftController = exports.getDefaultNftControllerState = void 0;
 const address_1 = require("@ethersproject/address");
@@ -53,7 +53,7 @@ class NftController extends base_controller_1.BaseController {
      * @param options - The controller options.
      * @param options.chainId - The chain ID of the current network.
      * @param options.ipfsGateway - The configured IPFS gateway.
-     * @param options.openSeaEnabled - Controls whether the OpenSea API is used.
+     * @param options.displayNftMedia - Controls whether the OpenSea API is used.
      * @param options.useIpfsSubdomains - Controls whether IPFS subdomains are used.
      * @param options.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
      * @param options.onNftAdded - Callback that is called when an NFT is added. Currently used pass data
@@ -61,7 +61,7 @@ class NftController extends base_controller_1.BaseController {
      * @param options.messenger - The controller messenger.
      * @param options.state - Initial state to set on this controller.
      */
-    constructor({ chainId: initialChainId, ipfsGateway = controller_utils_1.IPFS_DEFAULT_GATEWAY_URL, openSeaEnabled = false, useIpfsSubdomains = true, isIpfsGatewayEnabled = true, onNftAdded, messenger, state = {}, }) {
+    constructor({ chainId: initialChainId, ipfsGateway = controller_utils_1.IPFS_DEFAULT_GATEWAY_URL, displayNftMedia = false, useIpfsSubdomains = true, isIpfsGatewayEnabled = true, onNftAdded, messenger, state = {}, }) {
         super({
             name: controllerName,
             metadata: nftControllerMetadata,
@@ -76,14 +76,14 @@ class NftController extends base_controller_1.BaseController {
         _NftController_selectedAccountId.set(this, void 0);
         _NftController_chainId.set(this, void 0);
         _NftController_ipfsGateway.set(this, void 0);
-        _NftController_openSeaEnabled.set(this, void 0);
+        _NftController_displayNftMedia.set(this, void 0);
         _NftController_useIpfsSubdomains.set(this, void 0);
         _NftController_isIpfsGatewayEnabled.set(this, void 0);
         _NftController_onNftAdded.set(this, void 0);
         __classPrivateFieldSet(this, _NftController_selectedAccountId, this.messagingSystem.call('AccountsController:getSelectedAccount').id, "f");
         __classPrivateFieldSet(this, _NftController_chainId, initialChainId, "f");
         __classPrivateFieldSet(this, _NftController_ipfsGateway, ipfsGateway, "f");
-        __classPrivateFieldSet(this, _NftController_openSeaEnabled, openSeaEnabled, "f");
+        __classPrivateFieldSet(this, _NftController_displayNftMedia, displayNftMedia, "f");
         __classPrivateFieldSet(this, _NftController_useIpfsSubdomains, useIpfsSubdomains, "f");
         __classPrivateFieldSet(this, _NftController_isIpfsGatewayEnabled, isIpfsGatewayEnabled, "f");
         __classPrivateFieldSet(this, _NftController_onNftAdded, onNftAdded, "f");
@@ -97,6 +97,19 @@ class NftController extends base_controller_1.BaseController {
         // eslint-disable-next-line @typescript-eslint/no-misused-promises
         __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_onSelectedAccountChange).bind(this));
     }
+
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+     */
+    reset() {
+        this.update((state) => {
+        state.allNftContracts = {};
+        state.allNfts = {};
+        state.ignoredNfts = [];
+        });
+    }
+
     getNftApi() {
         // TODO: Either fix this lint violation or explain why it's necessary to ignore.
         // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
@@ -581,7 +594,7 @@ class NftController extends base_controller_1.BaseController {
     }
 }
 exports.NftController = NftController;
-_NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new WeakMap(), _NftController_chainId = new WeakMap(), _NftController_ipfsGateway = new WeakMap(), _NftController_openSeaEnabled = new WeakMap(), _NftController_useIpfsSubdomains = new WeakMap(), _NftController_isIpfsGatewayEnabled = new WeakMap(), _NftController_onNftAdded = new WeakMap(), _NftController_instances = new WeakSet(), _NftController_onNetworkControllerNetworkDidChange = function _NftController_onNetworkControllerNetworkDidChange({ selectedNetworkClientId, }) {
+_NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new WeakMap(), _NftController_chainId = new WeakMap(), _NftController_ipfsGateway = new WeakMap(), _NftController_displayNftMedia = new WeakMap(), _NftController_useIpfsSubdomains = new WeakMap(), _NftController_isIpfsGatewayEnabled = new WeakMap(), _NftController_onNftAdded = new WeakMap(), _NftController_instances = new WeakSet(), _NftController_onNetworkControllerNetworkDidChange = function _NftController_onNetworkControllerNetworkDidChange({ selectedNetworkClientId, }) {
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     __classPrivateFieldSet(this, _NftController_chainId, chainId, "f");
 }, _NftController_onPreferencesControllerStateChange =
@@ -589,16 +602,16 @@ _NftController_mutex = new WeakMap(), _NftController_selectedAccountId = new Wea
  * Handles the state change of the preference controller.
  * @param preferencesState - The new state of the preference controller.
  * @param preferencesState.ipfsGateway - The configured IPFS gateway.
- * @param preferencesState.openSeaEnabled - Controls whether the OpenSea API is used.
+ * @param preferencesState.displayNftMedia - Controls whether the OpenSea API is used.
  * @param preferencesState.isIpfsGatewayEnabled - Controls whether IPFS is enabled or not.
  */
-async function _NftController_onPreferencesControllerStateChange({ ipfsGateway, openSeaEnabled, isIpfsGatewayEnabled, }) {
+async function _NftController_onPreferencesControllerStateChange({ ipfsGateway, displayNftMedia, isIpfsGatewayEnabled, }) {
     const selectedAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
     __classPrivateFieldSet(this, _NftController_selectedAccountId, selectedAccount.id, "f");
     __classPrivateFieldSet(this, _NftController_ipfsGateway, ipfsGateway, "f");
-    __classPrivateFieldSet(this, _NftController_openSeaEnabled, openSeaEnabled, "f");
+    __classPrivateFieldSet(this, _NftController_displayNftMedia, displayNftMedia, "f");
     __classPrivateFieldSet(this, _NftController_isIpfsGatewayEnabled, isIpfsGatewayEnabled, "f");
-    const needsUpdateNftMetadata = (isIpfsGatewayEnabled && ipfsGateway !== '') || openSeaEnabled;
+    const needsUpdateNftMetadata = (isIpfsGatewayEnabled && ipfsGateway !== '') || displayNftMedia;
     if (needsUpdateNftMetadata && selectedAccount) {
         await __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_updateNftUpdateForAccount).call(this, selectedAccount);
     }
@@ -611,7 +624,7 @@ async function _NftController_onSelectedAccountChange(internalAccount) {
     const oldSelectedAccountId = __classPrivateFieldGet(this, _NftController_selectedAccountId, "f");
     __classPrivateFieldSet(this, _NftController_selectedAccountId, internalAccount.id, "f");
     const needsUpdateNftMetadata = ((__classPrivateFieldGet(this, _NftController_isIpfsGatewayEnabled, "f") && __classPrivateFieldGet(this, _NftController_ipfsGateway, "f") !== '') ||
-        __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f")) &&
+        __classPrivateFieldGet(this, _NftController_displayNftMedia, "f")) &&
         oldSelectedAccountId !== internalAccount.id;
     if (needsUpdateNftMetadata) {
         await __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_updateNftUpdateForAccount).call(this, internalAccount);
@@ -686,6 +699,7 @@ async function _NftController_getNftInformationFromApi(contractAddress, tokenId)
             description: null,
             image: null,
             standard: null,
+            error: 'Opensea import error',
         };
     }
     // if we've reached this point, we have successfully fetched some data for nftInformation
@@ -730,7 +744,7 @@ async function _NftController_getNftInformationFromTokenURI(contractAddress, tok
             tokenURI: tokenURI ?? null,
         };
     }
-    const isDisplayNFTMediaToggleEnabled = __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f");
+    const isDisplayNFTMediaToggleEnabled = __classPrivateFieldGet(this, _NftController_displayNftMedia, "f");
     if (!hasIpfsTokenURI && !isDisplayNFTMediaToggleEnabled) {
         return {
             image: null,
@@ -739,6 +753,7 @@ async function _NftController_getNftInformationFromTokenURI(contractAddress, tok
             standard: standard || null,
             favorite: false,
             tokenURI: tokenURI ?? null,
+            error: 'URI import error',
         };
     }
     if (hasIpfsTokenURI) {
@@ -777,6 +792,7 @@ async function _NftController_getNftInformationFromTokenURI(contractAddress, tok
             standard: standard || null,
             favorite: false,
             tokenURI: tokenURI ?? null,
+            error: 'URI import error',
         };
     }
 }, _NftController_getNftURIAndStandard =
@@ -832,10 +848,21 @@ async function _NftController_getNftInformation(contractAddress, tokenId, networ
     });
     const [blockchainMetadata, nftApiMetadata] = await Promise.all([
         (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_getNftInformationFromTokenURI).call(this, contractAddress, tokenId, networkClientId)),
-        __classPrivateFieldGet(this, _NftController_openSeaEnabled, "f") && chainId === '0x1'
+        __classPrivateFieldGet(this, _NftController_displayNftMedia, "f") && chainId === '0x1'
             ? (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _NftController_instances, "m", _NftController_getNftInformationFromApi).call(this, contractAddress, tokenId))
             : undefined,
     ]);
+    if (blockchainMetadata?.error && nftApiMetadata?.error) {
+        return {
+          image: null,
+          name: null,
+          description: null,
+          standard: blockchainMetadata.standard ?? null,
+          favorite: false,
+          tokenURI: blockchainMetadata.tokenURI ?? null,
+          error: 'Both import failed',
+        };
+    }
     return {
         ...nftApiMetadata,
         name: blockchainMetadata?.name ?? nftApiMetadata?.name ?? null,
@@ -977,6 +1004,7 @@ async function _NftController_addIndividualNft(tokenAddress, tokenId, nftMetadat
                 tokenId: tokenId.toString(),
                 standard: nftMetadata.standard,
                 source,
+                tokenURI: nftMetadata.tokenURI,
             });
         }
     }
diff --git a/node_modules/@metamask/assets-controllers/dist/NftController.d.cts b/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
index 6306bb6..7e9bfec 100644
--- a/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/NftController.d.cts
@@ -108,6 +108,7 @@ export type NftMetadata = {
     creator?: string;
     transactionId?: string;
     tokenURI?: string | null;
+    error?: string;
     collection?: Collection;
     address?: string;
     attributes?: Attributes[];
@@ -419,6 +420,11 @@ export declare class NftController extends BaseController<typeof controllerName,
         collections: Collection[];
     }>;
     _requestApproval(suggestedNftMeta: SuggestedNftMeta): Promise<unknown>;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default NftController;
 //# sourceMappingURL=NftController.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
index f7b75d7..dfd2d35 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs
@@ -1,24 +1,16 @@
 "use strict";
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TokenBalancesController_handle, _TokenBalancesController_interval, _TokenBalancesController_tokens, _TokenBalancesController_disabled;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TokenBalancesController = exports.getDefaultTokenBalancesState = void 0;
-const base_controller_1 = require("@metamask/base-controller");
+const contracts_1 = require("@ethersproject/contracts");
+const providers_1 = require("@ethersproject/providers");
 const controller_utils_1 = require("@metamask/controller-utils");
+const metamask_eth_abis_1 = require("@metamask/metamask-eth-abis");
+const polling_controller_1 = require("@metamask/polling-controller");
+const multicall_1 = require("./multicall.cjs");
 const DEFAULT_INTERVAL = 180000;
 const controllerName = 'TokenBalancesController';
 const metadata = {
-    contractBalances: { persist: true, anonymous: false },
+    tokenBalances: { persist: true, anonymous: false },
 };
 /**
  * Get the default TokenBalancesController state.
@@ -27,7 +19,7 @@ const metadata = {
  */
 function getDefaultTokenBalancesState() {
     return {
-        contractBalances: {},
+        tokenBalances: {},
     };
 }
 exports.getDefaultTokenBalancesState = getDefaultTokenBalancesState;
@@ -35,18 +27,16 @@ exports.getDefaultTokenBalancesState = getDefaultTokenBalancesState;
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-class TokenBalancesController extends base_controller_1.BaseController {
+class TokenBalancesController extends (0, polling_controller_1.StaticIntervalPollingController)() {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval = DEFAULT_INTERVAL, tokens = [], disabled = false, messenger, state = {}, }) {
+    constructor({ interval = DEFAULT_INTERVAL, messenger, state = {}, }) {
         super({
             name: controllerName,
             metadata,
@@ -56,81 +46,40 @@ class TokenBalancesController extends base_controller_1.BaseController {
                 ...state,
             },
         });
-        _TokenBalancesController_handle.set(this, void 0);
-        _TokenBalancesController_interval.set(this, void 0);
-        _TokenBalancesController_tokens.set(this, void 0);
-        _TokenBalancesController_disabled.set(this, void 0);
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, disabled, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_tokens, tokens, "f");
-        this.messagingSystem.subscribe('TokensController:stateChange', ({ tokens: newTokens, detectedTokens }) => {
-            __classPrivateFieldSet(this, _TokenBalancesController_tokens, [...newTokens, ...detectedTokens], "f");
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.updateBalances();
-        });
-        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-        // eslint-disable-next-line @typescript-eslint/no-floating-promises
-        this.poll();
-    }
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, false, "f");
-    }
-    /**
-     * Blocks controller from updating tracked tokens contract balances.
-     */
-    disable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, true, "f");
-    }
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
-     */
-    async poll(interval) {
-        if (interval) {
-            __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        }
-        if (__classPrivateFieldGet(this, _TokenBalancesController_handle, "f")) {
-            clearTimeout(__classPrivateFieldGet(this, _TokenBalancesController_handle, "f"));
-        }
-        await (0, controller_utils_1.safelyExecute)(() => this.updateBalances());
-        __classPrivateFieldSet(this, _TokenBalancesController_handle, setTimeout(() => {
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.poll(__classPrivateFieldGet(this, _TokenBalancesController_interval, "f"));
-        }, __classPrivateFieldGet(this, _TokenBalancesController_interval, "f")), "f");
+        this.setIntervalLength(interval);
     }
     /**
-     * Updates balances for all tokens.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.networkClientId - The network client id to poll with.
+     * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.
      */
-    async updateBalances() {
-        if (__classPrivateFieldGet(this, _TokenBalancesController_disabled, "f")) {
-            return;
-        }
-        const selectedInternalAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
-        const newContractBalances = {};
-        for (const token of __classPrivateFieldGet(this, _TokenBalancesController_tokens, "f")) {
-            const { address } = token;
-            try {
-                const balance = await this.messagingSystem.call('AssetsContractController:getERC20BalanceOf', address, selectedInternalAccount.address);
-                newContractBalances[address] = (0, controller_utils_1.toHex)(balance);
-                token.hasBalanceError = false;
-            }
-            catch (error) {
-                newContractBalances[address] = (0, controller_utils_1.toHex)(0);
-                token.hasBalanceError = true;
-            }
-        }
+    async _executePoll({ networkClientId, tokensPerAccount, }) {
+        const networkClient = this.messagingSystem.call(`NetworkController:getNetworkClientById`, networkClientId);
+        const { chainId } = networkClient.configuration;
+        const provider = new providers_1.Web3Provider(networkClient.provider);
+        const accountTokenPairs = Object.entries(tokensPerAccount).flatMap(([accountAddress, tokenAddresses]) => tokenAddresses.map((tokenAddress) => ({
+            accountAddress: accountAddress,
+            tokenAddress,
+        })));
+        const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({
+            contract: new contracts_1.Contract(tokenAddress, metamask_eth_abis_1.abiERC20, provider),
+            functionSignature: 'balanceOf(address)',
+            arguments: [accountAddress],
+        }));
+        const results = await (0, multicall_1.multicallOrFallback)(calls, chainId, provider);
         this.update((state) => {
-            state.contractBalances = newContractBalances;
+            var _a, _b;
+            for (let i = 0; i < results.length; i++) {
+                const { success, value } = results[i];
+                if (success) {
+                    const { accountAddress, tokenAddress } = accountTokenPairs[i];
+                    ((_b = ((_a = state.tokenBalances)[accountAddress] ?? (_a[accountAddress] = {})))[chainId] ?? (_b[chainId] = {}))[tokenAddress] = (0, controller_utils_1.toHex)(value);
+                }
+            }
         });
     }
 }
 exports.TokenBalancesController = TokenBalancesController;
-_TokenBalancesController_handle = new WeakMap(), _TokenBalancesController_interval = new WeakMap(), _TokenBalancesController_tokens = new WeakMap(), _TokenBalancesController_disabled = new WeakMap();
 exports.default = TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.cjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
index 4031b83..48a12e2 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.cjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\n\nimport type { AssetsContractControllerGetERC20BalanceOfAction } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AssetsContractControllerGetERC20BalanceOfAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateBalances();\n      },\n    );\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n    const selectedInternalAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      try {\n        const balance = await this.messagingSystem.call(\n          'AssetsContractController:getERC20BalanceOf',\n          address,\n          selectedInternalAccount.address,\n        );\n        newContractBalances[address] = toHex(balance);\n        token.hasBalanceError = false;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.hasBalanceError = true;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.cjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;AAAA,wDAAoD;AACpD,wDAAwD;AAMxD,iEAAmD;AACnD,mEAAuD;AAKvD,qEAA+E;AAI/E,+CAAkD;AAGlD,MAAM,gBAAgB,GAAG,MAAM,CAAC;AAEhC,MAAM,cAAc,GAAG,yBAAyB,CAAC;AAEjD,MAAM,QAAQ,GAAG;IACf,aAAa,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACnD,CAAC;AAwDF;;;;GAIG;AACH,SAAgB,4BAA4B;IAC1C,OAAO;QACL,aAAa,EAAE,EAAE;KAClB,CAAC;AACJ,CAAC;AAJD,oEAIC;AAQD;;;GAGG;AACH,MAAa,uBAAwB,SAAQ,IAAA,oDAA+B,GAI3E;IACC;;;;;;;OAOG;IACH,YAAY,EACV,QAAQ,GAAG,gBAAgB,EAC3B,SAAS,EACT,KAAK,GAAG,EAAE,GACqB;QAC/B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,4BAA4B,EAAE;gBACjC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,iBAAiB,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,YAAY,CAAC,EACjB,eAAe,EACf,gBAAgB,GACU;QAC1B,MAAM,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,wCAAwC,EACxC,eAAe,CAChB,CAAC;QAEF,MAAM,EAAE,OAAO,EAAE,GAAG,aAAa,CAAC,aAAa,CAAC;QAChD,MAAM,QAAQ,GAAG,IAAI,wBAAY,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;QAE1D,MAAM,iBAAiB,GAAG,MAAM,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAChE,CAAC,CAAC,cAAc,EAAE,cAAc,CAAC,EAAE,EAAE,CACnC,cAAc,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;YACpC,cAAc,EAAE,cAAqB;YACrC,YAAY;SACb,CAAC,CAAC,CACN,CAAC;QAEF,MAAM,KAAK,GAAG,iBAAiB,CAAC,GAAG,CAAC,CAAC,EAAE,cAAc,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAAC;YACzE,QAAQ,EAAE,IAAI,oBAAQ,CAAC,YAAY,EAAE,4BAAQ,EAAE,QAAQ,CAAC;YACxD,iBAAiB,EAAE,oBAAoB;YACvC,SAAS,EAAE,CAAC,cAAc,CAAC;SAC5B,CAAC,CAAC,CAAC;QAEJ,MAAM,OAAO,GAAG,MAAM,IAAA,+BAAmB,EAAC,KAAK,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAEpE,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;;YACpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvC,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBAEtC,IAAI,OAAO,EAAE;oBACX,MAAM,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,iBAAiB,CAAC,CAAC,CAAC,CAAC;oBAC9D,OAAC,OAAC,KAAK,CAAC,aAAa,EAAC,cAAc,SAAd,cAAc,IAAM,EAAE,EAAC,EAAC,OAAO,SAAP,OAAO,IAAM,EAAE,EAAC,CAC5D,YAAY,CACb,GAAG,IAAA,wBAAK,EAAC,KAAW,CAAC,CAAC;iBACxB;aACF;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA9ED,0DA8EC;AAED,kBAAe,uBAAuB,CAAC","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { toHex } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport type BN from 'bn.js';\n\nimport { multicallOrFallback } from './multicall';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  tokenBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property messenger - A controller messenger.\n * @property state - Initial state for the controller.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * A mapping from account address to chain id to token address to balance.\n */\ntype TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;\n\n/**\n * Token balances controller state\n * @property tokenBalances - A mapping from account address to chain id to token address to balance.\n */\nexport type TokenBalancesControllerState = {\n  tokenBalances: TokenBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    tokenBalances: {},\n  };\n}\n\n/** The input to start polling for the {@link TokenBalancesController} */\nexport type TokenBalancesPollingInput = {\n  networkClientId: NetworkClientId;\n  tokensPerAccount: Record<Hex, Hex[]>;\n};\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends StaticIntervalPollingController<TokenBalancesPollingInput>()<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(interval);\n  }\n\n  /**\n   * Polls for erc20 token balances.\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The network client id to poll with.\n   * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.\n   */\n  async _executePoll({\n    networkClientId,\n    tokensPerAccount,\n  }: TokenBalancesPollingInput): Promise<void> {\n    const networkClient = this.messagingSystem.call(\n      `NetworkController:getNetworkClientById`,\n      networkClientId,\n    );\n\n    const { chainId } = networkClient.configuration;\n    const provider = new Web3Provider(networkClient.provider);\n\n    const accountTokenPairs = Object.entries(tokensPerAccount).flatMap(\n      ([accountAddress, tokenAddresses]) =>\n        tokenAddresses.map((tokenAddress) => ({\n          accountAddress: accountAddress as Hex,\n          tokenAddress,\n        })),\n    );\n\n    const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({\n      contract: new Contract(tokenAddress, abiERC20, provider),\n      functionSignature: 'balanceOf(address)',\n      arguments: [accountAddress],\n    }));\n\n    const results = await multicallOrFallback(calls, chainId, provider);\n\n    this.update((state) => {\n      for (let i = 0; i < results.length; i++) {\n        const { success, value } = results[i];\n\n        if (success) {\n          const { accountAddress, tokenAddress } = accountTokenPairs[i];\n          ((state.tokenBalances[accountAddress] ??= {})[chainId] ??= {})[\n            tokenAddress\n          ] = toHex(value as BN);\n        }\n      }\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
index d252cab..7762eec 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts
@@ -1,37 +1,33 @@
-import type { AccountsControllerGetSelectedAccountAction } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
-import { BaseController } from "@metamask/base-controller";
-import type { AssetsContractControllerGetERC20BalanceOfAction } from "./AssetsContractController.cjs";
-import type { Token } from "./TokenRatesController.cjs";
+import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
+import type { Hex } from "@metamask/utils";
 import type { TokensControllerStateChangeEvent } from "./TokensController.cjs";
 declare const controllerName = "TokenBalancesController";
 /**
  * Token balances controller options
  * @property interval - Polling interval used to fetch new token balances.
- * @property tokens - List of tokens to track balances for.
- * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.
+ * @property messenger - A controller messenger.
+ * @property state - Initial state for the controller.
  */
 type TokenBalancesControllerOptions = {
     interval?: number;
-    tokens?: Token[];
-    disabled?: boolean;
     messenger: TokenBalancesControllerMessenger;
     state?: Partial<TokenBalancesControllerState>;
 };
 /**
- * Represents a mapping of hash token contract addresses to their balances.
+ * A mapping from account address to chain id to token address to balance.
  */
-type ContractBalances = Record<string, string>;
+type TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;
 /**
  * Token balances controller state
- * @property contractBalances - Hash of token contract addresses to balances
+ * @property tokenBalances - A mapping from account address to chain id to token address to balance.
  */
 export type TokenBalancesControllerState = {
-    contractBalances: ContractBalances;
+    tokenBalances: TokenBalances;
 };
 export type TokenBalancesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerActions = TokenBalancesControllerGetStateAction;
-export type AllowedActions = AccountsControllerGetSelectedAccountAction | AssetsContractControllerGetERC20BalanceOfAction;
+export type AllowedActions = NetworkControllerGetNetworkClientByIdAction;
 export type TokenBalancesControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerEvents = TokenBalancesControllerStateChangeEvent;
 export type AllowedEvents = TokensControllerStateChangeEvent;
@@ -42,41 +38,47 @@ export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typ
  * @returns The default TokenBalancesController state.
  */
 export declare function getDefaultTokenBalancesState(): TokenBalancesControllerState;
+/** The input to start polling for the {@link TokenBalancesController} */
+export type TokenBalancesPollingInput = {
+    networkClientId: NetworkClientId;
+    tokensPerAccount: Record<Hex, Hex[]>;
+};
+declare const TokenBalancesController_base: (abstract new (...args: any[]) => {
+    readonly "__#785957@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#785957@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: TokenBalancesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#785949@#pollingTokenSets": Map<string, Set<string>>;
+    "__#785949@#callbacks": Map<string, Set<(input: TokenBalancesPollingInput) => void>>;
+    _executePoll(input: TokenBalancesPollingInput): Promise<void>;
+    startPolling(input: TokenBalancesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: TokenBalancesPollingInput, callback: (input: TokenBalancesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export declare class TokenBalancesController extends BaseController<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
-    #private;
+export declare class TokenBalancesController extends TokenBalancesController_base<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval, tokens, disabled, messenger, state, }: TokenBalancesControllerOptions);
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable(): void;
-    /**
-     * Blocks controller from updating tracked tokens contract balances.
-     */
-    disable(): void;
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
-     */
-    poll(interval?: number): Promise<void>;
+    constructor({ interval, messenger, state, }: TokenBalancesControllerOptions);
     /**
-     * Updates balances for all tokens.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.networkClientId - The network client id to poll with.
+     * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.
      */
-    updateBalances(): Promise<void>;
+    _executePoll({ networkClientId, tokensPerAccount, }: TokenBalancesPollingInput): Promise<void>;
 }
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
index b45a389..0a929f0 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.d.cts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AACnC,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAG3D,OAAO,KAAK,EAAE,+CAA+C,EAAE,uCAAmC;AAClG,OAAO,KAAK,EAAE,KAAK,EAAE,mCAA+B;AACpD,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,+CAA+C,CAAC;AAEpD,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IASC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA8BjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAkB5C;;OAEG;IACG,cAAc;CA6BrB;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.d.cts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AAGnC,OAAO,KAAK,EACV,eAAe,EACf,2CAA2C,EAC5C,qCAAqC;AAEtC,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAI3C,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,aAAa,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GAAG,2CAA2C,CAAC;AAEzE,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED,yEAAyE;AACzE,MAAM,MAAM,yBAAyB,GAAG;IACtC,eAAe,EAAE,eAAe,CAAC;IACjC,gBAAgB,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;CACtC,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,6BAC3C,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;IACC;;;;;;;OAOG;gBACS,EACV,QAA2B,EAC3B,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IAcjC;;;;;OAKG;IACG,YAAY,CAAC,EACjB,eAAe,EACf,gBAAgB,GACjB,EAAE,yBAAyB,GAAG,OAAO,CAAC,IAAI,CAAC;CAsC7C;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
index e4823d7..f558874 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts
@@ -1,37 +1,33 @@
-import type { AccountsControllerGetSelectedAccountAction } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
-import { BaseController } from "@metamask/base-controller";
-import type { AssetsContractControllerGetERC20BalanceOfAction } from "./AssetsContractController.mjs";
-import type { Token } from "./TokenRatesController.mjs";
+import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
+import type { Hex } from "@metamask/utils";
 import type { TokensControllerStateChangeEvent } from "./TokensController.mjs";
 declare const controllerName = "TokenBalancesController";
 /**
  * Token balances controller options
  * @property interval - Polling interval used to fetch new token balances.
- * @property tokens - List of tokens to track balances for.
- * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.
+ * @property messenger - A controller messenger.
+ * @property state - Initial state for the controller.
  */
 type TokenBalancesControllerOptions = {
     interval?: number;
-    tokens?: Token[];
-    disabled?: boolean;
     messenger: TokenBalancesControllerMessenger;
     state?: Partial<TokenBalancesControllerState>;
 };
 /**
- * Represents a mapping of hash token contract addresses to their balances.
+ * A mapping from account address to chain id to token address to balance.
  */
-type ContractBalances = Record<string, string>;
+type TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;
 /**
  * Token balances controller state
- * @property contractBalances - Hash of token contract addresses to balances
+ * @property tokenBalances - A mapping from account address to chain id to token address to balance.
  */
 export type TokenBalancesControllerState = {
-    contractBalances: ContractBalances;
+    tokenBalances: TokenBalances;
 };
 export type TokenBalancesControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerActions = TokenBalancesControllerGetStateAction;
-export type AllowedActions = AccountsControllerGetSelectedAccountAction | AssetsContractControllerGetERC20BalanceOfAction;
+export type AllowedActions = NetworkControllerGetNetworkClientByIdAction;
 export type TokenBalancesControllerStateChangeEvent = ControllerStateChangeEvent<typeof controllerName, TokenBalancesControllerState>;
 export type TokenBalancesControllerEvents = TokenBalancesControllerStateChangeEvent;
 export type AllowedEvents = TokensControllerStateChangeEvent;
@@ -42,41 +38,47 @@ export type TokenBalancesControllerMessenger = RestrictedControllerMessenger<typ
  * @returns The default TokenBalancesController state.
  */
 export declare function getDefaultTokenBalancesState(): TokenBalancesControllerState;
+/** The input to start polling for the {@link TokenBalancesController} */
+export type TokenBalancesPollingInput = {
+    networkClientId: NetworkClientId;
+    tokensPerAccount: Record<Hex, Hex[]>;
+};
+declare const TokenBalancesController_base: (abstract new (...args: any[]) => {
+    readonly "__#785957@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#785957@#intervalLength": number | undefined;
+    setIntervalLength(intervalLength: number): void;
+    getIntervalLength(): number | undefined;
+    _startPolling(input: TokenBalancesPollingInput): void;
+    _stopPollingByPollingTokenSetId(key: string): void;
+    readonly "__#785949@#pollingTokenSets": Map<string, Set<string>>;
+    "__#785949@#callbacks": Map<string, Set<(input: TokenBalancesPollingInput) => void>>;
+    _executePoll(input: TokenBalancesPollingInput): Promise<void>;
+    startPolling(input: TokenBalancesPollingInput): string;
+    stopAllPolling(): void;
+    stopPollingByPollingToken(pollingToken: string): void;
+    onPollingComplete(input: TokenBalancesPollingInput, callback: (input: TokenBalancesPollingInput) => void): void;
+}) & typeof import("@metamask/base-controller").BaseController;
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export declare class TokenBalancesController extends BaseController<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
-    #private;
+export declare class TokenBalancesController extends TokenBalancesController_base<typeof controllerName, TokenBalancesControllerState, TokenBalancesControllerMessenger> {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval, tokens, disabled, messenger, state, }: TokenBalancesControllerOptions);
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable(): void;
-    /**
-     * Blocks controller from updating tracked tokens contract balances.
-     */
-    disable(): void;
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
-     */
-    poll(interval?: number): Promise<void>;
+    constructor({ interval, messenger, state, }: TokenBalancesControllerOptions);
     /**
-     * Updates balances for all tokens.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.networkClientId - The network client id to poll with.
+     * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.
      */
-    updateBalances(): Promise<void>;
+    _executePoll({ networkClientId, tokensPerAccount, }: TokenBalancesPollingInput): Promise<void>;
 }
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
index 8bdd22d..4fb3137 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.d.mts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAE,0CAA0C,EAAE,sCAAsC;AAChG,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AACnC,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAG3D,OAAO,KAAK,EAAE,+CAA+C,EAAE,uCAAmC;AAClG,OAAO,KAAK,EAAE,KAAK,EAAE,mCAA+B;AACpD,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,MAAM,CAAC,EAAE,KAAK,EAAE,CAAC;IACjB,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,gBAAgB,GAAG,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;AAE/C;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,gBAAgB,EAAE,gBAAgB,CAAC;CACpC,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,+CAA+C,CAAC;AAEpD,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,cAAc,CACzD,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;;IASC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,MAAW,EACX,QAAgB,EAChB,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IA8BjC;;OAEG;IACH,MAAM;IAIN;;OAEG;IACH,OAAO;IAIP;;;;OAIG;IACG,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAkB5C;;OAEG;IACG,cAAc;CA6BrB;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.d.mts","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"AAEA,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AAGnC,OAAO,KAAK,EACV,eAAe,EACf,2CAA2C,EAC5C,qCAAqC;AAEtC,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAI3C,OAAO,KAAK,EAAE,gCAAgC,EAAE,+BAA2B;AAI3E,QAAA,MAAM,cAAc,4BAA4B,CAAC;AAMjD;;;;;GAKG;AACH,KAAK,8BAA8B,GAAG;IACpC,QAAQ,CAAC,EAAE,MAAM,CAAC;IAClB,SAAS,EAAE,gCAAgC,CAAC;IAC5C,KAAK,CAAC,EAAE,OAAO,CAAC,4BAA4B,CAAC,CAAC;CAC/C,CAAC;AAEF;;GAEG;AACH,KAAK,aAAa,GAAG,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;AAEhE;;;GAGG;AACH,MAAM,MAAM,4BAA4B,GAAG;IACzC,aAAa,EAAE,aAAa,CAAC;CAC9B,CAAC;AAEF,MAAM,MAAM,qCAAqC,GAAG,wBAAwB,CAC1E,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEF,MAAM,MAAM,8BAA8B,GACxC,qCAAqC,CAAC;AAExC,MAAM,MAAM,cAAc,GAAG,2CAA2C,CAAC;AAEzE,MAAM,MAAM,uCAAuC,GACjD,0BAA0B,CACxB,OAAO,cAAc,EACrB,4BAA4B,CAC7B,CAAC;AAEJ,MAAM,MAAM,6BAA6B,GACvC,uCAAuC,CAAC;AAE1C,MAAM,MAAM,aAAa,GAAG,gCAAgC,CAAC;AAE7D,MAAM,MAAM,gCAAgC,GAAG,6BAA6B,CAC1E,OAAO,cAAc,EACrB,8BAA8B,GAAG,cAAc,EAC/C,6BAA6B,GAAG,aAAa,EAC7C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF;;;;GAIG;AACH,wBAAgB,4BAA4B,IAAI,4BAA4B,CAI3E;AAED,yEAAyE;AACzE,MAAM,MAAM,yBAAyB,GAAG;IACtC,eAAe,EAAE,eAAe,CAAC;IACjC,gBAAgB,EAAE,MAAM,CAAC,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;CACtC,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,uBAAwB,SAAQ,6BAC3C,OAAO,cAAc,EACrB,4BAA4B,EAC5B,gCAAgC,CACjC;IACC;;;;;;;OAOG;gBACS,EACV,QAA2B,EAC3B,SAAS,EACT,KAAU,GACX,EAAE,8BAA8B;IAcjC;;;;;OAKG;IACG,YAAY,CAAC,EACjB,eAAe,EACf,gBAAgB,GACjB,EAAE,yBAAyB,GAAG,OAAO,CAAC,IAAI,CAAC;CAsC7C;AAED,eAAe,uBAAuB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
index 3fb126b..79ca52f 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs
@@ -1,21 +1,13 @@
-var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
-    if (kind === "m") throw new TypeError("Private method is not writable");
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
-    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
-};
-var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
-    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
-    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
-    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
-};
-var _TokenBalancesController_handle, _TokenBalancesController_interval, _TokenBalancesController_tokens, _TokenBalancesController_disabled;
-import { BaseController } from "@metamask/base-controller";
-import { safelyExecute, toHex } from "@metamask/controller-utils";
+import { Contract } from "@ethersproject/contracts";
+import { Web3Provider } from "@ethersproject/providers";
+import { toHex } from "@metamask/controller-utils";
+import { abiERC20 } from "@metamask/metamask-eth-abis";
+import { StaticIntervalPollingController } from "@metamask/polling-controller";
+import { multicallOrFallback } from "./multicall.mjs";
 const DEFAULT_INTERVAL = 180000;
 const controllerName = 'TokenBalancesController';
 const metadata = {
-    contractBalances: { persist: true, anonymous: false },
+    tokenBalances: { persist: true, anonymous: false },
 };
 /**
  * Get the default TokenBalancesController state.
@@ -24,25 +16,23 @@ const metadata = {
  */
 export function getDefaultTokenBalancesState() {
     return {
-        contractBalances: {},
+        tokenBalances: {},
     };
 }
 /**
  * Controller that passively polls on a set interval token balances
  * for tokens stored in the TokensController
  */
-export class TokenBalancesController extends BaseController {
+export class TokenBalancesController extends StaticIntervalPollingController() {
     /**
      * Construct a Token Balances Controller.
      *
      * @param options - The controller options.
      * @param options.interval - Polling interval used to fetch new token balances.
-     * @param options.tokens - List of tokens to track balances for.
-     * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.
      * @param options.state - Initial state to set on this controller.
      * @param options.messenger - The controller restricted messenger.
      */
-    constructor({ interval = DEFAULT_INTERVAL, tokens = [], disabled = false, messenger, state = {}, }) {
+    constructor({ interval = DEFAULT_INTERVAL, messenger, state = {}, }) {
         super({
             name: controllerName,
             metadata,
@@ -52,80 +42,39 @@ export class TokenBalancesController extends BaseController {
                 ...state,
             },
         });
-        _TokenBalancesController_handle.set(this, void 0);
-        _TokenBalancesController_interval.set(this, void 0);
-        _TokenBalancesController_tokens.set(this, void 0);
-        _TokenBalancesController_disabled.set(this, void 0);
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, disabled, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        __classPrivateFieldSet(this, _TokenBalancesController_tokens, tokens, "f");
-        this.messagingSystem.subscribe('TokensController:stateChange', ({ tokens: newTokens, detectedTokens }) => {
-            __classPrivateFieldSet(this, _TokenBalancesController_tokens, [...newTokens, ...detectedTokens], "f");
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.updateBalances();
-        });
-        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-        // eslint-disable-next-line @typescript-eslint/no-floating-promises
-        this.poll();
-    }
-    /**
-     * Allows controller to update tracked tokens contract balances.
-     */
-    enable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, false, "f");
-    }
-    /**
-     * Blocks controller from updating tracked tokens contract balances.
-     */
-    disable() {
-        __classPrivateFieldSet(this, _TokenBalancesController_disabled, true, "f");
-    }
-    /**
-     * Starts a new polling interval.
-     *
-     * @param interval - Polling interval used to fetch new token balances.
-     */
-    async poll(interval) {
-        if (interval) {
-            __classPrivateFieldSet(this, _TokenBalancesController_interval, interval, "f");
-        }
-        if (__classPrivateFieldGet(this, _TokenBalancesController_handle, "f")) {
-            clearTimeout(__classPrivateFieldGet(this, _TokenBalancesController_handle, "f"));
-        }
-        await safelyExecute(() => this.updateBalances());
-        __classPrivateFieldSet(this, _TokenBalancesController_handle, setTimeout(() => {
-            // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-            // eslint-disable-next-line @typescript-eslint/no-floating-promises
-            this.poll(__classPrivateFieldGet(this, _TokenBalancesController_interval, "f"));
-        }, __classPrivateFieldGet(this, _TokenBalancesController_interval, "f")), "f");
+        this.setIntervalLength(interval);
     }
     /**
-     * Updates balances for all tokens.
+     * Polls for erc20 token balances.
+     * @param input - The input for the poll.
+     * @param input.networkClientId - The network client id to poll with.
+     * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.
      */
-    async updateBalances() {
-        if (__classPrivateFieldGet(this, _TokenBalancesController_disabled, "f")) {
-            return;
-        }
-        const selectedInternalAccount = this.messagingSystem.call('AccountsController:getSelectedAccount');
-        const newContractBalances = {};
-        for (const token of __classPrivateFieldGet(this, _TokenBalancesController_tokens, "f")) {
-            const { address } = token;
-            try {
-                const balance = await this.messagingSystem.call('AssetsContractController:getERC20BalanceOf', address, selectedInternalAccount.address);
-                newContractBalances[address] = toHex(balance);
-                token.hasBalanceError = false;
-            }
-            catch (error) {
-                newContractBalances[address] = toHex(0);
-                token.hasBalanceError = true;
-            }
-        }
+    async _executePoll({ networkClientId, tokensPerAccount, }) {
+        const networkClient = this.messagingSystem.call(`NetworkController:getNetworkClientById`, networkClientId);
+        const { chainId } = networkClient.configuration;
+        const provider = new Web3Provider(networkClient.provider);
+        const accountTokenPairs = Object.entries(tokensPerAccount).flatMap(([accountAddress, tokenAddresses]) => tokenAddresses.map((tokenAddress) => ({
+            accountAddress: accountAddress,
+            tokenAddress,
+        })));
+        const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({
+            contract: new Contract(tokenAddress, abiERC20, provider),
+            functionSignature: 'balanceOf(address)',
+            arguments: [accountAddress],
+        }));
+        const results = await multicallOrFallback(calls, chainId, provider);
         this.update((state) => {
-            state.contractBalances = newContractBalances;
+            var _a, _b;
+            for (let i = 0; i < results.length; i++) {
+                const { success, value } = results[i];
+                if (success) {
+                    const { accountAddress, tokenAddress } = accountTokenPairs[i];
+                    ((_b = ((_a = state.tokenBalances)[accountAddress] ?? (_a[accountAddress] = {})))[chainId] ?? (_b[chainId] = {}))[tokenAddress] = toHex(value);
+                }
+            }
         });
     }
 }
-_TokenBalancesController_handle = new WeakMap(), _TokenBalancesController_interval = new WeakMap(), _TokenBalancesController_tokens = new WeakMap(), _TokenBalancesController_disabled = new WeakMap();
 export default TokenBalancesController;
 //# sourceMappingURL=TokenBalancesController.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
index 95fbcc4..e72f684 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenBalancesController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenBalancesController.mjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":";;;;;;;;;;;;AAMA,OAAO,EAAE,cAAc,EAAE,kCAAkC;AAC3D,OAAO,EAAE,aAAa,EAAE,KAAK,EAAE,mCAAmC;AAMlE,MAAM,gBAAgB,GAAG,MAAM,CAAC;AAEhC,MAAM,cAAc,GAAG,yBAAyB,CAAC;AAEjD,MAAM,QAAQ,GAAG;IACf,gBAAgB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE;CACtD,CAAC;AA4DF;;;;GAIG;AACH,MAAM,UAAU,4BAA4B;IAC1C,OAAO;QACL,gBAAgB,EAAE,EAAE;KACrB,CAAC;AACJ,CAAC;AAED;;;GAGG;AACH,MAAM,OAAO,uBAAwB,SAAQ,cAI5C;IASC;;;;;;;;;OASG;IACH,YAAY,EACV,QAAQ,GAAG,gBAAgB,EAC3B,MAAM,GAAG,EAAE,EACX,QAAQ,GAAG,KAAK,EAChB,SAAS,EACT,KAAK,GAAG,EAAE,GACqB;QAC/B,KAAK,CAAC;YACJ,IAAI,EAAE,cAAc;YACpB,QAAQ;YACR,SAAS;YACT,KAAK,EAAE;gBACL,GAAG,4BAA4B,EAAE;gBACjC,GAAG,KAAK;aACT;SACF,CAAC,CAAC;QAjCL,kDAAwC;QAExC,oDAAkB;QAElB,kDAAiB;QAEjB,oDAAmB;QA6BjB,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;QAC1B,uBAAA,IAAI,mCAAW,MAAM,MAAA,CAAC;QAEtB,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,8BAA8B,EAC9B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,cAAc,EAAE,EAAE,EAAE;YACxC,uBAAA,IAAI,mCAAW,CAAC,GAAG,SAAS,EAAE,GAAG,cAAc,CAAC,MAAA,CAAC;YACjD,gFAAgF;YAChF,mEAAmE;YACnE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC,CACF,CAAC;QAEF,gFAAgF;QAChF,mEAAmE;QACnE,IAAI,CAAC,IAAI,EAAE,CAAC;IACd,CAAC;IAED;;OAEG;IACH,MAAM;QACJ,uBAAA,IAAI,qCAAa,KAAK,MAAA,CAAC;IACzB,CAAC;IAED;;OAEG;IACH,OAAO;QACL,uBAAA,IAAI,qCAAa,IAAI,MAAA,CAAC;IACxB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,IAAI,CAAC,QAAiB;QAC1B,IAAI,QAAQ,EAAE;YACZ,uBAAA,IAAI,qCAAa,QAAQ,MAAA,CAAC;SAC3B;QAED,IAAI,uBAAA,IAAI,uCAAQ,EAAE;YAChB,YAAY,CAAC,uBAAA,IAAI,uCAAQ,CAAC,CAAC;SAC5B;QAED,MAAM,aAAa,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;QAEjD,uBAAA,IAAI,mCAAW,UAAU,CAAC,GAAG,EAAE;YAC7B,gFAAgF;YAChF,mEAAmE;YACnE,IAAI,CAAC,IAAI,CAAC,uBAAA,IAAI,yCAAU,CAAC,CAAC;QAC5B,CAAC,EAAE,uBAAA,IAAI,yCAAU,CAAC,MAAA,CAAC;IACrB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,cAAc;QAClB,IAAI,uBAAA,IAAI,yCAAU,EAAE;YAClB,OAAO;SACR;QACD,MAAM,uBAAuB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACvD,uCAAuC,CACxC,CAAC;QAEF,MAAM,mBAAmB,GAAqB,EAAE,CAAC;QACjD,KAAK,MAAM,KAAK,IAAI,uBAAA,IAAI,uCAAQ,EAAE;YAChC,MAAM,EAAE,OAAO,EAAE,GAAG,KAAK,CAAC;YAC1B,IAAI;gBACF,MAAM,OAAO,GAAG,MAAM,IAAI,CAAC,eAAe,CAAC,IAAI,CAC7C,4CAA4C,EAC5C,OAAO,EACP,uBAAuB,CAAC,OAAO,CAChC,CAAC;gBACF,mBAAmB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC;gBAC9C,KAAK,CAAC,eAAe,GAAG,KAAK,CAAC;aAC/B;YAAC,OAAO,KAAK,EAAE;gBACd,mBAAmB,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;gBACxC,KAAK,CAAC,eAAe,GAAG,IAAI,CAAC;aAC9B;SACF;QAED,IAAI,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,gBAAgB,GAAG,mBAAmB,CAAC;QAC/C,CAAC,CAAC,CAAC;IACL,CAAC;CACF;;AAED,eAAe,uBAAuB,CAAC","sourcesContent":["import type { AccountsControllerGetSelectedAccountAction } from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { BaseController } from '@metamask/base-controller';\nimport { safelyExecute, toHex } from '@metamask/controller-utils';\n\nimport type { AssetsContractControllerGetERC20BalanceOfAction } from './AssetsContractController';\nimport type { Token } from './TokenRatesController';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  contractBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property tokens - List of tokens to track balances for.\n * @property disabled - If set to true, all tracked tokens contract balances updates are blocked.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  tokens?: Token[];\n  disabled?: boolean;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * Represents a mapping of hash token contract addresses to their balances.\n */\ntype ContractBalances = Record<string, string>;\n\n/**\n * Token balances controller state\n * @property contractBalances - Hash of token contract addresses to balances\n */\nexport type TokenBalancesControllerState = {\n  contractBalances: ContractBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AssetsContractControllerGetERC20BalanceOfAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    contractBalances: {},\n  };\n}\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends BaseController<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #interval: number;\n\n  #tokens: Token[];\n\n  #disabled: boolean;\n\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.tokens - List of tokens to track balances for.\n   * @param options.disabled - If set to true, all tracked tokens contract balances updates are blocked.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    tokens = [],\n    disabled = false,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.#disabled = disabled;\n    this.#interval = interval;\n    this.#tokens = tokens;\n\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      ({ tokens: newTokens, detectedTokens }) => {\n        this.#tokens = [...newTokens, ...detectedTokens];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.updateBalances();\n      },\n    );\n\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.poll();\n  }\n\n  /**\n   * Allows controller to update tracked tokens contract balances.\n   */\n  enable() {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from updating tracked tokens contract balances.\n   */\n  disable() {\n    this.#disabled = true;\n  }\n\n  /**\n   * Starts a new polling interval.\n   *\n   * @param interval - Polling interval used to fetch new token balances.\n   */\n  async poll(interval?: number): Promise<void> {\n    if (interval) {\n      this.#interval = interval;\n    }\n\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n\n    await safelyExecute(() => this.updateBalances());\n\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.poll(this.#interval);\n    }, this.#interval);\n  }\n\n  /**\n   * Updates balances for all tokens.\n   */\n  async updateBalances() {\n    if (this.#disabled) {\n      return;\n    }\n    const selectedInternalAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    const newContractBalances: ContractBalances = {};\n    for (const token of this.#tokens) {\n      const { address } = token;\n      try {\n        const balance = await this.messagingSystem.call(\n          'AssetsContractController:getERC20BalanceOf',\n          address,\n          selectedInternalAccount.address,\n        );\n        newContractBalances[address] = toHex(balance);\n        token.hasBalanceError = false;\n      } catch (error) {\n        newContractBalances[address] = toHex(0);\n        token.hasBalanceError = true;\n      }\n    }\n\n    this.update((state) => {\n      state.contractBalances = newContractBalances;\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenBalancesController.mjs","sourceRoot":"","sources":["../src/TokenBalancesController.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport { Web3Provider } from '@ethersproject/providers';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport { toHex } from '@metamask/controller-utils';\nimport { abiERC20 } from '@metamask/metamask-eth-abis';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport type BN from 'bn.js';\n\nimport { multicallOrFallback } from './multicall';\nimport type { TokensControllerStateChangeEvent } from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\nconst controllerName = 'TokenBalancesController';\n\nconst metadata = {\n  tokenBalances: { persist: true, anonymous: false },\n};\n\n/**\n * Token balances controller options\n * @property interval - Polling interval used to fetch new token balances.\n * @property messenger - A controller messenger.\n * @property state - Initial state for the controller.\n */\ntype TokenBalancesControllerOptions = {\n  interval?: number;\n  messenger: TokenBalancesControllerMessenger;\n  state?: Partial<TokenBalancesControllerState>;\n};\n\n/**\n * A mapping from account address to chain id to token address to balance.\n */\ntype TokenBalances = Record<Hex, Record<Hex, Record<Hex, Hex>>>;\n\n/**\n * Token balances controller state\n * @property tokenBalances - A mapping from account address to chain id to token address to balance.\n */\nexport type TokenBalancesControllerState = {\n  tokenBalances: TokenBalances;\n};\n\nexport type TokenBalancesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenBalancesControllerState\n>;\n\nexport type TokenBalancesControllerActions =\n  TokenBalancesControllerGetStateAction;\n\nexport type AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\nexport type TokenBalancesControllerStateChangeEvent =\n  ControllerStateChangeEvent<\n    typeof controllerName,\n    TokenBalancesControllerState\n  >;\n\nexport type TokenBalancesControllerEvents =\n  TokenBalancesControllerStateChangeEvent;\n\nexport type AllowedEvents = TokensControllerStateChangeEvent;\n\nexport type TokenBalancesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenBalancesControllerActions | AllowedActions,\n  TokenBalancesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Get the default TokenBalancesController state.\n *\n * @returns The default TokenBalancesController state.\n */\nexport function getDefaultTokenBalancesState(): TokenBalancesControllerState {\n  return {\n    tokenBalances: {},\n  };\n}\n\n/** The input to start polling for the {@link TokenBalancesController} */\nexport type TokenBalancesPollingInput = {\n  networkClientId: NetworkClientId;\n  tokensPerAccount: Record<Hex, Hex[]>;\n};\n\n/**\n * Controller that passively polls on a set interval token balances\n * for tokens stored in the TokensController\n */\nexport class TokenBalancesController extends StaticIntervalPollingController<TokenBalancesPollingInput>()<\n  typeof controllerName,\n  TokenBalancesControllerState,\n  TokenBalancesControllerMessenger\n> {\n  /**\n   * Construct a Token Balances Controller.\n   *\n   * @param options - The controller options.\n   * @param options.interval - Polling interval used to fetch new token balances.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.messenger - The controller restricted messenger.\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    messenger,\n    state = {},\n  }: TokenBalancesControllerOptions) {\n    super({\n      name: controllerName,\n      metadata,\n      messenger,\n      state: {\n        ...getDefaultTokenBalancesState(),\n        ...state,\n      },\n    });\n\n    this.setIntervalLength(interval);\n  }\n\n  /**\n   * Polls for erc20 token balances.\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The network client id to poll with.\n   * @param input.tokensPerAccount - A mapping from account addresses to token addresses to poll.\n   */\n  async _executePoll({\n    networkClientId,\n    tokensPerAccount,\n  }: TokenBalancesPollingInput): Promise<void> {\n    const networkClient = this.messagingSystem.call(\n      `NetworkController:getNetworkClientById`,\n      networkClientId,\n    );\n\n    const { chainId } = networkClient.configuration;\n    const provider = new Web3Provider(networkClient.provider);\n\n    const accountTokenPairs = Object.entries(tokensPerAccount).flatMap(\n      ([accountAddress, tokenAddresses]) =>\n        tokenAddresses.map((tokenAddress) => ({\n          accountAddress: accountAddress as Hex,\n          tokenAddress,\n        })),\n    );\n\n    const calls = accountTokenPairs.map(({ accountAddress, tokenAddress }) => ({\n      contract: new Contract(tokenAddress, abiERC20, provider),\n      functionSignature: 'balanceOf(address)',\n      arguments: [accountAddress],\n    }));\n\n    const results = await multicallOrFallback(calls, chainId, provider);\n\n    this.update((state) => {\n      for (let i = 0; i < results.length; i++) {\n        const { success, value } = results[i];\n\n        if (success) {\n          const { accountAddress, tokenAddress } = accountTokenPairs[i];\n          ((state.tokenBalances[accountAddress] ??= {})[chainId] ??= {})[\n            tokenAddress\n          ] = toHex(value as BN);\n        }\n      }\n    });\n  }\n}\n\nexport default TokenBalancesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
index 5c85d4f..ab23c95 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs
@@ -13,9 +13,9 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _TokenDetectionController_instances, _TokenDetectionController_intervalId, _TokenDetectionController_selectedAccountId, _TokenDetectionController_networkClientId, _TokenDetectionController_tokensChainsCache, _TokenDetectionController_disabled, _TokenDetectionController_isUnlocked, _TokenDetectionController_isDetectionEnabledFromPreferences, _TokenDetectionController_isDetectionEnabledForNetwork, _TokenDetectionController_getBalancesInSingleCall, _TokenDetectionController_trackMetaMetricsEvent, _TokenDetectionController_accountsAPI, _TokenDetectionController_registerEventListeners, _TokenDetectionController_stopPolling, _TokenDetectionController_startPolling, _TokenDetectionController_compareTokensChainsCache, _TokenDetectionController_getCorrectChainIdAndNetworkClientId, _TokenDetectionController_restartTokenDetection, _TokenDetectionController_getSlicesOfTokensToDetect, _TokenDetectionController_getConvertedStaticMainnetTokenList, _TokenDetectionController_addDetectedTokensViaAPI, _TokenDetectionController_addDetectedTokens, _TokenDetectionController_getSelectedAccount, _TokenDetectionController_getSelectedAddress;
+var _TokenDetectionController_instances, _TokenDetectionController_intervalId, _TokenDetectionController_selectedAccountId, _TokenDetectionController_networkClientId, _TokenDetectionController_tokensChainsCache, _TokenDetectionController_disabled, _TokenDetectionController_isUnlocked, _TokenDetectionController_isDetectionEnabledFromPreferences, _TokenDetectionController_isDetectionEnabledForNetwork, _TokenDetectionController_getBalancesInSingleCall, _TokenDetectionController_trackMetaMetricsEvent, _TokenDetectionController_accountsAPI, _TokenDetectionController_registerEventListeners, _TokenDetectionController_stopPolling, _TokenDetectionController_startPolling, _TokenDetectionController_compareTokensChainsCache, _TokenDetectionController_getCorrectNetworkClientIdByChainId, _TokenDetectionController_getCorrectChainIdAndNetworkClientId, _TokenDetectionController_restartTokenDetection, _TokenDetectionController_getChainsToDetect, _TokenDetectionController_attemptAccountAPIDetection, _TokenDetectionController_addChainsToRpcDetection, _TokenDetectionController_shouldDetectTokens, _TokenDetectionController_detectTokensUsingRpc, _TokenDetectionController_getSlicesOfTokensToDetect, _TokenDetectionController_getConvertedStaticMainnetTokenList, _TokenDetectionController_addDetectedTokensViaAPI, _TokenDetectionController_filterAndBuildTokensWithBalance, _TokenDetectionController_addDetectedTokens, _TokenDetectionController_getSelectedAccount, _TokenDetectionController_getSelectedAddress;
 Object.defineProperty(exports, "__esModule", { value: true });
-exports.TokenDetectionController = exports.controllerName = exports.STATIC_MAINNET_TOKEN_LIST = void 0;
+exports.TokenDetectionController = exports.controllerName = exports.mapChainIdWithTokenListMap = exports.STATIC_MAINNET_TOKEN_LIST = void 0;
 const contract_metadata_1 = __importDefault(require("@metamask/contract-metadata"));
 const controller_utils_1 = require("@metamask/controller-utils");
 const polling_controller_1 = require("@metamask/polling-controller");
@@ -49,6 +49,7 @@ function mapChainIdWithTokenListMap(tokensChainsCache) {
         return value;
     });
 }
+exports.mapChainIdWithTokenListMap = mapChainIdWithTokenListMap;
 exports.controllerName = 'TokenDetectionController';
 /**
  * Controller that passively polls on a set interval for Tokens auto detection
@@ -71,8 +72,9 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
      * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.
      * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.
      * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)
+     * @param options.platform - Indicates whether the platform is extension or mobile
      */
-    constructor({ interval = DEFAULT_INTERVAL, disabled = true, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI = true, }) {
+    constructor({ interval = DEFAULT_INTERVAL, disabled = true, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI = true, platform, }) {
         super({
             name: exports.controllerName,
             messenger,
@@ -93,6 +95,7 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
         _TokenDetectionController_accountsAPI.set(this, {
             isAccountsAPIEnabled: true,
             supportedNetworksCache: null,
+            platform: '',
             async getSupportedNetworks() {
                 /* istanbul ignore next */
                 if (!this.isAccountsAPIEnabled) {
@@ -106,19 +109,16 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
                 this.supportedNetworksCache = result;
                 return result;
             },
-            async getMultiChainBalances(address, chainId) {
-                if (!this.isAccountsAPIEnabled) {
-                    throw new Error('Accounts API Feature Switch is disabled');
-                }
-                const chainIdNumber = (0, utils_1.hexToNumber)(chainId);
-                const supportedNetworks = await this.getSupportedNetworks();
-                if (!supportedNetworks || !supportedNetworks.includes(chainIdNumber)) {
+            async getMultiNetworksBalances(address, chainIds, supportedNetworks) {
+                const chainIdNumbers = chainIds.map((chainId) => (0, utils_1.hexToNumber)(chainId));
+                if (!supportedNetworks ||
+                    !chainIdNumbers.every((id) => supportedNetworks.includes(id))) {
                     const supportedNetworksErrStr = (supportedNetworks ?? []).toString();
-                    throw new Error(`Unsupported Network: supported networks ${supportedNetworksErrStr}, network: ${chainIdNumber}`);
+                    throw new Error(`Unsupported Network: supported networks ${supportedNetworksErrStr}, requested networks: ${chainIdNumbers.toString()}`);
                 }
                 const result = await (0, multi_chain_accounts_service_1.fetchMultiChainBalances)(address, {
-                    networks: [chainIdNumber],
-                });
+                    networks: chainIdNumbers,
+                }, this.platform);
                 return result.balances;
             },
         });
@@ -137,6 +137,7 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
         const { isUnlocked } = this.messagingSystem.call('KeyringController:getState');
         __classPrivateFieldSet(this, _TokenDetectionController_isUnlocked, isUnlocked, "f");
         __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").isAccountsAPIEnabled = useAccountsAPI;
+        __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").platform = platform;
         __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_registerEventListeners).call(this);
     }
     /**
@@ -172,12 +173,12 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
         this.disable();
         __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_stopPolling).call(this);
     }
-    async _executePoll({ networkClientId, address, }) {
+    async _executePoll({ chainIds, address, }) {
         if (!this.isActive) {
             return;
         }
         await this.detectTokens({
-            networkClientId,
+            chainIds,
             selectedAddress: address,
         });
     }
@@ -186,51 +187,35 @@ class TokenDetectionController extends (0, polling_controller_1.StaticIntervalPo
      * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.
      *
      * @param options - Options for token detection.
-     * @param options.networkClientId - The ID of the network client to use.
+     * @param options.chainIds - The chain IDs of the network client to use.
      * @param options.selectedAddress - the selectedAddress against which to detect for token balances.
      */
-    async detectTokens({ networkClientId, selectedAddress, } = {}) {
+    async detectTokens({ chainIds, selectedAddress, } = {}) {
         if (!this.isActive) {
             return;
         }
-        const addressAgainstWhichToDetect = selectedAddress ?? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSelectedAddress).call(this);
-        const { chainId, networkClientId: selectedNetworkClientId } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectChainIdAndNetworkClientId).call(this, networkClientId);
-        const chainIdAgainstWhichToDetect = chainId;
-        const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;
-        if (!(0, assetsUtil_1.isTokenDetectionSupportedForNetwork)(chainIdAgainstWhichToDetect)) {
-            return;
+        const addressToDetect = selectedAddress ?? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSelectedAddress).call(this);
+        const clientNetworks = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectNetworkClientIdByChainId).call(this, chainIds);
+        let supportedNetworks;
+        if (__classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").isAccountsAPIEnabled) {
+            supportedNetworks = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").getSupportedNetworks();
         }
-        if (!__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
-            chainIdAgainstWhichToDetect !== controller_utils_1.ChainId.mainnet) {
-            return;
+        const { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getChainsToDetect).call(this, clientNetworks, supportedNetworks);
+        // Try detecting tokens via Account API first if conditions allow
+        if (supportedNetworks && chainsToDetectUsingAccountAPI.length > 0) {
+            const apiResult = await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_attemptAccountAPIDetection).call(this, chainsToDetectUsingAccountAPI, addressToDetect, supportedNetworks);
+            // If API succeeds and no chains are left for RPC detection, we can return early
+            if (apiResult?.result === 'success' &&
+                chainsToDetectUsingRpc.length === 0) {
+                return;
+            }
+            // If API fails or chainsToDetectUsingRpc still has items, add chains to RPC detection
+            __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addChainsToRpcDetection).call(this, chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI, clientNetworks);
         }
-        const isTokenDetectionInactiveInMainnet = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
-            chainIdAgainstWhichToDetect === controller_utils_1.ChainId.mainnet;
-        const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
-        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, isTokenDetectionInactiveInMainnet
-            ? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this)
-            : tokensChainsCache ?? {}, "f");
-        const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
-            chainId: chainIdAgainstWhichToDetect,
-            selectedAddress: addressAgainstWhichToDetect,
-        });
-        // Attempt Accounts API Detection
-        const accountAPIResult = await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokensViaAPI).call(this, {
-            chainId: chainIdAgainstWhichToDetect,
-            selectedAddress: addressAgainstWhichToDetect,
-            tokenCandidateSlices,
-        });
-        if (accountAPIResult?.result === 'success') {
-            return;
+        // Proceed with RPC detection if there are chains remaining in chainsToDetectUsingRpc
+        if (chainsToDetectUsingRpc.length > 0) {
+            await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_detectTokensUsingRpc).call(this, chainsToDetectUsingRpc, addressToDetect);
         }
-        // Attempt RPC Detection
-        const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) => __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokens).call(this, {
-            tokensSlice,
-            selectedAddress: addressAgainstWhichToDetect,
-            networkClientId: networkClientIdAgainstWhichToDetect,
-            chainId: chainIdAgainstWhichToDetect,
-        }));
-        await Promise.all(tokenDetectionPromises);
     }
 }
 exports.TokenDetectionController = TokenDetectionController;
@@ -279,20 +264,6 @@ _TokenDetectionController_intervalId = new WeakMap(), _TokenDetectionController_
             });
         }
     });
-    this.messagingSystem.subscribe('NetworkController:networkDidChange',
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/no-misused-promises
-    async ({ selectedNetworkClientId }) => {
-        const isNetworkClientIdChanged = __classPrivateFieldGet(this, _TokenDetectionController_networkClientId, "f") !== selectedNetworkClientId;
-        const { chainId: newChainId } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectChainIdAndNetworkClientId).call(this, selectedNetworkClientId);
-        __classPrivateFieldSet(this, _TokenDetectionController_isDetectionEnabledForNetwork, (0, assetsUtil_1.isTokenDetectionSupportedForNetwork)(newChainId), "f");
-        if (isNetworkClientIdChanged && __classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledForNetwork, "f")) {
-            __classPrivateFieldSet(this, _TokenDetectionController_networkClientId, selectedNetworkClientId, "f");
-            await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_restartTokenDetection).call(this, {
-                networkClientId: __classPrivateFieldGet(this, _TokenDetectionController_networkClientId, "f"),
-            });
-        }
-    });
 }, _TokenDetectionController_stopPolling = function _TokenDetectionController_stopPolling() {
     if (__classPrivateFieldGet(this, _TokenDetectionController_intervalId, "f")) {
         clearInterval(__classPrivateFieldGet(this, _TokenDetectionController_intervalId, "f"));
@@ -317,16 +288,26 @@ async function _TokenDetectionController_startPolling() {
     const cleanTokensChainsCache = mapChainIdWithTokenListMap(tokensChainsCache);
     const isEqualValues = (0, lodash_1.isEqual)(cleanTokensChainsCache, cleanPreviousTokensChainsCache);
     return isEqualValues;
-}, _TokenDetectionController_getCorrectChainIdAndNetworkClientId = function _TokenDetectionController_getCorrectChainIdAndNetworkClientId(networkClientId) {
-    if (networkClientId) {
-        const networkConfiguration = this.messagingSystem.call('NetworkController:getNetworkConfigurationByNetworkClientId', networkClientId);
-        if (networkConfiguration) {
-            return {
-                chainId: networkConfiguration.chainId,
-                networkClientId,
-            };
-        }
+}, _TokenDetectionController_getCorrectNetworkClientIdByChainId = function _TokenDetectionController_getCorrectNetworkClientIdByChainId(chainIds) {
+    const { networkConfigurationsByChainId, selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
+    if (!chainIds) {
+        const networkConfiguration = this.messagingSystem.call('NetworkController:getNetworkConfigurationByNetworkClientId', selectedNetworkClientId);
+        return [
+            {
+                chainId: networkConfiguration?.chainId ?? controller_utils_1.ChainId.mainnet,
+                networkClientId: selectedNetworkClientId,
+            },
+        ];
     }
+    return chainIds.map((chainId) => {
+        const configuration = networkConfigurationsByChainId[chainId];
+        return {
+            chainId,
+            networkClientId: configuration.rpcEndpoints[configuration.defaultRpcEndpointIndex]
+                .networkClientId,
+        };
+    });
+}, _TokenDetectionController_getCorrectChainIdAndNetworkClientId = function _TokenDetectionController_getCorrectChainIdAndNetworkClientId() {
     const { selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     return {
@@ -340,14 +321,76 @@ async function _TokenDetectionController_startPolling() {
  *
  * @param options - Options for restart token detection.
  * @param options.selectedAddress - the selectedAddress against which to detect for token balances
- * @param options.networkClientId - The ID of the network client to use.
+ * @param options.chainIds - The chain IDs of the network client to use.
  */
-async function _TokenDetectionController_restartTokenDetection({ selectedAddress, networkClientId, } = {}) {
+async function _TokenDetectionController_restartTokenDetection({ selectedAddress, chainIds, } = {}) {
     await this.detectTokens({
-        networkClientId,
+        chainIds,
         selectedAddress,
     });
     this.setIntervalLength(DEFAULT_INTERVAL);
+}, _TokenDetectionController_getChainsToDetect = function _TokenDetectionController_getChainsToDetect(clientNetworks, supportedNetworks) {
+    const chainsToDetectUsingAccountAPI = [];
+    const chainsToDetectUsingRpc = [];
+    clientNetworks.forEach(({ chainId, networkClientId }) => {
+        if (supportedNetworks?.includes((0, utils_1.hexToNumber)(chainId))) {
+            chainsToDetectUsingAccountAPI.push(chainId);
+        }
+        else {
+            chainsToDetectUsingRpc.push({ chainId, networkClientId });
+        }
+    });
+    return { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI };
+}, _TokenDetectionController_attemptAccountAPIDetection = async function _TokenDetectionController_attemptAccountAPIDetection(chainsToDetectUsingAccountAPI, addressToDetect, supportedNetworks) {
+    return await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokensViaAPI).call(this, {
+        chainIds: chainsToDetectUsingAccountAPI,
+        selectedAddress: addressToDetect,
+        supportedNetworks,
+    });
+}, _TokenDetectionController_addChainsToRpcDetection = function _TokenDetectionController_addChainsToRpcDetection(chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI, clientNetworks) {
+    chainsToDetectUsingAccountAPI.forEach((chainId) => {
+        const networkEntry = clientNetworks.find((network) => network.chainId === chainId);
+        if (networkEntry) {
+            chainsToDetectUsingRpc.push({
+                chainId: networkEntry.chainId,
+                networkClientId: networkEntry.networkClientId,
+            });
+        }
+    });
+}, _TokenDetectionController_shouldDetectTokens = function _TokenDetectionController_shouldDetectTokens(chainId) {
+    if (!(0, assetsUtil_1.isTokenDetectionSupportedForNetwork)(chainId)) {
+        return false;
+    }
+    if (!__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
+        chainId !== controller_utils_1.ChainId.mainnet) {
+        return false;
+    }
+    const isMainnetDetectionInactive = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") && chainId === controller_utils_1.ChainId.mainnet;
+    if (isMainnetDetectionInactive) {
+        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this), "f");
+    }
+    else {
+        const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
+        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, tokensChainsCache ?? {}, "f");
+    }
+    return true;
+}, _TokenDetectionController_detectTokensUsingRpc = async function _TokenDetectionController_detectTokensUsingRpc(chainsToDetectUsingRpc, addressToDetect) {
+    for (const { chainId, networkClientId } of chainsToDetectUsingRpc) {
+        if (!__classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_shouldDetectTokens).call(this, chainId)) {
+            continue;
+        }
+        const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
+            chainId,
+            selectedAddress: addressToDetect,
+        });
+        const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) => __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokens).call(this, {
+            tokensSlice,
+            selectedAddress: addressToDetect,
+            networkClientId,
+            chainId,
+        }));
+        await Promise.all(tokenDetectionPromises);
+    }
 }, _TokenDetectionController_getSlicesOfTokensToDetect = function _TokenDetectionController_getSlicesOfTokensToDetect({ chainId, selectedAddress, }) {
     const { allTokens, allDetectedTokens, allIgnoredTokens } = this.messagingSystem.call('TokensController:getState');
     const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [
@@ -393,68 +436,92 @@ async function _TokenDetectionController_restartTokenDetection({ selectedAddress
  * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances
  * @param options - method arguments
  * @param options.selectedAddress - address to check against
- * @param options.chainId - chainId to check tokens for
- * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).
- * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.
- * It will also prevent us to adding tokens a user already has
+ * @param options.chainIds - array of chainIds to check tokens for
+ * @param options.supportedNetworks - array of chainIds to check tokens for
  * @returns a success or failed object
  */
-async function _TokenDetectionController_addDetectedTokensViaAPI({ selectedAddress, chainId, tokenCandidateSlices, }) {
+async function _TokenDetectionController_addDetectedTokensViaAPI({ selectedAddress, chainIds, supportedNetworks, }) {
     return await (0, controller_utils_1.safelyExecute)(async () => {
-        const tokenBalances = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f")
-            .getMultiChainBalances(selectedAddress, chainId)
+        // Fetch balances for multiple chain IDs at once
+        const tokenBalancesByChain = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f")
+            .getMultiNetworksBalances(selectedAddress, chainIds, supportedNetworks)
             .catch(() => null);
-        if (!tokenBalances || tokenBalances.length === 0) {
+        if (!tokenBalancesByChain ||
+            Object.keys(tokenBalancesByChain).length === 0) {
             return { result: 'failed' };
         }
-        const tokensWithBalance = [];
-        const eventTokensDetails = [];
-        const tokenCandidateSet = new Set(tokenCandidateSlices.flat());
-        tokenBalances.forEach((token) => {
-            const tokenAddress = token.address;
-            // Make sure that the token to add is in our candidate list
-            // Ensures we don't add tokens we already own
-            if (!tokenCandidateSet.has(token.address)) {
-                return;
-            }
-            // We need specific data from tokensChainsCache to correctly create a token
-            // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.
-            if (!__classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId].data[token.address]) {
-                return;
-            }
-            const { decimals, symbol, aggregators, iconUrl, name } = __classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId].data[token.address];
-            eventTokensDetails.push(`${symbol} - ${tokenAddress}`);
-            tokensWithBalance.push({
-                address: tokenAddress,
-                decimals,
-                symbol,
-                aggregators,
-                image: iconUrl,
-                isERC721: false,
-                name,
-            });
-        });
-        if (tokensWithBalance.length) {
-            __classPrivateFieldGet(this, _TokenDetectionController_trackMetaMetricsEvent, "f").call(this, {
-                event: 'Token Detected',
-                category: 'Wallet',
-                properties: {
-                    tokens: eventTokensDetails,
-                    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-                    // eslint-disable-next-line @typescript-eslint/naming-convention
-                    token_standard: controller_utils_1.ERC20,
-                    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-                    // eslint-disable-next-line @typescript-eslint/naming-convention
-                    asset_type: controller_utils_1.ASSET_TYPES.TOKEN,
-                },
-            });
-            await this.messagingSystem.call('TokensController:addDetectedTokens', tokensWithBalance, {
-                selectedAddress,
+        // Process each chain ID individually
+        for (const chainId of chainIds) {
+            const isTokenDetectionInactiveInMainnet = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
+                chainId === controller_utils_1.ChainId.mainnet;
+            const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
+            __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, isTokenDetectionInactiveInMainnet
+                ? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this)
+                : tokensChainsCache ?? {}, "f");
+            // Generate token candidates based on chainId and selectedAddress
+            const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
                 chainId,
+                selectedAddress,
             });
+            // Filter balances for the current chainId
+            const tokenBalances = tokenBalancesByChain.filter((balance) => balance.chainId === (0, utils_1.hexToNumber)(chainId));
+            if (!tokenBalances || tokenBalances.length === 0) {
+                continue;
+            }
+            // Use helper function to filter tokens with balance for this chainId
+            const { tokensWithBalance, eventTokensDetails } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_filterAndBuildTokensWithBalance).call(this, tokenCandidateSlices, tokenBalances, chainId);
+            if (tokensWithBalance.length) {
+                __classPrivateFieldGet(this, _TokenDetectionController_trackMetaMetricsEvent, "f").call(this, {
+                    event: 'Token Detected',
+                    category: 'Wallet',
+                    properties: {
+                        tokens: eventTokensDetails,
+                        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+                        // eslint-disable-next-line @typescript-eslint/naming-convention
+                        token_standard: controller_utils_1.ERC20,
+                        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+                        // eslint-disable-next-line @typescript-eslint/naming-convention
+                        asset_type: controller_utils_1.ASSET_TYPES.TOKEN,
+                    },
+                });
+                await this.messagingSystem.call('TokensController:addDetectedTokens', tokensWithBalance, {
+                    selectedAddress,
+                    chainId,
+                });
+            }
         }
         return { result: 'success' };
     });
+}, _TokenDetectionController_filterAndBuildTokensWithBalance = function _TokenDetectionController_filterAndBuildTokensWithBalance(tokenCandidateSlices, tokenBalances, chainId) {
+    const tokensWithBalance = [];
+    const eventTokensDetails = [];
+    const tokenCandidateSet = new Set(tokenCandidateSlices.flat());
+    tokenBalances?.forEach((token) => {
+        const tokenAddress = token.address;
+        // Make sure the token to add is in our candidate list
+        if (!tokenCandidateSet.has(tokenAddress)) {
+            return;
+        }
+        // Retrieve token data from cache to safely add it
+        const tokenData = __classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId]?.data[tokenAddress];
+        // We need specific data from tokensChainsCache to correctly create a token
+        // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.
+        if (!tokenData) {
+            return;
+        }
+        const { decimals, symbol, aggregators, iconUrl, name } = tokenData;
+        eventTokensDetails.push(`${symbol} - ${tokenAddress}`);
+        tokensWithBalance.push({
+            address: tokenAddress,
+            decimals,
+            symbol,
+            aggregators,
+            image: iconUrl,
+            isERC721: false,
+            name,
+        });
+    });
+    return { tokensWithBalance, eventTokensDetails };
 }, _TokenDetectionController_addDetectedTokens = async function _TokenDetectionController_addDetectedTokens({ tokensSlice, selectedAddress, networkClientId, chainId, }) {
     await (0, controller_utils_1.safelyExecute)(async () => {
         const balances = await __classPrivateFieldGet(this, _TokenDetectionController_getBalancesInSingleCall, "f").call(this, selectedAddress, tokensSlice, networkClientId);
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs.map b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs.map
index 4da41c1..19f9a42 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenDetectionController.cjs","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerGetAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport {\n  ASSET_TYPES,\n  ChainId,\n  ERC20,\n  safelyExecute,\n  isEqualCaseInsensitive,\n} from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { hexToNumber } from '@metamask/utils';\nimport { isEqual, mapValues, isObject, get } from 'lodash';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport {\n  fetchMultiChainBalances,\n  fetchSupportedNetworks,\n} from './multi-chain-accounts-service';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n  TokensChainsCache,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\n/**\n * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.\n * @param tokensChainsCache - TokensChainsCache input object\n * @returns returns the map of chainId with TokenListMap\n */\nfunction mapChainIdWithTokenListMap(tokensChainsCache: TokensChainsCache) {\n  return mapValues(tokensChainsCache, (value) => {\n    if (isObject(value) && 'data' in value) {\n      return get(value, ['data']);\n    }\n    return value;\n  });\n}\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AccountsControllerGetAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedEvmAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/** The input to start polling for the {@link TokenDetectionController} */\ntype TokenDetectionPollingInput = {\n  networkClientId: NetworkClientId;\n  address: string;\n};\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<TokenDetectionPollingInput>()<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAccountId: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokensChainsCache: TokensChainsCache = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      token_standard: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      asset_type: string;\n    };\n  }) => void;\n\n  #accountsAPI = {\n    isAccountsAPIEnabled: true,\n    supportedNetworksCache: null as number[] | null,\n    async getSupportedNetworks() {\n      /* istanbul ignore next */\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      /* istanbul ignore next */\n      if (this.supportedNetworksCache) {\n        return this.supportedNetworksCache;\n      }\n\n      const result = await fetchSupportedNetworks().catch(() => null);\n      this.supportedNetworksCache = result;\n      return result;\n    },\n\n    async getMultiChainBalances(address: string, chainId: Hex) {\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      const chainIdNumber = hexToNumber(chainId);\n      const supportedNetworks = await this.getSupportedNetworks();\n\n      if (!supportedNetworks || !supportedNetworks.includes(chainIdNumber)) {\n        const supportedNetworksErrStr = (supportedNetworks ?? []).toString();\n        throw new Error(\n          `Unsupported Network: supported networks ${supportedNetworksErrStr}, network: ${chainIdNumber}`,\n        );\n      }\n\n      const result = await fetchMultiChainBalances(address, {\n        networks: [chainIdNumber],\n      });\n\n      return result.balances;\n    },\n  };\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n    useAccountsAPI = true,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        token_standard: string;\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n    useAccountsAPI?: boolean;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokensChainsCache = tokensChainsCache;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#accountsAPI.isAccountsAPIEnabled = useAccountsAPI;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ tokensChainsCache }) => {\n        const isEqualValues = this.#compareTokensChainsCache(\n          tokensChainsCache,\n          this.#tokensChainsCache,\n        );\n        if (!isEqualValues) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ useTokenDetection }) => {\n        const selectedAccount = this.#getSelectedAccount();\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedEvmAccountChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async (selectedAccount) => {\n        const isSelectedAccountIdChanged =\n          this.#selectedAccountId !== selectedAccount.id;\n        if (isSelectedAccountIdChanged) {\n          this.#selectedAccountId = selectedAccount.id;\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  /**\n   * Compares current and previous tokensChainsCache object focusing only on the data object.\n   * @param tokensChainsCache - current tokensChainsCache input object\n   * @param previousTokensChainsCache - previous tokensChainsCache input object\n   * @returns boolean indicating if the two objects are equal\n   */\n\n  #compareTokensChainsCache(\n    tokensChainsCache: TokensChainsCache,\n    previousTokensChainsCache: TokensChainsCache,\n  ): boolean {\n    const cleanPreviousTokensChainsCache = mapChainIdWithTokenListMap(\n      previousTokensChainsCache,\n    );\n    const cleanTokensChainsCache =\n      mapChainIdWithTokenListMap(tokensChainsCache);\n    const isEqualValues = isEqual(\n      cleanTokensChainsCache,\n      cleanPreviousTokensChainsCache,\n    );\n    return isEqualValues;\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll({\n    networkClientId,\n    address,\n  }: TokenDetectionPollingInput): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#getSelectedAddress();\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokensChainsCache = isTokenDetectionInactiveInMainnet\n      ? this.#getConvertedStaticMainnetTokenList()\n      : tokensChainsCache ?? {};\n\n    const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    });\n\n    // Attempt Accounts API Detection\n    const accountAPIResult = await this.#addDetectedTokensViaAPI({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n      tokenCandidateSlices,\n    });\n    if (accountAPIResult?.result === 'success') {\n      return;\n    }\n\n    // Attempt RPC Detection\n    const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) =>\n      this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      }),\n    );\n\n    await Promise.all(tokenDetectionPromises);\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(\n      this.#tokensChainsCache?.[chainId]?.data || {},\n    )) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  #getConvertedStaticMainnetTokenList(): TokensChainsCache {\n    const data: TokenListMap = Object.entries(STATIC_MAINNET_TOKEN_LIST).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: {\n          name: value.name,\n          symbol: value.symbol,\n          decimals: value.decimals,\n          address: value.address,\n          aggregators: [],\n          iconUrl: value?.iconUrl,\n        },\n      }),\n      {},\n    );\n    return {\n      '0x1': {\n        data,\n        timestamp: 0,\n      },\n    };\n  }\n\n  /**\n   * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances\n   * @param options - method arguments\n   * @param options.selectedAddress - address to check against\n   * @param options.chainId - chainId to check tokens for\n   * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).\n   * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.\n   * It will also prevent us to adding tokens a user already has\n   * @returns a success or failed object\n   */\n  async #addDetectedTokensViaAPI({\n    selectedAddress,\n    chainId,\n    tokenCandidateSlices,\n  }: {\n    selectedAddress: string;\n    chainId: Hex;\n    tokenCandidateSlices: string[][];\n  }) {\n    return await safelyExecute(async () => {\n      const tokenBalances = await this.#accountsAPI\n        .getMultiChainBalances(selectedAddress, chainId)\n        .catch(() => null);\n\n      if (!tokenBalances || tokenBalances.length === 0) {\n        return { result: 'failed' } as const;\n      }\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n\n      const tokenCandidateSet = new Set<string>(tokenCandidateSlices.flat());\n\n      tokenBalances.forEach((token) => {\n        const tokenAddress = token.address;\n\n        // Make sure that the token to add is in our candidate list\n        // Ensures we don't add tokens we already own\n        if (!tokenCandidateSet.has(token.address)) {\n          return;\n        }\n\n        // We need specific data from tokensChainsCache to correctly create a token\n        // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.\n        if (!this.#tokensChainsCache[chainId].data[token.address]) {\n          return;\n        }\n\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[token.address];\n        eventTokensDetails.push(`${symbol} - ${tokenAddress}`);\n        tokensWithBalance.push({\n          address: tokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      });\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n\n      return { result: 'success' } as const;\n    });\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #getSelectedAddress() {\n    // If the address is not defined (or empty), we fallback to the currently selected account's address\n    const account = this.messagingSystem.call(\n      'AccountsController:getAccount',\n      this.#selectedAccountId,\n    );\n    return account?.address || '';\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenDetectionController.cjs","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerGetAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport {\n  ASSET_TYPES,\n  ChainId,\n  ERC20,\n  safelyExecute,\n  isEqualCaseInsensitive,\n} from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { hexToNumber } from '@metamask/utils';\nimport { isEqual, mapValues, isObject, get } from 'lodash';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport {\n  fetchMultiChainBalances,\n  fetchSupportedNetworks,\n} from './multi-chain-accounts-service';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n  TokensChainsCache,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\ntype NetworkClient = {\n  chainId: Hex;\n  networkClientId: string;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\n/**\n * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.\n * @param tokensChainsCache - TokensChainsCache input object\n * @returns returns the map of chainId with TokenListMap\n */\nexport function mapChainIdWithTokenListMap(\n  tokensChainsCache: TokensChainsCache,\n) {\n  return mapValues(tokensChainsCache, (value) => {\n    if (isObject(value) && 'data' in value) {\n      return get(value, ['data']);\n    }\n    return value;\n  });\n}\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AccountsControllerGetAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedEvmAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/** The input to start polling for the {@link TokenDetectionController} */\ntype TokenDetectionPollingInput = {\n  chainIds: Hex[];\n  address: string;\n};\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<TokenDetectionPollingInput>()<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAccountId: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokensChainsCache: TokensChainsCache = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      token_standard: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      asset_type: string;\n    };\n  }) => void;\n\n  #accountsAPI = {\n    isAccountsAPIEnabled: true,\n    supportedNetworksCache: null as number[] | null,\n    platform: '' as 'extension' | 'mobile',\n\n    async getSupportedNetworks() {\n      /* istanbul ignore next */\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      /* istanbul ignore next */\n      if (this.supportedNetworksCache) {\n        return this.supportedNetworksCache;\n      }\n\n      const result = await fetchSupportedNetworks().catch(() => null);\n      this.supportedNetworksCache = result;\n      return result;\n    },\n\n    async getMultiNetworksBalances(\n      address: string,\n      chainIds: Hex[],\n      supportedNetworks: number[] | null,\n    ) {\n      const chainIdNumbers = chainIds.map((chainId) => hexToNumber(chainId));\n\n      if (\n        !supportedNetworks ||\n        !chainIdNumbers.every((id) => supportedNetworks.includes(id))\n      ) {\n        const supportedNetworksErrStr = (supportedNetworks ?? []).toString();\n        throw new Error(\n          `Unsupported Network: supported networks ${supportedNetworksErrStr}, requested networks: ${chainIdNumbers.toString()}`,\n        );\n      }\n\n      const result = await fetchMultiChainBalances(\n        address,\n        {\n          networks: chainIdNumbers,\n        },\n        this.platform,\n      );\n\n      return result.balances;\n    },\n  };\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)\n   * @param options.platform - Indicates whether the platform is extension or mobile\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n    useAccountsAPI = true,\n    platform,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        token_standard: string;\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n    useAccountsAPI?: boolean;\n    platform: 'extension' | 'mobile';\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n\n    this.#tokensChainsCache = tokensChainsCache;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#accountsAPI.isAccountsAPIEnabled = useAccountsAPI;\n    this.#accountsAPI.platform = platform;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ tokensChainsCache }) => {\n        const isEqualValues = this.#compareTokensChainsCache(\n          tokensChainsCache,\n          this.#tokensChainsCache,\n        );\n        if (!isEqualValues) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ useTokenDetection }) => {\n        const selectedAccount = this.#getSelectedAccount();\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedEvmAccountChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async (selectedAccount) => {\n        const isSelectedAccountIdChanged =\n          this.#selectedAccountId !== selectedAccount.id;\n        if (isSelectedAccountIdChanged) {\n          this.#selectedAccountId = selectedAccount.id;\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  /**\n   * Compares current and previous tokensChainsCache object focusing only on the data object.\n   * @param tokensChainsCache - current tokensChainsCache input object\n   * @param previousTokensChainsCache - previous tokensChainsCache input object\n   * @returns boolean indicating if the two objects are equal\n   */\n\n  #compareTokensChainsCache(\n    tokensChainsCache: TokensChainsCache,\n    previousTokensChainsCache: TokensChainsCache,\n  ): boolean {\n    const cleanPreviousTokensChainsCache = mapChainIdWithTokenListMap(\n      previousTokensChainsCache,\n    );\n    const cleanTokensChainsCache =\n      mapChainIdWithTokenListMap(tokensChainsCache);\n    const isEqualValues = isEqual(\n      cleanTokensChainsCache,\n      cleanPreviousTokensChainsCache,\n    );\n    return isEqualValues;\n  }\n\n  #getCorrectNetworkClientIdByChainId(\n    chainIds: Hex[] | undefined,\n  ): { chainId: Hex; networkClientId: NetworkClientId }[] {\n    const { networkConfigurationsByChainId, selectedNetworkClientId } =\n      this.messagingSystem.call('NetworkController:getState');\n\n    if (!chainIds) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        selectedNetworkClientId,\n      );\n\n      return [\n        {\n          chainId: networkConfiguration?.chainId ?? ChainId.mainnet,\n          networkClientId: selectedNetworkClientId,\n        },\n      ];\n    }\n\n    return chainIds.map((chainId) => {\n      const configuration = networkConfigurationsByChainId[chainId];\n      return {\n        chainId,\n        networkClientId:\n          configuration.rpcEndpoints[configuration.defaultRpcEndpointIndex]\n            .networkClientId,\n      };\n    });\n  }\n\n  #getCorrectChainIdAndNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll({\n    chainIds,\n    address,\n  }: TokenDetectionPollingInput): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      chainIds,\n      selectedAddress: address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.chainIds - The chain IDs of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    chainIds,\n  }: {\n    selectedAddress?: string;\n    chainIds?: Hex[];\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      chainIds,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  #getChainsToDetect(\n    clientNetworks: NetworkClient[],\n    supportedNetworks: number[] | null | undefined,\n  ) {\n    const chainsToDetectUsingAccountAPI: Hex[] = [];\n    const chainsToDetectUsingRpc: NetworkClient[] = [];\n\n    clientNetworks.forEach(({ chainId, networkClientId }) => {\n      if (supportedNetworks?.includes(hexToNumber(chainId))) {\n        chainsToDetectUsingAccountAPI.push(chainId);\n      } else {\n        chainsToDetectUsingRpc.push({ chainId, networkClientId });\n      }\n    });\n\n    return { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI };\n  }\n\n  async #attemptAccountAPIDetection(\n    chainsToDetectUsingAccountAPI: Hex[],\n    addressToDetect: string,\n    supportedNetworks: number[] | null,\n  ) {\n    return await this.#addDetectedTokensViaAPI({\n      chainIds: chainsToDetectUsingAccountAPI,\n      selectedAddress: addressToDetect,\n      supportedNetworks,\n    });\n  }\n\n  #addChainsToRpcDetection(\n    chainsToDetectUsingRpc: NetworkClient[],\n    chainsToDetectUsingAccountAPI: Hex[],\n    clientNetworks: NetworkClient[],\n  ): void {\n    chainsToDetectUsingAccountAPI.forEach((chainId) => {\n      const networkEntry = clientNetworks.find(\n        (network) => network.chainId === chainId,\n      );\n      if (networkEntry) {\n        chainsToDetectUsingRpc.push({\n          chainId: networkEntry.chainId,\n          networkClientId: networkEntry.networkClientId,\n        });\n      }\n    });\n  }\n\n  #shouldDetectTokens(chainId: Hex): boolean {\n    if (!isTokenDetectionSupportedForNetwork(chainId)) {\n      return false;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainId !== ChainId.mainnet\n    ) {\n      return false;\n    }\n\n    const isMainnetDetectionInactive =\n      !this.#isDetectionEnabledFromPreferences && chainId === ChainId.mainnet;\n    if (isMainnetDetectionInactive) {\n      this.#tokensChainsCache = this.#getConvertedStaticMainnetTokenList();\n    } else {\n      const { tokensChainsCache } = this.messagingSystem.call(\n        'TokenListController:getState',\n      );\n      this.#tokensChainsCache = tokensChainsCache ?? {};\n    }\n\n    return true;\n  }\n\n  async #detectTokensUsingRpc(\n    chainsToDetectUsingRpc: NetworkClient[],\n    addressToDetect: string,\n  ): Promise<void> {\n    for (const { chainId, networkClientId } of chainsToDetectUsingRpc) {\n      if (!this.#shouldDetectTokens(chainId)) {\n        continue;\n      }\n\n      const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n        chainId,\n        selectedAddress: addressToDetect,\n      });\n      const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) =>\n        this.#addDetectedTokens({\n          tokensSlice,\n          selectedAddress: addressToDetect,\n          networkClientId,\n          chainId,\n        }),\n      );\n\n      await Promise.all(tokenDetectionPromises);\n    }\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.chainIds - The chain IDs of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    chainIds,\n    selectedAddress,\n  }: {\n    chainIds?: Hex[];\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressToDetect = selectedAddress ?? this.#getSelectedAddress();\n    const clientNetworks = this.#getCorrectNetworkClientIdByChainId(chainIds);\n\n    let supportedNetworks;\n    if (this.#accountsAPI.isAccountsAPIEnabled) {\n      supportedNetworks = await this.#accountsAPI.getSupportedNetworks();\n    }\n    const { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI } =\n      this.#getChainsToDetect(clientNetworks, supportedNetworks);\n\n    // Try detecting tokens via Account API first if conditions allow\n    if (supportedNetworks && chainsToDetectUsingAccountAPI.length > 0) {\n      const apiResult = await this.#attemptAccountAPIDetection(\n        chainsToDetectUsingAccountAPI,\n        addressToDetect,\n        supportedNetworks,\n      );\n\n      // If API succeeds and no chains are left for RPC detection, we can return early\n      if (\n        apiResult?.result === 'success' &&\n        chainsToDetectUsingRpc.length === 0\n      ) {\n        return;\n      }\n\n      // If API fails or chainsToDetectUsingRpc still has items, add chains to RPC detection\n      this.#addChainsToRpcDetection(\n        chainsToDetectUsingRpc,\n        chainsToDetectUsingAccountAPI,\n        clientNetworks,\n      );\n    }\n\n    // Proceed with RPC detection if there are chains remaining in chainsToDetectUsingRpc\n    if (chainsToDetectUsingRpc.length > 0) {\n      await this.#detectTokensUsingRpc(chainsToDetectUsingRpc, addressToDetect);\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(\n      this.#tokensChainsCache?.[chainId]?.data || {},\n    )) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  #getConvertedStaticMainnetTokenList(): TokensChainsCache {\n    const data: TokenListMap = Object.entries(STATIC_MAINNET_TOKEN_LIST).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: {\n          name: value.name,\n          symbol: value.symbol,\n          decimals: value.decimals,\n          address: value.address,\n          aggregators: [],\n          iconUrl: value?.iconUrl,\n        },\n      }),\n      {},\n    );\n    return {\n      '0x1': {\n        data,\n        timestamp: 0,\n      },\n    };\n  }\n\n  /**\n   * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances\n   * @param options - method arguments\n   * @param options.selectedAddress - address to check against\n   * @param options.chainIds - array of chainIds to check tokens for\n   * @param options.supportedNetworks - array of chainIds to check tokens for\n   * @returns a success or failed object\n   */\n  async #addDetectedTokensViaAPI({\n    selectedAddress,\n    chainIds,\n    supportedNetworks,\n  }: {\n    selectedAddress: string;\n    chainIds: Hex[];\n    supportedNetworks: number[] | null;\n  }) {\n    return await safelyExecute(async () => {\n      // Fetch balances for multiple chain IDs at once\n      const tokenBalancesByChain = await this.#accountsAPI\n        .getMultiNetworksBalances(selectedAddress, chainIds, supportedNetworks)\n        .catch(() => null);\n\n      if (\n        !tokenBalancesByChain ||\n        Object.keys(tokenBalancesByChain).length === 0\n      ) {\n        return { result: 'failed' } as const;\n      }\n\n      // Process each chain ID individually\n      for (const chainId of chainIds) {\n        const isTokenDetectionInactiveInMainnet =\n          !this.#isDetectionEnabledFromPreferences &&\n          chainId === ChainId.mainnet;\n        const { tokensChainsCache } = this.messagingSystem.call(\n          'TokenListController:getState',\n        );\n        this.#tokensChainsCache = isTokenDetectionInactiveInMainnet\n          ? this.#getConvertedStaticMainnetTokenList()\n          : tokensChainsCache ?? {};\n\n        // Generate token candidates based on chainId and selectedAddress\n        const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n          chainId,\n          selectedAddress,\n        });\n\n        // Filter balances for the current chainId\n        const tokenBalances = tokenBalancesByChain.filter(\n          (balance) => balance.chainId === hexToNumber(chainId),\n        );\n\n        if (!tokenBalances || tokenBalances.length === 0) {\n          continue;\n        }\n\n        // Use helper function to filter tokens with balance for this chainId\n        const { tokensWithBalance, eventTokensDetails } =\n          this.#filterAndBuildTokensWithBalance(\n            tokenCandidateSlices,\n            tokenBalances,\n            chainId,\n          );\n\n        if (tokensWithBalance.length) {\n          this.#trackMetaMetricsEvent({\n            event: 'Token Detected',\n            category: 'Wallet',\n            properties: {\n              tokens: eventTokensDetails,\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              token_standard: ERC20,\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              asset_type: ASSET_TYPES.TOKEN,\n            },\n          });\n\n          await this.messagingSystem.call(\n            'TokensController:addDetectedTokens',\n            tokensWithBalance,\n            {\n              selectedAddress,\n              chainId,\n            },\n          );\n        }\n      }\n\n      return { result: 'success' } as const;\n    });\n  }\n\n  /**\n   * Helper function to filter and build token data for detected tokens\n   * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).\n   * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.\n   * It will also prevent us to adding tokens a user already has\n   * @param tokenBalances - Tokens balances fetched from API\n   * @param chainId - The chain ID being processed\n   * @returns an object containing tokensWithBalance and eventTokensDetails arrays\n   */\n\n  #filterAndBuildTokensWithBalance(\n    tokenCandidateSlices: string[][],\n    tokenBalances:\n      | {\n          object: string;\n          type?: string;\n          timestamp?: string;\n          address: string;\n          symbol: string;\n          name: string;\n          decimals: number;\n          chainId: number;\n          balance: string;\n        }[]\n      | null,\n    chainId: Hex,\n  ) {\n    const tokensWithBalance: Token[] = [];\n    const eventTokensDetails: string[] = [];\n\n    const tokenCandidateSet = new Set<string>(tokenCandidateSlices.flat());\n\n    tokenBalances?.forEach((token) => {\n      const tokenAddress = token.address;\n\n      // Make sure the token to add is in our candidate list\n      if (!tokenCandidateSet.has(tokenAddress)) {\n        return;\n      }\n\n      // Retrieve token data from cache to safely add it\n      const tokenData = this.#tokensChainsCache[chainId]?.data[tokenAddress];\n\n      // We need specific data from tokensChainsCache to correctly create a token\n      // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.\n      if (!tokenData) {\n        return;\n      }\n\n      const { decimals, symbol, aggregators, iconUrl, name } = tokenData;\n      eventTokensDetails.push(`${symbol} - ${tokenAddress}`);\n      tokensWithBalance.push({\n        address: tokenAddress,\n        decimals,\n        symbol,\n        aggregators,\n        image: iconUrl,\n        isERC721: false,\n        name,\n      });\n    });\n\n    return { tokensWithBalance, eventTokensDetails };\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #getSelectedAddress() {\n    // If the address is not defined (or empty), we fallback to the currently selected account's address\n    const account = this.messagingSystem.call(\n      'AccountsController:getAccount',\n      this.#selectedAccountId,\n    );\n    return account?.address || '';\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts
index 37d673f..7b0d0ea 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts
@@ -1,15 +1,24 @@
 import type { AccountsControllerGetSelectedAccountAction, AccountsControllerGetAccountAction, AccountsControllerSelectedEvmAccountChangeEvent } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
 import type { KeyringControllerGetStateAction, KeyringControllerLockEvent, KeyringControllerUnlockEvent } from "@metamask/keyring-controller";
-import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetNetworkConfigurationByNetworkClientId, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent } from "@metamask/network-controller";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetNetworkConfigurationByNetworkClientId, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent } from "@metamask/network-controller";
 import type { PreferencesControllerGetStateAction, PreferencesControllerStateChangeEvent } from "@metamask/preferences-controller";
+import type { Hex } from "@metamask/utils";
 import type { AssetsContractController } from "./AssetsContractController.cjs";
-import type { GetTokenListState, TokenListMap, TokenListStateChange } from "./TokenListController.cjs";
+import type { GetTokenListState, TokenListMap, TokenListStateChange, TokensChainsCache } from "./TokenListController.cjs";
 import type { TokensControllerAddDetectedTokensAction, TokensControllerGetStateAction } from "./TokensController.cjs";
 type TokenDetectionMap = {
     [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;
 };
 export declare const STATIC_MAINNET_TOKEN_LIST: TokenDetectionMap;
+/**
+ * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.
+ * @param tokensChainsCache - TokensChainsCache input object
+ * @returns returns the map of chainId with TokenListMap
+ */
+export declare function mapChainIdWithTokenListMap(tokensChainsCache: TokensChainsCache): {
+    [x: `0x${string}`]: TokenListMap;
+};
 export declare const controllerName = "TokenDetectionController";
 export type TokenDetectionState = Record<never, never>;
 export type TokenDetectionControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenDetectionState>;
@@ -21,18 +30,18 @@ export type AllowedEvents = AccountsControllerSelectedEvmAccountChangeEvent | Ne
 export type TokenDetectionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, TokenDetectionControllerActions | AllowedActions, TokenDetectionControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
 /** The input to start polling for the {@link TokenDetectionController} */
 type TokenDetectionPollingInput = {
-    networkClientId: NetworkClientId;
+    chainIds: Hex[];
     address: string;
 };
 declare const TokenDetectionController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenDetectionPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenDetectionPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenDetectionPollingInput) => void>>;
     _executePoll(input: TokenDetectionPollingInput): Promise<void>;
     startPolling(input: TokenDetectionPollingInput): string;
     stopAllPolling(): void;
@@ -61,8 +70,9 @@ export declare class TokenDetectionController extends TokenDetectionController_b
      * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.
      * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.
      * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)
+     * @param options.platform - Indicates whether the platform is extension or mobile
      */
-    constructor({ interval, disabled, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI, }: {
+    constructor({ interval, disabled, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI, platform, }: {
         interval?: number;
         disabled?: boolean;
         getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];
@@ -77,6 +87,7 @@ export declare class TokenDetectionController extends TokenDetectionController_b
         }) => void;
         messenger: TokenDetectionControllerMessenger;
         useAccountsAPI?: boolean;
+        platform: 'extension' | 'mobile';
     });
     /**
      * Allows controller to make active and passive polling requests
@@ -99,17 +110,17 @@ export declare class TokenDetectionController extends TokenDetectionController_b
      * Stop polling for detected tokens.
      */
     stop(): void;
-    _executePoll({ networkClientId, address, }: TokenDetectionPollingInput): Promise<void>;
+    _executePoll({ chainIds, address, }: TokenDetectionPollingInput): Promise<void>;
     /**
      * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.
      * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.
      *
      * @param options - Options for token detection.
-     * @param options.networkClientId - The ID of the network client to use.
+     * @param options.chainIds - The chain IDs of the network client to use.
      * @param options.selectedAddress - the selectedAddress against which to detect for token balances.
      */
-    detectTokens({ networkClientId, selectedAddress, }?: {
-        networkClientId?: NetworkClientId;
+    detectTokens({ chainIds, selectedAddress, }?: {
+        chainIds?: Hex[];
         selectedAddress?: string;
     }): Promise<void>;
 }
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts.map b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts.map
index 1fb31f1..27cd894 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenDetectionController.d.cts","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TokenDetectionController.d.cts","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,0CAA0C,EAC1C,kCAAkC,EAClC,+CAA+C,EAChD,sCAAsC;AACvC,OAAO,KAAK,EACV,6BAA6B,EAC7B,wBAAwB,EACxB,0BAA0B,EAC3B,kCAAkC;AASnC,OAAO,KAAK,EACV,+BAA+B,EAC/B,0BAA0B,EAC1B,4BAA4B,EAC7B,qCAAqC;AACtC,OAAO,KAAK,EAEV,2CAA2C,EAC3C,yDAAyD,EACzD,+BAA+B,EAC/B,sCAAsC,EACvC,qCAAqC;AAEtC,OAAO,KAAK,EACV,mCAAmC,EACnC,qCAAqC,EACtC,yCAAyC;AAC1C,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAI3C,OAAO,KAAK,EAAE,wBAAwB,EAAE,uCAAmC;AAM3E,OAAO,KAAK,EACV,iBAAiB,EACjB,YAAY,EACZ,oBAAoB,EACpB,iBAAiB,EAClB,kCAA8B;AAE/B,OAAO,KAAK,EACV,uCAAuC,EACvC,8BAA8B,EAC/B,+BAA2B;AAa5B,KAAK,iBAAiB,GAAG;KACtB,CAAC,IAAI,MAAM,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC;CAChE,CAAC;AAOF,eAAO,MAAM,yBAAyB,mBAahC,CAAC;AAEP;;;;GAIG;AACH,wBAAgB,0BAA0B,CACxC,iBAAiB,EAAE,iBAAiB;;EAQrC;AAED,eAAO,MAAM,cAAc,6BAA6B,CAAC;AAEzD,MAAM,MAAM,mBAAmB,GAAG,MAAM,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAEvD,MAAM,MAAM,sCAAsC,GAAG,wBAAwB,CAC3E,OAAO,cAAc,EACrB,mBAAmB,CACpB,CAAC;AAEF,MAAM,MAAM,+BAA+B,GACzC,sCAAsC,CAAC;AAEzC,MAAM,MAAM,cAAc,GACtB,0CAA0C,GAC1C,kCAAkC,GAClC,2CAA2C,GAC3C,yDAAyD,GACzD,+BAA+B,GAC/B,iBAAiB,GACjB,+BAA+B,GAC/B,mCAAmC,GACnC,8BAA8B,GAC9B,uCAAuC,CAAC;AAE5C,MAAM,MAAM,wCAAwC,GAClD,0BAA0B,CAAC,OAAO,cAAc,EAAE,mBAAmB,CAAC,CAAC;AAEzE,MAAM,MAAM,8BAA8B,GACxC,wCAAwC,CAAC;AAE3C,MAAM,MAAM,aAAa,GACrB,+CAA+C,GAC/C,sCAAsC,GACtC,oBAAoB,GACpB,0BAA0B,GAC1B,4BAA4B,GAC5B,qCAAqC,CAAC;AAE1C,MAAM,MAAM,iCAAiC,GAAG,6BAA6B,CAC3E,OAAO,cAAc,EACrB,+BAA+B,GAAG,cAAc,EAChD,8BAA8B,GAAG,aAAa,EAC9C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAEF,0EAA0E;AAC1E,KAAK,0BAA0B,GAAG;IAChC,QAAQ,EAAE,GAAG,EAAE,CAAC;IAChB,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;;;;;;;;;;;;;;;;AAEF;;;;;;;;;GASG;AACH,qBAAa,wBAAyB,SAAQ,8BAC5C,OAAO,cAAc,EACrB,mBAAmB,EACnB,iCAAiC,CAClC;;IAmFC;;;;;;;;;;;OAWG;gBACS,EACV,QAA2B,EAC3B,QAAe,EACf,uBAAuB,EACvB,qBAAqB,EACrB,SAAS,EACT,cAAqB,EACrB,QAAQ,GACT,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAE,OAAO,CAAC;QACnB,uBAAuB,EAAE,wBAAwB,CAAC,yBAAyB,CAAC,CAAC;QAC7E,qBAAqB,EAAE,CAAC,OAAO,EAAE;YAC/B,KAAK,EAAE,MAAM,CAAC;YACd,QAAQ,EAAE,MAAM,CAAC;YACjB,UAAU,EAAE;gBACV,MAAM,EAAE,MAAM,EAAE,CAAC;gBAGjB,cAAc,EAAE,MAAM,CAAC;gBAGvB,UAAU,EAAE,MAAM,CAAC;aACpB,CAAC;SACH,KAAK,IAAI,CAAC;QACX,SAAS,EAAE,iCAAiC,CAAC;QAC7C,cAAc,CAAC,EAAE,OAAO,CAAC;QACzB,QAAQ,EAAE,WAAW,GAAG,QAAQ,CAAC;KAClC;IA+GD;;OAEG;IACH,MAAM,IAAI,IAAI;IAId;;OAEG;IACH,OAAO,IAAI,IAAI;IAIf;;;OAGG;IACH,IAAI,QAAQ,IAAI,OAAO,CAEtB;IAED;;OAEG;IACG,KAAK,IAAI,OAAO,CAAC,IAAI,CAAC;IAK5B;;OAEG;IACH,IAAI,IAAI,IAAI;IAiGN,YAAY,CAAC,EACjB,QAAQ,EACR,OAAO,GACR,EAAE,0BAA0B,GAAG,OAAO,CAAC,IAAI,CAAC;IAmI7C;;;;;;;OAOG;IACG,YAAY,CAAC,EACjB,QAAQ,EACR,eAAe,GAChB,GAAE;QACD,QAAQ,CAAC,EAAE,GAAG,EAAE,CAAC;QACjB,eAAe,CAAC,EAAE,MAAM,CAAC;KACrB,GAAG,OAAO,CAAC,IAAI,CAAC;CA6VvB;AAED,eAAe,wBAAwB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts
index b6a8b88..3c17043 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts
@@ -1,15 +1,24 @@
 import type { AccountsControllerGetSelectedAccountAction, AccountsControllerGetAccountAction, AccountsControllerSelectedEvmAccountChangeEvent } from "@metamask/accounts-controller";
 import type { RestrictedControllerMessenger, ControllerGetStateAction, ControllerStateChangeEvent } from "@metamask/base-controller";
 import type { KeyringControllerGetStateAction, KeyringControllerLockEvent, KeyringControllerUnlockEvent } from "@metamask/keyring-controller";
-import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetNetworkConfigurationByNetworkClientId, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent } from "@metamask/network-controller";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetNetworkConfigurationByNetworkClientId, NetworkControllerGetStateAction, NetworkControllerNetworkDidChangeEvent } from "@metamask/network-controller";
 import type { PreferencesControllerGetStateAction, PreferencesControllerStateChangeEvent } from "@metamask/preferences-controller";
+import type { Hex } from "@metamask/utils";
 import type { AssetsContractController } from "./AssetsContractController.mjs";
-import type { GetTokenListState, TokenListMap, TokenListStateChange } from "./TokenListController.mjs";
+import type { GetTokenListState, TokenListMap, TokenListStateChange, TokensChainsCache } from "./TokenListController.mjs";
 import type { TokensControllerAddDetectedTokensAction, TokensControllerGetStateAction } from "./TokensController.mjs";
 type TokenDetectionMap = {
     [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;
 };
 export declare const STATIC_MAINNET_TOKEN_LIST: TokenDetectionMap;
+/**
+ * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.
+ * @param tokensChainsCache - TokensChainsCache input object
+ * @returns returns the map of chainId with TokenListMap
+ */
+export declare function mapChainIdWithTokenListMap(tokensChainsCache: TokensChainsCache): {
+    [x: `0x${string}`]: TokenListMap;
+};
 export declare const controllerName = "TokenDetectionController";
 export type TokenDetectionState = Record<never, never>;
 export type TokenDetectionControllerGetStateAction = ControllerGetStateAction<typeof controllerName, TokenDetectionState>;
@@ -21,18 +30,18 @@ export type AllowedEvents = AccountsControllerSelectedEvmAccountChangeEvent | Ne
 export type TokenDetectionControllerMessenger = RestrictedControllerMessenger<typeof controllerName, TokenDetectionControllerActions | AllowedActions, TokenDetectionControllerEvents | AllowedEvents, AllowedActions['type'], AllowedEvents['type']>;
 /** The input to start polling for the {@link TokenDetectionController} */
 type TokenDetectionPollingInput = {
-    networkClientId: NetworkClientId;
+    chainIds: Hex[];
     address: string;
 };
 declare const TokenDetectionController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenDetectionPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenDetectionPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenDetectionPollingInput) => void>>;
     _executePoll(input: TokenDetectionPollingInput): Promise<void>;
     startPolling(input: TokenDetectionPollingInput): string;
     stopAllPolling(): void;
@@ -61,8 +70,9 @@ export declare class TokenDetectionController extends TokenDetectionController_b
      * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.
      * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.
      * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)
+     * @param options.platform - Indicates whether the platform is extension or mobile
      */
-    constructor({ interval, disabled, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI, }: {
+    constructor({ interval, disabled, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI, platform, }: {
         interval?: number;
         disabled?: boolean;
         getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];
@@ -77,6 +87,7 @@ export declare class TokenDetectionController extends TokenDetectionController_b
         }) => void;
         messenger: TokenDetectionControllerMessenger;
         useAccountsAPI?: boolean;
+        platform: 'extension' | 'mobile';
     });
     /**
      * Allows controller to make active and passive polling requests
@@ -99,17 +110,17 @@ export declare class TokenDetectionController extends TokenDetectionController_b
      * Stop polling for detected tokens.
      */
     stop(): void;
-    _executePoll({ networkClientId, address, }: TokenDetectionPollingInput): Promise<void>;
+    _executePoll({ chainIds, address, }: TokenDetectionPollingInput): Promise<void>;
     /**
      * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.
      * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.
      *
      * @param options - Options for token detection.
-     * @param options.networkClientId - The ID of the network client to use.
+     * @param options.chainIds - The chain IDs of the network client to use.
      * @param options.selectedAddress - the selectedAddress against which to detect for token balances.
      */
-    detectTokens({ networkClientId, selectedAddress, }?: {
-        networkClientId?: NetworkClientId;
+    detectTokens({ chainIds, selectedAddress, }?: {
+        chainIds?: Hex[];
         selectedAddress?: string;
     }): Promise<void>;
 }
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts.map b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts.map
index 1f37131..6ae46b3 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenDetectionController.d.mts","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TokenDetectionController.d.mts","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
index f479406..f75eb5c 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs
@@ -9,7 +9,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _TokenDetectionController_instances, _TokenDetectionController_intervalId, _TokenDetectionController_selectedAccountId, _TokenDetectionController_networkClientId, _TokenDetectionController_tokensChainsCache, _TokenDetectionController_disabled, _TokenDetectionController_isUnlocked, _TokenDetectionController_isDetectionEnabledFromPreferences, _TokenDetectionController_isDetectionEnabledForNetwork, _TokenDetectionController_getBalancesInSingleCall, _TokenDetectionController_trackMetaMetricsEvent, _TokenDetectionController_accountsAPI, _TokenDetectionController_registerEventListeners, _TokenDetectionController_stopPolling, _TokenDetectionController_startPolling, _TokenDetectionController_compareTokensChainsCache, _TokenDetectionController_getCorrectChainIdAndNetworkClientId, _TokenDetectionController_restartTokenDetection, _TokenDetectionController_getSlicesOfTokensToDetect, _TokenDetectionController_getConvertedStaticMainnetTokenList, _TokenDetectionController_addDetectedTokensViaAPI, _TokenDetectionController_addDetectedTokens, _TokenDetectionController_getSelectedAccount, _TokenDetectionController_getSelectedAddress;
+var _TokenDetectionController_instances, _TokenDetectionController_intervalId, _TokenDetectionController_selectedAccountId, _TokenDetectionController_networkClientId, _TokenDetectionController_tokensChainsCache, _TokenDetectionController_disabled, _TokenDetectionController_isUnlocked, _TokenDetectionController_isDetectionEnabledFromPreferences, _TokenDetectionController_isDetectionEnabledForNetwork, _TokenDetectionController_getBalancesInSingleCall, _TokenDetectionController_trackMetaMetricsEvent, _TokenDetectionController_accountsAPI, _TokenDetectionController_registerEventListeners, _TokenDetectionController_stopPolling, _TokenDetectionController_startPolling, _TokenDetectionController_compareTokensChainsCache, _TokenDetectionController_getCorrectNetworkClientIdByChainId, _TokenDetectionController_getCorrectChainIdAndNetworkClientId, _TokenDetectionController_restartTokenDetection, _TokenDetectionController_getChainsToDetect, _TokenDetectionController_attemptAccountAPIDetection, _TokenDetectionController_addChainsToRpcDetection, _TokenDetectionController_shouldDetectTokens, _TokenDetectionController_detectTokensUsingRpc, _TokenDetectionController_getSlicesOfTokensToDetect, _TokenDetectionController_getConvertedStaticMainnetTokenList, _TokenDetectionController_addDetectedTokensViaAPI, _TokenDetectionController_filterAndBuildTokensWithBalance, _TokenDetectionController_addDetectedTokens, _TokenDetectionController_getSelectedAccount, _TokenDetectionController_getSelectedAddress;
 function $importDefault(module) {
     if (module?.__esModule) {
         return module.default;
@@ -43,7 +43,7 @@ export const STATIC_MAINNET_TOKEN_LIST = Object.entries(contractMap).reduce((acc
  * @param tokensChainsCache - TokensChainsCache input object
  * @returns returns the map of chainId with TokenListMap
  */
-function mapChainIdWithTokenListMap(tokensChainsCache) {
+export function mapChainIdWithTokenListMap(tokensChainsCache) {
     return mapValues(tokensChainsCache, (value) => {
         if (isObject(value) && 'data' in value) {
             return get(value, ['data']);
@@ -73,8 +73,9 @@ export class TokenDetectionController extends StaticIntervalPollingController()
      * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.
      * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.
      * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)
+     * @param options.platform - Indicates whether the platform is extension or mobile
      */
-    constructor({ interval = DEFAULT_INTERVAL, disabled = true, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI = true, }) {
+    constructor({ interval = DEFAULT_INTERVAL, disabled = true, getBalancesInSingleCall, trackMetaMetricsEvent, messenger, useAccountsAPI = true, platform, }) {
         super({
             name: controllerName,
             messenger,
@@ -95,6 +96,7 @@ export class TokenDetectionController extends StaticIntervalPollingController()
         _TokenDetectionController_accountsAPI.set(this, {
             isAccountsAPIEnabled: true,
             supportedNetworksCache: null,
+            platform: '',
             async getSupportedNetworks() {
                 /* istanbul ignore next */
                 if (!this.isAccountsAPIEnabled) {
@@ -108,19 +110,16 @@ export class TokenDetectionController extends StaticIntervalPollingController()
                 this.supportedNetworksCache = result;
                 return result;
             },
-            async getMultiChainBalances(address, chainId) {
-                if (!this.isAccountsAPIEnabled) {
-                    throw new Error('Accounts API Feature Switch is disabled');
-                }
-                const chainIdNumber = hexToNumber(chainId);
-                const supportedNetworks = await this.getSupportedNetworks();
-                if (!supportedNetworks || !supportedNetworks.includes(chainIdNumber)) {
+            async getMultiNetworksBalances(address, chainIds, supportedNetworks) {
+                const chainIdNumbers = chainIds.map((chainId) => hexToNumber(chainId));
+                if (!supportedNetworks ||
+                    !chainIdNumbers.every((id) => supportedNetworks.includes(id))) {
                     const supportedNetworksErrStr = (supportedNetworks ?? []).toString();
-                    throw new Error(`Unsupported Network: supported networks ${supportedNetworksErrStr}, network: ${chainIdNumber}`);
+                    throw new Error(`Unsupported Network: supported networks ${supportedNetworksErrStr}, requested networks: ${chainIdNumbers.toString()}`);
                 }
                 const result = await fetchMultiChainBalances(address, {
-                    networks: [chainIdNumber],
-                });
+                    networks: chainIdNumbers,
+                }, this.platform);
                 return result.balances;
             },
         });
@@ -139,6 +138,7 @@ export class TokenDetectionController extends StaticIntervalPollingController()
         const { isUnlocked } = this.messagingSystem.call('KeyringController:getState');
         __classPrivateFieldSet(this, _TokenDetectionController_isUnlocked, isUnlocked, "f");
         __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").isAccountsAPIEnabled = useAccountsAPI;
+        __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").platform = platform;
         __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_registerEventListeners).call(this);
     }
     /**
@@ -174,12 +174,12 @@ export class TokenDetectionController extends StaticIntervalPollingController()
         this.disable();
         __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_stopPolling).call(this);
     }
-    async _executePoll({ networkClientId, address, }) {
+    async _executePoll({ chainIds, address, }) {
         if (!this.isActive) {
             return;
         }
         await this.detectTokens({
-            networkClientId,
+            chainIds,
             selectedAddress: address,
         });
     }
@@ -188,51 +188,35 @@ export class TokenDetectionController extends StaticIntervalPollingController()
      * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.
      *
      * @param options - Options for token detection.
-     * @param options.networkClientId - The ID of the network client to use.
+     * @param options.chainIds - The chain IDs of the network client to use.
      * @param options.selectedAddress - the selectedAddress against which to detect for token balances.
      */
-    async detectTokens({ networkClientId, selectedAddress, } = {}) {
+    async detectTokens({ chainIds, selectedAddress, } = {}) {
         if (!this.isActive) {
             return;
         }
-        const addressAgainstWhichToDetect = selectedAddress ?? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSelectedAddress).call(this);
-        const { chainId, networkClientId: selectedNetworkClientId } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectChainIdAndNetworkClientId).call(this, networkClientId);
-        const chainIdAgainstWhichToDetect = chainId;
-        const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;
-        if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {
-            return;
+        const addressToDetect = selectedAddress ?? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSelectedAddress).call(this);
+        const clientNetworks = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectNetworkClientIdByChainId).call(this, chainIds);
+        let supportedNetworks;
+        if (__classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").isAccountsAPIEnabled) {
+            supportedNetworks = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f").getSupportedNetworks();
         }
-        if (!__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
-            chainIdAgainstWhichToDetect !== ChainId.mainnet) {
-            return;
+        const { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getChainsToDetect).call(this, clientNetworks, supportedNetworks);
+        // Try detecting tokens via Account API first if conditions allow
+        if (supportedNetworks && chainsToDetectUsingAccountAPI.length > 0) {
+            const apiResult = await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_attemptAccountAPIDetection).call(this, chainsToDetectUsingAccountAPI, addressToDetect, supportedNetworks);
+            // If API succeeds and no chains are left for RPC detection, we can return early
+            if (apiResult?.result === 'success' &&
+                chainsToDetectUsingRpc.length === 0) {
+                return;
+            }
+            // If API fails or chainsToDetectUsingRpc still has items, add chains to RPC detection
+            __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addChainsToRpcDetection).call(this, chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI, clientNetworks);
         }
-        const isTokenDetectionInactiveInMainnet = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
-            chainIdAgainstWhichToDetect === ChainId.mainnet;
-        const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
-        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, isTokenDetectionInactiveInMainnet
-            ? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this)
-            : tokensChainsCache ?? {}, "f");
-        const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
-            chainId: chainIdAgainstWhichToDetect,
-            selectedAddress: addressAgainstWhichToDetect,
-        });
-        // Attempt Accounts API Detection
-        const accountAPIResult = await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokensViaAPI).call(this, {
-            chainId: chainIdAgainstWhichToDetect,
-            selectedAddress: addressAgainstWhichToDetect,
-            tokenCandidateSlices,
-        });
-        if (accountAPIResult?.result === 'success') {
-            return;
+        // Proceed with RPC detection if there are chains remaining in chainsToDetectUsingRpc
+        if (chainsToDetectUsingRpc.length > 0) {
+            await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_detectTokensUsingRpc).call(this, chainsToDetectUsingRpc, addressToDetect);
         }
-        // Attempt RPC Detection
-        const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) => __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokens).call(this, {
-            tokensSlice,
-            selectedAddress: addressAgainstWhichToDetect,
-            networkClientId: networkClientIdAgainstWhichToDetect,
-            chainId: chainIdAgainstWhichToDetect,
-        }));
-        await Promise.all(tokenDetectionPromises);
     }
 }
 _TokenDetectionController_intervalId = new WeakMap(), _TokenDetectionController_selectedAccountId = new WeakMap(), _TokenDetectionController_networkClientId = new WeakMap(), _TokenDetectionController_tokensChainsCache = new WeakMap(), _TokenDetectionController_disabled = new WeakMap(), _TokenDetectionController_isUnlocked = new WeakMap(), _TokenDetectionController_isDetectionEnabledFromPreferences = new WeakMap(), _TokenDetectionController_isDetectionEnabledForNetwork = new WeakMap(), _TokenDetectionController_getBalancesInSingleCall = new WeakMap(), _TokenDetectionController_trackMetaMetricsEvent = new WeakMap(), _TokenDetectionController_accountsAPI = new WeakMap(), _TokenDetectionController_instances = new WeakSet(), _TokenDetectionController_registerEventListeners = function _TokenDetectionController_registerEventListeners() {
@@ -280,20 +264,6 @@ _TokenDetectionController_intervalId = new WeakMap(), _TokenDetectionController_
             });
         }
     });
-    this.messagingSystem.subscribe('NetworkController:networkDidChange',
-    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-    // eslint-disable-next-line @typescript-eslint/no-misused-promises
-    async ({ selectedNetworkClientId }) => {
-        const isNetworkClientIdChanged = __classPrivateFieldGet(this, _TokenDetectionController_networkClientId, "f") !== selectedNetworkClientId;
-        const { chainId: newChainId } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getCorrectChainIdAndNetworkClientId).call(this, selectedNetworkClientId);
-        __classPrivateFieldSet(this, _TokenDetectionController_isDetectionEnabledForNetwork, isTokenDetectionSupportedForNetwork(newChainId), "f");
-        if (isNetworkClientIdChanged && __classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledForNetwork, "f")) {
-            __classPrivateFieldSet(this, _TokenDetectionController_networkClientId, selectedNetworkClientId, "f");
-            await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_restartTokenDetection).call(this, {
-                networkClientId: __classPrivateFieldGet(this, _TokenDetectionController_networkClientId, "f"),
-            });
-        }
-    });
 }, _TokenDetectionController_stopPolling = function _TokenDetectionController_stopPolling() {
     if (__classPrivateFieldGet(this, _TokenDetectionController_intervalId, "f")) {
         clearInterval(__classPrivateFieldGet(this, _TokenDetectionController_intervalId, "f"));
@@ -318,16 +288,26 @@ async function _TokenDetectionController_startPolling() {
     const cleanTokensChainsCache = mapChainIdWithTokenListMap(tokensChainsCache);
     const isEqualValues = isEqual(cleanTokensChainsCache, cleanPreviousTokensChainsCache);
     return isEqualValues;
-}, _TokenDetectionController_getCorrectChainIdAndNetworkClientId = function _TokenDetectionController_getCorrectChainIdAndNetworkClientId(networkClientId) {
-    if (networkClientId) {
-        const networkConfiguration = this.messagingSystem.call('NetworkController:getNetworkConfigurationByNetworkClientId', networkClientId);
-        if (networkConfiguration) {
-            return {
-                chainId: networkConfiguration.chainId,
-                networkClientId,
-            };
-        }
+}, _TokenDetectionController_getCorrectNetworkClientIdByChainId = function _TokenDetectionController_getCorrectNetworkClientIdByChainId(chainIds) {
+    const { networkConfigurationsByChainId, selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
+    if (!chainIds) {
+        const networkConfiguration = this.messagingSystem.call('NetworkController:getNetworkConfigurationByNetworkClientId', selectedNetworkClientId);
+        return [
+            {
+                chainId: networkConfiguration?.chainId ?? ChainId.mainnet,
+                networkClientId: selectedNetworkClientId,
+            },
+        ];
     }
+    return chainIds.map((chainId) => {
+        const configuration = networkConfigurationsByChainId[chainId];
+        return {
+            chainId,
+            networkClientId: configuration.rpcEndpoints[configuration.defaultRpcEndpointIndex]
+                .networkClientId,
+        };
+    });
+}, _TokenDetectionController_getCorrectChainIdAndNetworkClientId = function _TokenDetectionController_getCorrectChainIdAndNetworkClientId() {
     const { selectedNetworkClientId } = this.messagingSystem.call('NetworkController:getState');
     const { configuration: { chainId }, } = this.messagingSystem.call('NetworkController:getNetworkClientById', selectedNetworkClientId);
     return {
@@ -341,14 +321,76 @@ async function _TokenDetectionController_startPolling() {
  *
  * @param options - Options for restart token detection.
  * @param options.selectedAddress - the selectedAddress against which to detect for token balances
- * @param options.networkClientId - The ID of the network client to use.
+ * @param options.chainIds - The chain IDs of the network client to use.
  */
-async function _TokenDetectionController_restartTokenDetection({ selectedAddress, networkClientId, } = {}) {
+async function _TokenDetectionController_restartTokenDetection({ selectedAddress, chainIds, } = {}) {
     await this.detectTokens({
-        networkClientId,
+        chainIds,
         selectedAddress,
     });
     this.setIntervalLength(DEFAULT_INTERVAL);
+}, _TokenDetectionController_getChainsToDetect = function _TokenDetectionController_getChainsToDetect(clientNetworks, supportedNetworks) {
+    const chainsToDetectUsingAccountAPI = [];
+    const chainsToDetectUsingRpc = [];
+    clientNetworks.forEach(({ chainId, networkClientId }) => {
+        if (supportedNetworks?.includes(hexToNumber(chainId))) {
+            chainsToDetectUsingAccountAPI.push(chainId);
+        }
+        else {
+            chainsToDetectUsingRpc.push({ chainId, networkClientId });
+        }
+    });
+    return { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI };
+}, _TokenDetectionController_attemptAccountAPIDetection = async function _TokenDetectionController_attemptAccountAPIDetection(chainsToDetectUsingAccountAPI, addressToDetect, supportedNetworks) {
+    return await __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokensViaAPI).call(this, {
+        chainIds: chainsToDetectUsingAccountAPI,
+        selectedAddress: addressToDetect,
+        supportedNetworks,
+    });
+}, _TokenDetectionController_addChainsToRpcDetection = function _TokenDetectionController_addChainsToRpcDetection(chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI, clientNetworks) {
+    chainsToDetectUsingAccountAPI.forEach((chainId) => {
+        const networkEntry = clientNetworks.find((network) => network.chainId === chainId);
+        if (networkEntry) {
+            chainsToDetectUsingRpc.push({
+                chainId: networkEntry.chainId,
+                networkClientId: networkEntry.networkClientId,
+            });
+        }
+    });
+}, _TokenDetectionController_shouldDetectTokens = function _TokenDetectionController_shouldDetectTokens(chainId) {
+    if (!isTokenDetectionSupportedForNetwork(chainId)) {
+        return false;
+    }
+    if (!__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
+        chainId !== ChainId.mainnet) {
+        return false;
+    }
+    const isMainnetDetectionInactive = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") && chainId === ChainId.mainnet;
+    if (isMainnetDetectionInactive) {
+        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this), "f");
+    }
+    else {
+        const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
+        __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, tokensChainsCache ?? {}, "f");
+    }
+    return true;
+}, _TokenDetectionController_detectTokensUsingRpc = async function _TokenDetectionController_detectTokensUsingRpc(chainsToDetectUsingRpc, addressToDetect) {
+    for (const { chainId, networkClientId } of chainsToDetectUsingRpc) {
+        if (!__classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_shouldDetectTokens).call(this, chainId)) {
+            continue;
+        }
+        const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
+            chainId,
+            selectedAddress: addressToDetect,
+        });
+        const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) => __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_addDetectedTokens).call(this, {
+            tokensSlice,
+            selectedAddress: addressToDetect,
+            networkClientId,
+            chainId,
+        }));
+        await Promise.all(tokenDetectionPromises);
+    }
 }, _TokenDetectionController_getSlicesOfTokensToDetect = function _TokenDetectionController_getSlicesOfTokensToDetect({ chainId, selectedAddress, }) {
     const { allTokens, allDetectedTokens, allIgnoredTokens } = this.messagingSystem.call('TokensController:getState');
     const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [
@@ -394,68 +436,92 @@ async function _TokenDetectionController_restartTokenDetection({ selectedAddress
  * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances
  * @param options - method arguments
  * @param options.selectedAddress - address to check against
- * @param options.chainId - chainId to check tokens for
- * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).
- * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.
- * It will also prevent us to adding tokens a user already has
+ * @param options.chainIds - array of chainIds to check tokens for
+ * @param options.supportedNetworks - array of chainIds to check tokens for
  * @returns a success or failed object
  */
-async function _TokenDetectionController_addDetectedTokensViaAPI({ selectedAddress, chainId, tokenCandidateSlices, }) {
+async function _TokenDetectionController_addDetectedTokensViaAPI({ selectedAddress, chainIds, supportedNetworks, }) {
     return await safelyExecute(async () => {
-        const tokenBalances = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f")
-            .getMultiChainBalances(selectedAddress, chainId)
+        // Fetch balances for multiple chain IDs at once
+        const tokenBalancesByChain = await __classPrivateFieldGet(this, _TokenDetectionController_accountsAPI, "f")
+            .getMultiNetworksBalances(selectedAddress, chainIds, supportedNetworks)
             .catch(() => null);
-        if (!tokenBalances || tokenBalances.length === 0) {
+        if (!tokenBalancesByChain ||
+            Object.keys(tokenBalancesByChain).length === 0) {
             return { result: 'failed' };
         }
-        const tokensWithBalance = [];
-        const eventTokensDetails = [];
-        const tokenCandidateSet = new Set(tokenCandidateSlices.flat());
-        tokenBalances.forEach((token) => {
-            const tokenAddress = token.address;
-            // Make sure that the token to add is in our candidate list
-            // Ensures we don't add tokens we already own
-            if (!tokenCandidateSet.has(token.address)) {
-                return;
-            }
-            // We need specific data from tokensChainsCache to correctly create a token
-            // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.
-            if (!__classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId].data[token.address]) {
-                return;
-            }
-            const { decimals, symbol, aggregators, iconUrl, name } = __classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId].data[token.address];
-            eventTokensDetails.push(`${symbol} - ${tokenAddress}`);
-            tokensWithBalance.push({
-                address: tokenAddress,
-                decimals,
-                symbol,
-                aggregators,
-                image: iconUrl,
-                isERC721: false,
-                name,
-            });
-        });
-        if (tokensWithBalance.length) {
-            __classPrivateFieldGet(this, _TokenDetectionController_trackMetaMetricsEvent, "f").call(this, {
-                event: 'Token Detected',
-                category: 'Wallet',
-                properties: {
-                    tokens: eventTokensDetails,
-                    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-                    // eslint-disable-next-line @typescript-eslint/naming-convention
-                    token_standard: ERC20,
-                    // TODO: Either fix this lint violation or explain why it's necessary to ignore.
-                    // eslint-disable-next-line @typescript-eslint/naming-convention
-                    asset_type: ASSET_TYPES.TOKEN,
-                },
-            });
-            await this.messagingSystem.call('TokensController:addDetectedTokens', tokensWithBalance, {
-                selectedAddress,
+        // Process each chain ID individually
+        for (const chainId of chainIds) {
+            const isTokenDetectionInactiveInMainnet = !__classPrivateFieldGet(this, _TokenDetectionController_isDetectionEnabledFromPreferences, "f") &&
+                chainId === ChainId.mainnet;
+            const { tokensChainsCache } = this.messagingSystem.call('TokenListController:getState');
+            __classPrivateFieldSet(this, _TokenDetectionController_tokensChainsCache, isTokenDetectionInactiveInMainnet
+                ? __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getConvertedStaticMainnetTokenList).call(this)
+                : tokensChainsCache ?? {}, "f");
+            // Generate token candidates based on chainId and selectedAddress
+            const tokenCandidateSlices = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_getSlicesOfTokensToDetect).call(this, {
                 chainId,
+                selectedAddress,
             });
+            // Filter balances for the current chainId
+            const tokenBalances = tokenBalancesByChain.filter((balance) => balance.chainId === hexToNumber(chainId));
+            if (!tokenBalances || tokenBalances.length === 0) {
+                continue;
+            }
+            // Use helper function to filter tokens with balance for this chainId
+            const { tokensWithBalance, eventTokensDetails } = __classPrivateFieldGet(this, _TokenDetectionController_instances, "m", _TokenDetectionController_filterAndBuildTokensWithBalance).call(this, tokenCandidateSlices, tokenBalances, chainId);
+            if (tokensWithBalance.length) {
+                __classPrivateFieldGet(this, _TokenDetectionController_trackMetaMetricsEvent, "f").call(this, {
+                    event: 'Token Detected',
+                    category: 'Wallet',
+                    properties: {
+                        tokens: eventTokensDetails,
+                        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+                        // eslint-disable-next-line @typescript-eslint/naming-convention
+                        token_standard: ERC20,
+                        // TODO: Either fix this lint violation or explain why it's necessary to ignore.
+                        // eslint-disable-next-line @typescript-eslint/naming-convention
+                        asset_type: ASSET_TYPES.TOKEN,
+                    },
+                });
+                await this.messagingSystem.call('TokensController:addDetectedTokens', tokensWithBalance, {
+                    selectedAddress,
+                    chainId,
+                });
+            }
         }
         return { result: 'success' };
     });
+}, _TokenDetectionController_filterAndBuildTokensWithBalance = function _TokenDetectionController_filterAndBuildTokensWithBalance(tokenCandidateSlices, tokenBalances, chainId) {
+    const tokensWithBalance = [];
+    const eventTokensDetails = [];
+    const tokenCandidateSet = new Set(tokenCandidateSlices.flat());
+    tokenBalances?.forEach((token) => {
+        const tokenAddress = token.address;
+        // Make sure the token to add is in our candidate list
+        if (!tokenCandidateSet.has(tokenAddress)) {
+            return;
+        }
+        // Retrieve token data from cache to safely add it
+        const tokenData = __classPrivateFieldGet(this, _TokenDetectionController_tokensChainsCache, "f")[chainId]?.data[tokenAddress];
+        // We need specific data from tokensChainsCache to correctly create a token
+        // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.
+        if (!tokenData) {
+            return;
+        }
+        const { decimals, symbol, aggregators, iconUrl, name } = tokenData;
+        eventTokensDetails.push(`${symbol} - ${tokenAddress}`);
+        tokensWithBalance.push({
+            address: tokenAddress,
+            decimals,
+            symbol,
+            aggregators,
+            image: iconUrl,
+            isERC721: false,
+            name,
+        });
+    });
+    return { tokensWithBalance, eventTokensDetails };
 }, _TokenDetectionController_addDetectedTokens = async function _TokenDetectionController_addDetectedTokens({ tokensSlice, selectedAddress, networkClientId, chainId, }) {
     await safelyExecute(async () => {
         const balances = await __classPrivateFieldGet(this, _TokenDetectionController_getBalancesInSingleCall, "f").call(this, selectedAddress, tokensSlice, networkClientId);
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs.map b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs.map
index 20f09b4..19fd2ce 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenDetectionController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenDetectionController.mjs","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerGetAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport {\n  ASSET_TYPES,\n  ChainId,\n  ERC20,\n  safelyExecute,\n  isEqualCaseInsensitive,\n} from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { hexToNumber } from '@metamask/utils';\nimport { isEqual, mapValues, isObject, get } from 'lodash';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport {\n  fetchMultiChainBalances,\n  fetchSupportedNetworks,\n} from './multi-chain-accounts-service';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n  TokensChainsCache,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\n/**\n * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.\n * @param tokensChainsCache - TokensChainsCache input object\n * @returns returns the map of chainId with TokenListMap\n */\nfunction mapChainIdWithTokenListMap(tokensChainsCache: TokensChainsCache) {\n  return mapValues(tokensChainsCache, (value) => {\n    if (isObject(value) && 'data' in value) {\n      return get(value, ['data']);\n    }\n    return value;\n  });\n}\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AccountsControllerGetAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedEvmAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/** The input to start polling for the {@link TokenDetectionController} */\ntype TokenDetectionPollingInput = {\n  networkClientId: NetworkClientId;\n  address: string;\n};\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<TokenDetectionPollingInput>()<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAccountId: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokensChainsCache: TokensChainsCache = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      token_standard: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      asset_type: string;\n    };\n  }) => void;\n\n  #accountsAPI = {\n    isAccountsAPIEnabled: true,\n    supportedNetworksCache: null as number[] | null,\n    async getSupportedNetworks() {\n      /* istanbul ignore next */\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      /* istanbul ignore next */\n      if (this.supportedNetworksCache) {\n        return this.supportedNetworksCache;\n      }\n\n      const result = await fetchSupportedNetworks().catch(() => null);\n      this.supportedNetworksCache = result;\n      return result;\n    },\n\n    async getMultiChainBalances(address: string, chainId: Hex) {\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      const chainIdNumber = hexToNumber(chainId);\n      const supportedNetworks = await this.getSupportedNetworks();\n\n      if (!supportedNetworks || !supportedNetworks.includes(chainIdNumber)) {\n        const supportedNetworksErrStr = (supportedNetworks ?? []).toString();\n        throw new Error(\n          `Unsupported Network: supported networks ${supportedNetworksErrStr}, network: ${chainIdNumber}`,\n        );\n      }\n\n      const result = await fetchMultiChainBalances(address, {\n        networks: [chainIdNumber],\n      });\n\n      return result.balances;\n    },\n  };\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n    useAccountsAPI = true,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        token_standard: string;\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n    useAccountsAPI?: boolean;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokensChainsCache = tokensChainsCache;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#accountsAPI.isAccountsAPIEnabled = useAccountsAPI;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ tokensChainsCache }) => {\n        const isEqualValues = this.#compareTokensChainsCache(\n          tokensChainsCache,\n          this.#tokensChainsCache,\n        );\n        if (!isEqualValues) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ useTokenDetection }) => {\n        const selectedAccount = this.#getSelectedAccount();\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedEvmAccountChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async (selectedAccount) => {\n        const isSelectedAccountIdChanged =\n          this.#selectedAccountId !== selectedAccount.id;\n        if (isSelectedAccountIdChanged) {\n          this.#selectedAccountId = selectedAccount.id;\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'NetworkController:networkDidChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const isNetworkClientIdChanged =\n          this.#networkClientId !== selectedNetworkClientId;\n\n        const { chainId: newChainId } =\n          this.#getCorrectChainIdAndNetworkClientId(selectedNetworkClientId);\n        this.#isDetectionEnabledForNetwork =\n          isTokenDetectionSupportedForNetwork(newChainId);\n\n        if (isNetworkClientIdChanged && this.#isDetectionEnabledForNetwork) {\n          this.#networkClientId = selectedNetworkClientId;\n          await this.#restartTokenDetection({\n            networkClientId: this.#networkClientId,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  /**\n   * Compares current and previous tokensChainsCache object focusing only on the data object.\n   * @param tokensChainsCache - current tokensChainsCache input object\n   * @param previousTokensChainsCache - previous tokensChainsCache input object\n   * @returns boolean indicating if the two objects are equal\n   */\n\n  #compareTokensChainsCache(\n    tokensChainsCache: TokensChainsCache,\n    previousTokensChainsCache: TokensChainsCache,\n  ): boolean {\n    const cleanPreviousTokensChainsCache = mapChainIdWithTokenListMap(\n      previousTokensChainsCache,\n    );\n    const cleanTokensChainsCache =\n      mapChainIdWithTokenListMap(tokensChainsCache);\n    const isEqualValues = isEqual(\n      cleanTokensChainsCache,\n      cleanPreviousTokensChainsCache,\n    );\n    return isEqualValues;\n  }\n\n  #getCorrectChainIdAndNetworkClientId(networkClientId?: NetworkClientId): {\n    chainId: Hex;\n    networkClientId: NetworkClientId;\n  } {\n    if (networkClientId) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        networkClientId,\n      );\n      if (networkConfiguration) {\n        return {\n          chainId: networkConfiguration.chainId,\n          networkClientId,\n        };\n      }\n    }\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll({\n    networkClientId,\n    address,\n  }: TokenDetectionPollingInput): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress: address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.networkClientId - The ID of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    networkClientId,\n  }: {\n    selectedAddress?: string;\n    networkClientId?: NetworkClientId;\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      networkClientId,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.networkClientId - The ID of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    networkClientId,\n    selectedAddress,\n  }: {\n    networkClientId?: NetworkClientId;\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressAgainstWhichToDetect =\n      selectedAddress ?? this.#getSelectedAddress();\n    const { chainId, networkClientId: selectedNetworkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId(networkClientId);\n    const chainIdAgainstWhichToDetect = chainId;\n    const networkClientIdAgainstWhichToDetect = selectedNetworkClientId;\n\n    if (!isTokenDetectionSupportedForNetwork(chainIdAgainstWhichToDetect)) {\n      return;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect !== ChainId.mainnet\n    ) {\n      return;\n    }\n    const isTokenDetectionInactiveInMainnet =\n      !this.#isDetectionEnabledFromPreferences &&\n      chainIdAgainstWhichToDetect === ChainId.mainnet;\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n    this.#tokensChainsCache = isTokenDetectionInactiveInMainnet\n      ? this.#getConvertedStaticMainnetTokenList()\n      : tokensChainsCache ?? {};\n\n    const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n    });\n\n    // Attempt Accounts API Detection\n    const accountAPIResult = await this.#addDetectedTokensViaAPI({\n      chainId: chainIdAgainstWhichToDetect,\n      selectedAddress: addressAgainstWhichToDetect,\n      tokenCandidateSlices,\n    });\n    if (accountAPIResult?.result === 'success') {\n      return;\n    }\n\n    // Attempt RPC Detection\n    const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) =>\n      this.#addDetectedTokens({\n        tokensSlice,\n        selectedAddress: addressAgainstWhichToDetect,\n        networkClientId: networkClientIdAgainstWhichToDetect,\n        chainId: chainIdAgainstWhichToDetect,\n      }),\n    );\n\n    await Promise.all(tokenDetectionPromises);\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(\n      this.#tokensChainsCache?.[chainId]?.data || {},\n    )) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  #getConvertedStaticMainnetTokenList(): TokensChainsCache {\n    const data: TokenListMap = Object.entries(STATIC_MAINNET_TOKEN_LIST).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: {\n          name: value.name,\n          symbol: value.symbol,\n          decimals: value.decimals,\n          address: value.address,\n          aggregators: [],\n          iconUrl: value?.iconUrl,\n        },\n      }),\n      {},\n    );\n    return {\n      '0x1': {\n        data,\n        timestamp: 0,\n      },\n    };\n  }\n\n  /**\n   * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances\n   * @param options - method arguments\n   * @param options.selectedAddress - address to check against\n   * @param options.chainId - chainId to check tokens for\n   * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).\n   * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.\n   * It will also prevent us to adding tokens a user already has\n   * @returns a success or failed object\n   */\n  async #addDetectedTokensViaAPI({\n    selectedAddress,\n    chainId,\n    tokenCandidateSlices,\n  }: {\n    selectedAddress: string;\n    chainId: Hex;\n    tokenCandidateSlices: string[][];\n  }) {\n    return await safelyExecute(async () => {\n      const tokenBalances = await this.#accountsAPI\n        .getMultiChainBalances(selectedAddress, chainId)\n        .catch(() => null);\n\n      if (!tokenBalances || tokenBalances.length === 0) {\n        return { result: 'failed' } as const;\n      }\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n\n      const tokenCandidateSet = new Set<string>(tokenCandidateSlices.flat());\n\n      tokenBalances.forEach((token) => {\n        const tokenAddress = token.address;\n\n        // Make sure that the token to add is in our candidate list\n        // Ensures we don't add tokens we already own\n        if (!tokenCandidateSet.has(token.address)) {\n          return;\n        }\n\n        // We need specific data from tokensChainsCache to correctly create a token\n        // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.\n        if (!this.#tokensChainsCache[chainId].data[token.address]) {\n          return;\n        }\n\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[token.address];\n        eventTokensDetails.push(`${symbol} - ${tokenAddress}`);\n        tokensWithBalance.push({\n          address: tokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      });\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n\n      return { result: 'success' } as const;\n    });\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #getSelectedAddress() {\n    // If the address is not defined (or empty), we fallback to the currently selected account's address\n    const account = this.messagingSystem.call(\n      'AccountsController:getAccount',\n      this.#selectedAccountId,\n    );\n    return account?.address || '';\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenDetectionController.mjs","sourceRoot":"","sources":["../src/TokenDetectionController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerGetAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  RestrictedControllerMessenger,\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n} from '@metamask/base-controller';\nimport contractMap from '@metamask/contract-metadata';\nimport {\n  ASSET_TYPES,\n  ChainId,\n  ERC20,\n  safelyExecute,\n  isEqualCaseInsensitive,\n} from '@metamask/controller-utils';\nimport type {\n  KeyringControllerGetStateAction,\n  KeyringControllerLockEvent,\n  KeyringControllerUnlockEvent,\n} from '@metamask/keyring-controller';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetNetworkConfigurationByNetworkClientId,\n  NetworkControllerGetStateAction,\n  NetworkControllerNetworkDidChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type {\n  PreferencesControllerGetStateAction,\n  PreferencesControllerStateChangeEvent,\n} from '@metamask/preferences-controller';\nimport type { Hex } from '@metamask/utils';\nimport { hexToNumber } from '@metamask/utils';\nimport { isEqual, mapValues, isObject, get } from 'lodash';\n\nimport type { AssetsContractController } from './AssetsContractController';\nimport { isTokenDetectionSupportedForNetwork } from './assetsUtil';\nimport {\n  fetchMultiChainBalances,\n  fetchSupportedNetworks,\n} from './multi-chain-accounts-service';\nimport type {\n  GetTokenListState,\n  TokenListMap,\n  TokenListStateChange,\n  TokensChainsCache,\n} from './TokenListController';\nimport type { Token } from './TokenRatesController';\nimport type {\n  TokensControllerAddDetectedTokensAction,\n  TokensControllerGetStateAction,\n} from './TokensController';\n\nconst DEFAULT_INTERVAL = 180000;\n\ntype LegacyToken = {\n  name: string;\n  logo: `${string}.svg`;\n  symbol: string;\n  decimals: number;\n  erc20?: boolean;\n  erc721?: boolean;\n};\n\ntype TokenDetectionMap = {\n  [P in keyof TokenListMap]: Omit<TokenListMap[P], 'occurrences'>;\n};\n\ntype NetworkClient = {\n  chainId: Hex;\n  networkClientId: string;\n};\n\nexport const STATIC_MAINNET_TOKEN_LIST = Object.entries<LegacyToken>(\n  contractMap,\n).reduce<TokenDetectionMap>((acc, [base, contract]) => {\n  const { logo, erc20, erc721, ...tokenMetadata } = contract;\n  return {\n    ...acc,\n    [base.toLowerCase()]: {\n      ...tokenMetadata,\n      address: base.toLowerCase(),\n      iconUrl: `images/contract/${logo}`,\n      aggregators: [],\n    },\n  };\n}, {});\n\n/**\n * Function that takes a TokensChainsCache object and maps chainId with TokenListMap.\n * @param tokensChainsCache - TokensChainsCache input object\n * @returns returns the map of chainId with TokenListMap\n */\nexport function mapChainIdWithTokenListMap(\n  tokensChainsCache: TokensChainsCache,\n) {\n  return mapValues(tokensChainsCache, (value) => {\n    if (isObject(value) && 'data' in value) {\n      return get(value, ['data']);\n    }\n    return value;\n  });\n}\n\nexport const controllerName = 'TokenDetectionController';\n\nexport type TokenDetectionState = Record<never, never>;\n\nexport type TokenDetectionControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenDetectionState\n>;\n\nexport type TokenDetectionControllerActions =\n  TokenDetectionControllerGetStateAction;\n\nexport type AllowedActions =\n  | AccountsControllerGetSelectedAccountAction\n  | AccountsControllerGetAccountAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetNetworkConfigurationByNetworkClientId\n  | NetworkControllerGetStateAction\n  | GetTokenListState\n  | KeyringControllerGetStateAction\n  | PreferencesControllerGetStateAction\n  | TokensControllerGetStateAction\n  | TokensControllerAddDetectedTokensAction;\n\nexport type TokenDetectionControllerStateChangeEvent =\n  ControllerStateChangeEvent<typeof controllerName, TokenDetectionState>;\n\nexport type TokenDetectionControllerEvents =\n  TokenDetectionControllerStateChangeEvent;\n\nexport type AllowedEvents =\n  | AccountsControllerSelectedEvmAccountChangeEvent\n  | NetworkControllerNetworkDidChangeEvent\n  | TokenListStateChange\n  | KeyringControllerLockEvent\n  | KeyringControllerUnlockEvent\n  | PreferencesControllerStateChangeEvent;\n\nexport type TokenDetectionControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenDetectionControllerActions | AllowedActions,\n  TokenDetectionControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/** The input to start polling for the {@link TokenDetectionController} */\ntype TokenDetectionPollingInput = {\n  chainIds: Hex[];\n  address: string;\n};\n\n/**\n * Controller that passively polls on a set interval for Tokens auto detection\n * @property intervalId - Polling interval used to fetch new token rates\n * @property selectedAddress - Vault selected address\n * @property networkClientId - The network client ID of the current selected network\n * @property disabled - Boolean to track if network requests are blocked\n * @property isUnlocked - Boolean to track if the keyring state is unlocked\n * @property isDetectionEnabledFromPreferences - Boolean to track if detection is enabled from PreferencesController\n * @property isDetectionEnabledForNetwork - Boolean to track if detected is enabled for current network\n */\nexport class TokenDetectionController extends StaticIntervalPollingController<TokenDetectionPollingInput>()<\n  typeof controllerName,\n  TokenDetectionState,\n  TokenDetectionControllerMessenger\n> {\n  #intervalId?: ReturnType<typeof setTimeout>;\n\n  #selectedAccountId: string;\n\n  #networkClientId: NetworkClientId;\n\n  #tokensChainsCache: TokensChainsCache = {};\n\n  #disabled: boolean;\n\n  #isUnlocked: boolean;\n\n  #isDetectionEnabledFromPreferences: boolean;\n\n  #isDetectionEnabledForNetwork: boolean;\n\n  readonly #getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n\n  readonly #trackMetaMetricsEvent: (options: {\n    event: string;\n    category: string;\n    properties: {\n      tokens: string[];\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      token_standard: string;\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      asset_type: string;\n    };\n  }) => void;\n\n  #accountsAPI = {\n    isAccountsAPIEnabled: true,\n    supportedNetworksCache: null as number[] | null,\n    platform: '' as 'extension' | 'mobile',\n\n    async getSupportedNetworks() {\n      /* istanbul ignore next */\n      if (!this.isAccountsAPIEnabled) {\n        throw new Error('Accounts API Feature Switch is disabled');\n      }\n\n      /* istanbul ignore next */\n      if (this.supportedNetworksCache) {\n        return this.supportedNetworksCache;\n      }\n\n      const result = await fetchSupportedNetworks().catch(() => null);\n      this.supportedNetworksCache = result;\n      return result;\n    },\n\n    async getMultiNetworksBalances(\n      address: string,\n      chainIds: Hex[],\n      supportedNetworks: number[] | null,\n    ) {\n      const chainIdNumbers = chainIds.map((chainId) => hexToNumber(chainId));\n\n      if (\n        !supportedNetworks ||\n        !chainIdNumbers.every((id) => supportedNetworks.includes(id))\n      ) {\n        const supportedNetworksErrStr = (supportedNetworks ?? []).toString();\n        throw new Error(\n          `Unsupported Network: supported networks ${supportedNetworksErrStr}, requested networks: ${chainIdNumbers.toString()}`,\n        );\n      }\n\n      const result = await fetchMultiChainBalances(\n        address,\n        {\n          networks: chainIdNumbers,\n        },\n        this.platform,\n      );\n\n      return result.balances;\n    },\n  };\n\n  /**\n   * Creates a TokenDetectionController instance.\n   *\n   * @param options - The controller options.\n   * @param options.messenger - The controller messaging system.\n   * @param options.disabled - If set to true, all network requests are blocked.\n   * @param options.interval - Polling interval used to fetch new token rates\n   * @param options.getBalancesInSingleCall - Gets the balances of a list of tokens for the given address.\n   * @param options.trackMetaMetricsEvent - Sets options for MetaMetrics event tracking.\n   * @param options.useAccountsAPI - Feature Switch for using the accounts API when detecting tokens (default: true)\n   * @param options.platform - Indicates whether the platform is extension or mobile\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = true,\n    getBalancesInSingleCall,\n    trackMetaMetricsEvent,\n    messenger,\n    useAccountsAPI = true,\n    platform,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    getBalancesInSingleCall: AssetsContractController['getBalancesInSingleCall'];\n    trackMetaMetricsEvent: (options: {\n      event: string;\n      category: string;\n      properties: {\n        tokens: string[];\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        token_standard: string;\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/naming-convention\n        asset_type: string;\n      };\n    }) => void;\n    messenger: TokenDetectionControllerMessenger;\n    useAccountsAPI?: boolean;\n    platform: 'extension' | 'mobile';\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: {},\n      metadata: {},\n    });\n\n    this.#disabled = disabled;\n    this.setIntervalLength(interval);\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { chainId, networkClientId } =\n      this.#getCorrectChainIdAndNetworkClientId();\n    this.#networkClientId = networkClientId;\n\n    const { tokensChainsCache } = this.messagingSystem.call(\n      'TokenListController:getState',\n    );\n\n    this.#tokensChainsCache = tokensChainsCache;\n\n    const { useTokenDetection: defaultUseTokenDetection } =\n      this.messagingSystem.call('PreferencesController:getState');\n    this.#isDetectionEnabledFromPreferences = defaultUseTokenDetection;\n    this.#isDetectionEnabledForNetwork =\n      isTokenDetectionSupportedForNetwork(chainId);\n\n    this.#getBalancesInSingleCall = getBalancesInSingleCall;\n\n    this.#trackMetaMetricsEvent = trackMetaMetricsEvent;\n\n    const { isUnlocked } = this.messagingSystem.call(\n      'KeyringController:getState',\n    );\n    this.#isUnlocked = isUnlocked;\n\n    this.#accountsAPI.isAccountsAPIEnabled = useAccountsAPI;\n    this.#accountsAPI.platform = platform;\n\n    this.#registerEventListeners();\n  }\n\n  /**\n   * Constructor helper for registering this controller's messaging system subscriptions to controller events.\n   */\n  #registerEventListeners() {\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.messagingSystem.subscribe('KeyringController:unlock', async () => {\n      this.#isUnlocked = true;\n      await this.#restartTokenDetection();\n    });\n\n    this.messagingSystem.subscribe('KeyringController:lock', () => {\n      this.#isUnlocked = false;\n      this.#stopPolling();\n    });\n\n    this.messagingSystem.subscribe(\n      'TokenListController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ tokensChainsCache }) => {\n        const isEqualValues = this.#compareTokensChainsCache(\n          tokensChainsCache,\n          this.#tokensChainsCache,\n        );\n        if (!isEqualValues) {\n          await this.#restartTokenDetection();\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'PreferencesController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ useTokenDetection }) => {\n        const selectedAccount = this.#getSelectedAccount();\n        const isDetectionChangedFromPreferences =\n          this.#isDetectionEnabledFromPreferences !== useTokenDetection;\n\n        this.#isDetectionEnabledFromPreferences = useTokenDetection;\n\n        if (isDetectionChangedFromPreferences) {\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n\n    this.messagingSystem.subscribe(\n      'AccountsController:selectedEvmAccountChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async (selectedAccount) => {\n        const isSelectedAccountIdChanged =\n          this.#selectedAccountId !== selectedAccount.id;\n        if (isSelectedAccountIdChanged) {\n          this.#selectedAccountId = selectedAccount.id;\n          await this.#restartTokenDetection({\n            selectedAddress: selectedAccount.address,\n          });\n        }\n      },\n    );\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Internal isActive state\n   * @type {boolean}\n   */\n  get isActive(): boolean {\n    return !this.#disabled && this.#isUnlocked;\n  }\n\n  /**\n   * Start polling for detected tokens.\n   */\n  async start(): Promise<void> {\n    this.enable();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for detected tokens.\n   */\n  stop(): void {\n    this.disable();\n    this.#stopPolling();\n  }\n\n  #stopPolling(): void {\n    if (this.#intervalId) {\n      clearInterval(this.#intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    this.#stopPolling();\n    await this.detectTokens();\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.#intervalId = setInterval(async () => {\n      await this.detectTokens();\n    }, this.getIntervalLength());\n  }\n\n  /**\n   * Compares current and previous tokensChainsCache object focusing only on the data object.\n   * @param tokensChainsCache - current tokensChainsCache input object\n   * @param previousTokensChainsCache - previous tokensChainsCache input object\n   * @returns boolean indicating if the two objects are equal\n   */\n\n  #compareTokensChainsCache(\n    tokensChainsCache: TokensChainsCache,\n    previousTokensChainsCache: TokensChainsCache,\n  ): boolean {\n    const cleanPreviousTokensChainsCache = mapChainIdWithTokenListMap(\n      previousTokensChainsCache,\n    );\n    const cleanTokensChainsCache =\n      mapChainIdWithTokenListMap(tokensChainsCache);\n    const isEqualValues = isEqual(\n      cleanTokensChainsCache,\n      cleanPreviousTokensChainsCache,\n    );\n    return isEqualValues;\n  }\n\n  #getCorrectNetworkClientIdByChainId(\n    chainIds: Hex[] | undefined,\n  ): { chainId: Hex; networkClientId: NetworkClientId }[] {\n    const { networkConfigurationsByChainId, selectedNetworkClientId } =\n      this.messagingSystem.call('NetworkController:getState');\n\n    if (!chainIds) {\n      const networkConfiguration = this.messagingSystem.call(\n        'NetworkController:getNetworkConfigurationByNetworkClientId',\n        selectedNetworkClientId,\n      );\n\n      return [\n        {\n          chainId: networkConfiguration?.chainId ?? ChainId.mainnet,\n          networkClientId: selectedNetworkClientId,\n        },\n      ];\n    }\n\n    return chainIds.map((chainId) => {\n      const configuration = networkConfigurationsByChainId[chainId];\n      return {\n        chainId,\n        networkClientId:\n          configuration.rpcEndpoints[configuration.defaultRpcEndpointIndex]\n            .networkClientId,\n      };\n    });\n  }\n\n  #getCorrectChainIdAndNetworkClientId() {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const {\n      configuration: { chainId },\n    } = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId,\n      networkClientId: selectedNetworkClientId,\n    };\n  }\n\n  async _executePoll({\n    chainIds,\n    address,\n  }: TokenDetectionPollingInput): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n    await this.detectTokens({\n      chainIds,\n      selectedAddress: address,\n    });\n  }\n\n  /**\n   * Restart token detection polling period and call detectNewTokens\n   * in case of address change or user session initialization.\n   *\n   * @param options - Options for restart token detection.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances\n   * @param options.chainIds - The chain IDs of the network client to use.\n   */\n  async #restartTokenDetection({\n    selectedAddress,\n    chainIds,\n  }: {\n    selectedAddress?: string;\n    chainIds?: Hex[];\n  } = {}): Promise<void> {\n    await this.detectTokens({\n      chainIds,\n      selectedAddress,\n    });\n    this.setIntervalLength(DEFAULT_INTERVAL);\n  }\n\n  #getChainsToDetect(\n    clientNetworks: NetworkClient[],\n    supportedNetworks: number[] | null | undefined,\n  ) {\n    const chainsToDetectUsingAccountAPI: Hex[] = [];\n    const chainsToDetectUsingRpc: NetworkClient[] = [];\n\n    clientNetworks.forEach(({ chainId, networkClientId }) => {\n      if (supportedNetworks?.includes(hexToNumber(chainId))) {\n        chainsToDetectUsingAccountAPI.push(chainId);\n      } else {\n        chainsToDetectUsingRpc.push({ chainId, networkClientId });\n      }\n    });\n\n    return { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI };\n  }\n\n  async #attemptAccountAPIDetection(\n    chainsToDetectUsingAccountAPI: Hex[],\n    addressToDetect: string,\n    supportedNetworks: number[] | null,\n  ) {\n    return await this.#addDetectedTokensViaAPI({\n      chainIds: chainsToDetectUsingAccountAPI,\n      selectedAddress: addressToDetect,\n      supportedNetworks,\n    });\n  }\n\n  #addChainsToRpcDetection(\n    chainsToDetectUsingRpc: NetworkClient[],\n    chainsToDetectUsingAccountAPI: Hex[],\n    clientNetworks: NetworkClient[],\n  ): void {\n    chainsToDetectUsingAccountAPI.forEach((chainId) => {\n      const networkEntry = clientNetworks.find(\n        (network) => network.chainId === chainId,\n      );\n      if (networkEntry) {\n        chainsToDetectUsingRpc.push({\n          chainId: networkEntry.chainId,\n          networkClientId: networkEntry.networkClientId,\n        });\n      }\n    });\n  }\n\n  #shouldDetectTokens(chainId: Hex): boolean {\n    if (!isTokenDetectionSupportedForNetwork(chainId)) {\n      return false;\n    }\n    if (\n      !this.#isDetectionEnabledFromPreferences &&\n      chainId !== ChainId.mainnet\n    ) {\n      return false;\n    }\n\n    const isMainnetDetectionInactive =\n      !this.#isDetectionEnabledFromPreferences && chainId === ChainId.mainnet;\n    if (isMainnetDetectionInactive) {\n      this.#tokensChainsCache = this.#getConvertedStaticMainnetTokenList();\n    } else {\n      const { tokensChainsCache } = this.messagingSystem.call(\n        'TokenListController:getState',\n      );\n      this.#tokensChainsCache = tokensChainsCache ?? {};\n    }\n\n    return true;\n  }\n\n  async #detectTokensUsingRpc(\n    chainsToDetectUsingRpc: NetworkClient[],\n    addressToDetect: string,\n  ): Promise<void> {\n    for (const { chainId, networkClientId } of chainsToDetectUsingRpc) {\n      if (!this.#shouldDetectTokens(chainId)) {\n        continue;\n      }\n\n      const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n        chainId,\n        selectedAddress: addressToDetect,\n      });\n      const tokenDetectionPromises = tokenCandidateSlices.map((tokensSlice) =>\n        this.#addDetectedTokens({\n          tokensSlice,\n          selectedAddress: addressToDetect,\n          networkClientId,\n          chainId,\n        }),\n      );\n\n      await Promise.all(tokenDetectionPromises);\n    }\n  }\n\n  /**\n   * For each token in the token list provided by the TokenListController, checks the token's balance for the selected account address on the active network.\n   * On mainnet, if token detection is disabled in preferences, ERC20 token auto detection will be triggered for each contract address in the legacy token list from the @metamask/contract-metadata repo.\n   *\n   * @param options - Options for token detection.\n   * @param options.chainIds - The chain IDs of the network client to use.\n   * @param options.selectedAddress - the selectedAddress against which to detect for token balances.\n   */\n  async detectTokens({\n    chainIds,\n    selectedAddress,\n  }: {\n    chainIds?: Hex[];\n    selectedAddress?: string;\n  } = {}): Promise<void> {\n    if (!this.isActive) {\n      return;\n    }\n\n    const addressToDetect = selectedAddress ?? this.#getSelectedAddress();\n    const clientNetworks = this.#getCorrectNetworkClientIdByChainId(chainIds);\n\n    let supportedNetworks;\n    if (this.#accountsAPI.isAccountsAPIEnabled) {\n      supportedNetworks = await this.#accountsAPI.getSupportedNetworks();\n    }\n    const { chainsToDetectUsingRpc, chainsToDetectUsingAccountAPI } =\n      this.#getChainsToDetect(clientNetworks, supportedNetworks);\n\n    // Try detecting tokens via Account API first if conditions allow\n    if (supportedNetworks && chainsToDetectUsingAccountAPI.length > 0) {\n      const apiResult = await this.#attemptAccountAPIDetection(\n        chainsToDetectUsingAccountAPI,\n        addressToDetect,\n        supportedNetworks,\n      );\n\n      // If API succeeds and no chains are left for RPC detection, we can return early\n      if (\n        apiResult?.result === 'success' &&\n        chainsToDetectUsingRpc.length === 0\n      ) {\n        return;\n      }\n\n      // If API fails or chainsToDetectUsingRpc still has items, add chains to RPC detection\n      this.#addChainsToRpcDetection(\n        chainsToDetectUsingRpc,\n        chainsToDetectUsingAccountAPI,\n        clientNetworks,\n      );\n    }\n\n    // Proceed with RPC detection if there are chains remaining in chainsToDetectUsingRpc\n    if (chainsToDetectUsingRpc.length > 0) {\n      await this.#detectTokensUsingRpc(chainsToDetectUsingRpc, addressToDetect);\n    }\n  }\n\n  #getSlicesOfTokensToDetect({\n    chainId,\n    selectedAddress,\n  }: {\n    chainId: Hex;\n    selectedAddress: string;\n  }): string[][] {\n    const { allTokens, allDetectedTokens, allIgnoredTokens } =\n      this.messagingSystem.call('TokensController:getState');\n    const [tokensAddresses, detectedTokensAddresses, ignoredTokensAddresses] = [\n      allTokens,\n      allDetectedTokens,\n      allIgnoredTokens,\n    ].map((tokens) =>\n      (tokens[chainId]?.[selectedAddress] ?? []).map((value) =>\n        typeof value === 'string' ? value : value.address,\n      ),\n    );\n\n    const tokensToDetect: string[] = [];\n    for (const tokenAddress of Object.keys(\n      this.#tokensChainsCache?.[chainId]?.data || {},\n    )) {\n      if (\n        [\n          tokensAddresses,\n          detectedTokensAddresses,\n          ignoredTokensAddresses,\n        ].every(\n          (addresses) =>\n            !addresses.find((address) =>\n              isEqualCaseInsensitive(address, tokenAddress),\n            ),\n        )\n      ) {\n        tokensToDetect.push(tokenAddress);\n      }\n    }\n\n    const slicesOfTokensToDetect = [];\n    for (let i = 0, size = 1000; i < tokensToDetect.length; i += size) {\n      slicesOfTokensToDetect.push(tokensToDetect.slice(i, i + size));\n    }\n\n    return slicesOfTokensToDetect;\n  }\n\n  #getConvertedStaticMainnetTokenList(): TokensChainsCache {\n    const data: TokenListMap = Object.entries(STATIC_MAINNET_TOKEN_LIST).reduce(\n      (acc, [key, value]) => ({\n        ...acc,\n        [key]: {\n          name: value.name,\n          symbol: value.symbol,\n          decimals: value.decimals,\n          address: value.address,\n          aggregators: [],\n          iconUrl: value?.iconUrl,\n        },\n      }),\n      {},\n    );\n    return {\n      '0x1': {\n        data,\n        timestamp: 0,\n      },\n    };\n  }\n\n  /**\n   * This adds detected tokens from the Accounts API, avoiding the multi-call RPC calls for balances\n   * @param options - method arguments\n   * @param options.selectedAddress - address to check against\n   * @param options.chainIds - array of chainIds to check tokens for\n   * @param options.supportedNetworks - array of chainIds to check tokens for\n   * @returns a success or failed object\n   */\n  async #addDetectedTokensViaAPI({\n    selectedAddress,\n    chainIds,\n    supportedNetworks,\n  }: {\n    selectedAddress: string;\n    chainIds: Hex[];\n    supportedNetworks: number[] | null;\n  }) {\n    return await safelyExecute(async () => {\n      // Fetch balances for multiple chain IDs at once\n      const tokenBalancesByChain = await this.#accountsAPI\n        .getMultiNetworksBalances(selectedAddress, chainIds, supportedNetworks)\n        .catch(() => null);\n\n      if (\n        !tokenBalancesByChain ||\n        Object.keys(tokenBalancesByChain).length === 0\n      ) {\n        return { result: 'failed' } as const;\n      }\n\n      // Process each chain ID individually\n      for (const chainId of chainIds) {\n        const isTokenDetectionInactiveInMainnet =\n          !this.#isDetectionEnabledFromPreferences &&\n          chainId === ChainId.mainnet;\n        const { tokensChainsCache } = this.messagingSystem.call(\n          'TokenListController:getState',\n        );\n        this.#tokensChainsCache = isTokenDetectionInactiveInMainnet\n          ? this.#getConvertedStaticMainnetTokenList()\n          : tokensChainsCache ?? {};\n\n        // Generate token candidates based on chainId and selectedAddress\n        const tokenCandidateSlices = this.#getSlicesOfTokensToDetect({\n          chainId,\n          selectedAddress,\n        });\n\n        // Filter balances for the current chainId\n        const tokenBalances = tokenBalancesByChain.filter(\n          (balance) => balance.chainId === hexToNumber(chainId),\n        );\n\n        if (!tokenBalances || tokenBalances.length === 0) {\n          continue;\n        }\n\n        // Use helper function to filter tokens with balance for this chainId\n        const { tokensWithBalance, eventTokensDetails } =\n          this.#filterAndBuildTokensWithBalance(\n            tokenCandidateSlices,\n            tokenBalances,\n            chainId,\n          );\n\n        if (tokensWithBalance.length) {\n          this.#trackMetaMetricsEvent({\n            event: 'Token Detected',\n            category: 'Wallet',\n            properties: {\n              tokens: eventTokensDetails,\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              token_standard: ERC20,\n              // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              asset_type: ASSET_TYPES.TOKEN,\n            },\n          });\n\n          await this.messagingSystem.call(\n            'TokensController:addDetectedTokens',\n            tokensWithBalance,\n            {\n              selectedAddress,\n              chainId,\n            },\n          );\n        }\n      }\n\n      return { result: 'success' } as const;\n    });\n  }\n\n  /**\n   * Helper function to filter and build token data for detected tokens\n   * @param options.tokenCandidateSlices - these are tokens we know a user does not have (by checking the tokens controller).\n   * We will use these these token candidates to determine if a token found from the API is valid to be added on the users wallet.\n   * It will also prevent us to adding tokens a user already has\n   * @param tokenBalances - Tokens balances fetched from API\n   * @param chainId - The chain ID being processed\n   * @returns an object containing tokensWithBalance and eventTokensDetails arrays\n   */\n\n  #filterAndBuildTokensWithBalance(\n    tokenCandidateSlices: string[][],\n    tokenBalances:\n      | {\n          object: string;\n          type?: string;\n          timestamp?: string;\n          address: string;\n          symbol: string;\n          name: string;\n          decimals: number;\n          chainId: number;\n          balance: string;\n        }[]\n      | null,\n    chainId: Hex,\n  ) {\n    const tokensWithBalance: Token[] = [];\n    const eventTokensDetails: string[] = [];\n\n    const tokenCandidateSet = new Set<string>(tokenCandidateSlices.flat());\n\n    tokenBalances?.forEach((token) => {\n      const tokenAddress = token.address;\n\n      // Make sure the token to add is in our candidate list\n      if (!tokenCandidateSet.has(tokenAddress)) {\n        return;\n      }\n\n      // Retrieve token data from cache to safely add it\n      const tokenData = this.#tokensChainsCache[chainId]?.data[tokenAddress];\n\n      // We need specific data from tokensChainsCache to correctly create a token\n      // So even if we have a token that was detected correctly by the API, if its missing data we cannot safely add it.\n      if (!tokenData) {\n        return;\n      }\n\n      const { decimals, symbol, aggregators, iconUrl, name } = tokenData;\n      eventTokensDetails.push(`${symbol} - ${tokenAddress}`);\n      tokensWithBalance.push({\n        address: tokenAddress,\n        decimals,\n        symbol,\n        aggregators,\n        image: iconUrl,\n        isERC721: false,\n        name,\n      });\n    });\n\n    return { tokensWithBalance, eventTokensDetails };\n  }\n\n  async #addDetectedTokens({\n    tokensSlice,\n    selectedAddress,\n    networkClientId,\n    chainId,\n  }: {\n    tokensSlice: string[];\n    selectedAddress: string;\n    networkClientId: NetworkClientId;\n    chainId: Hex;\n  }): Promise<void> {\n    await safelyExecute(async () => {\n      const balances = await this.#getBalancesInSingleCall(\n        selectedAddress,\n        tokensSlice,\n        networkClientId,\n      );\n\n      const tokensWithBalance: Token[] = [];\n      const eventTokensDetails: string[] = [];\n      for (const nonZeroTokenAddress of Object.keys(balances)) {\n        const { decimals, symbol, aggregators, iconUrl, name } =\n          this.#tokensChainsCache[chainId].data[nonZeroTokenAddress];\n        eventTokensDetails.push(`${symbol} - ${nonZeroTokenAddress}`);\n        tokensWithBalance.push({\n          address: nonZeroTokenAddress,\n          decimals,\n          symbol,\n          aggregators,\n          image: iconUrl,\n          isERC721: false,\n          name,\n        });\n      }\n\n      if (tokensWithBalance.length) {\n        this.#trackMetaMetricsEvent({\n          event: 'Token Detected',\n          category: 'Wallet',\n          properties: {\n            tokens: eventTokensDetails,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            token_standard: ERC20,\n            // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n            // eslint-disable-next-line @typescript-eslint/naming-convention\n            asset_type: ASSET_TYPES.TOKEN,\n          },\n        });\n\n        await this.messagingSystem.call(\n          'TokensController:addDetectedTokens',\n          tokensWithBalance,\n          {\n            selectedAddress,\n            chainId,\n          },\n        );\n      }\n    });\n  }\n\n  #getSelectedAccount() {\n    return this.messagingSystem.call('AccountsController:getSelectedAccount');\n  }\n\n  #getSelectedAddress() {\n    // If the address is not defined (or empty), we fallback to the currently selected account's address\n    const account = this.messagingSystem.call(\n      'AccountsController:getAccount',\n      this.#selectedAccountId,\n    );\n    return account?.address || '';\n  }\n}\n\nexport default TokenDetectionController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs
index 2483493..3b4a5b4 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs
@@ -4,7 +4,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _TokenListController_instances, _TokenListController_onNetworkControllerStateChange, _TokenListController_startPolling, _TokenListController_fetchFromCache;
+var _TokenListController_instances, _TokenListController_onNetworkControllerStateChange, _TokenListController_startDeprecatedPolling, _TokenListController_fetchFromCache;
 Object.defineProperty(exports, "__esModule", { value: true });
 exports.TokenListController = exports.getDefaultTokenListState = void 0;
 const controller_utils_1 = require("@metamask/controller-utils");
@@ -54,6 +54,7 @@ class TokenListController extends (0, polling_controller_1.StaticIntervalPolling
         _TokenListController_instances.add(this);
         this.mutex = new async_mutex_1.Mutex();
         this.intervalDelay = interval;
+        this.setIntervalLength(interval);
         this.cacheRefreshThreshold = cacheRefreshThreshold;
         this.chainId = chainId;
         this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);
@@ -74,112 +75,116 @@ class TokenListController extends (0, polling_controller_1.StaticIntervalPolling
             });
         }
     }
+    // Eventually we want to remove start/restart/stop controls in favor of new _executePoll API
+    // Maintaining these functions for now until we can safely deprecate them for backwards compatibility
     /**
      * Start polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     async start() {
         if (!(0, assetsUtil_1.isTokenListSupportedForNetwork)(this.chainId)) {
             return;
         }
-        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startPolling).call(this);
+        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startDeprecatedPolling).call(this);
     }
     /**
      * Restart polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     async restart() {
         this.stopPolling();
-        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startPolling).call(this);
+        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startDeprecatedPolling).call(this);
     }
     /**
      * Stop polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     stop() {
         this.stopPolling();
     }
     /**
-     * Prepare to discard this controller.
-     *
      * This stops any active polling.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     destroy() {
         super.destroy();
         this.stopPolling();
     }
+    /**
+     * This stops any active polling intervals.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
+     */
     stopPolling() {
         if (this.intervalId) {
             clearInterval(this.intervalId);
         }
     }
     /**
-     * Fetching token list from the Token Service API.
+     * This starts a new polling loop for any given chain. Under the hood it is deduping polls
      *
      * @private
      * @param input - The input for the poll.
-     * @param input.networkClientId - The ID of the network client triggering the fetch.
+     * @param input.chainId - The chainId of the chain to trigger the fetch.
      * @returns A promise that resolves when this operation completes.
      */
-    async _executePoll({ networkClientId, }) {
-        return this.fetchTokenList(networkClientId);
+    async _executePoll({ chainId }) {
+        return this.fetchTokenList(chainId);
     }
     /**
-     * Fetching token list from the Token Service API.
+     * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)
      *
-     * @param networkClientId - The ID of the network client triggering the fetch.
+     * @param chainId - The chainId of the current chain triggering the fetch.
      */
-    async fetchTokenList(networkClientId) {
+    async fetchTokenList(chainId) {
         const releaseLock = await this.mutex.acquire();
-        let networkClient;
-        if (networkClientId) {
-            networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);
-        }
-        const chainId = networkClient?.configuration.chainId ?? this.chainId;
         try {
             const { tokensChainsCache } = this.state;
             let tokenList = {};
+            // Attempt to fetch cached tokens
             const cachedTokens = await (0, controller_utils_1.safelyExecute)(() => __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_fetchFromCache).call(this, chainId));
             if (cachedTokens) {
                 // Use non-expired cached tokens
                 tokenList = { ...cachedTokens };
             }
             else {
-                // Fetch fresh token list
+                // Fetch fresh token list from the API
                 const tokensFromAPI = await (0, controller_utils_1.safelyExecute)(() => (0, token_service_1.fetchTokenListByChainId)(chainId, this.abortController.signal));
-                if (!tokensFromAPI) {
-                    // Fallback to expired cached tokens
-                    tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };
-                    this.update(() => {
-                        return {
-                            ...this.state,
-                            tokenList,
-                            tokensChainsCache,
+                if (tokensFromAPI) {
+                    // Format tokens from API (HTTP) and update tokenList
+                    tokenList = {};
+                    for (const token of tokensFromAPI) {
+                        tokenList[token.address] = {
+                            ...token,
+                            aggregators: (0, assetsUtil_1.formatAggregatorNames)(token.aggregators),
+                            iconUrl: (0, assetsUtil_1.formatIconUrlWithProxy)({
+                                chainId,
+                                tokenAddress: token.address,
+                            }),
                         };
-                    });
-                    return;
+                    }
                 }
-                for (const token of tokensFromAPI) {
-                    const formattedToken = {
-                        ...token,
-                        aggregators: (0, assetsUtil_1.formatAggregatorNames)(token.aggregators),
-                        iconUrl: (0, assetsUtil_1.formatIconUrlWithProxy)({
-                            chainId,
-                            tokenAddress: token.address,
-                        }),
-                    };
-                    tokenList[token.address] = formattedToken;
+                else {
+                    // Fallback to expired cached tokens
+                    tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };
                 }
             }
-            const updatedTokensChainsCache = {
-                ...tokensChainsCache,
-                [chainId]: {
-                    timestamp: Date.now(),
-                    data: tokenList,
-                },
-            };
+            // Update the state with a single update for both tokenList and tokenChainsCache
             this.update(() => {
                 return {
                     ...this.state,
-                    tokenList,
-                    tokensChainsCache: updatedTokensChainsCache,
+                    tokenList: this.chainId === chainId ? tokenList : this.state.tokenList,
+                    tokensChainsCache: {
+                        ...tokensChainsCache,
+                        [chainId]: {
+                            timestamp: Date.now(),
+                            data: tokenList,
+                        },
+                    },
                 };
             });
         }
@@ -239,19 +244,21 @@ async function _TokenListController_onNetworkControllerStateChange(networkContro
                     tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},
                 };
             });
-            await this.restart();
         }
     }
-}, _TokenListController_startPolling =
+}, _TokenListController_startDeprecatedPolling =
 /**
- * Starts a new polling interval.
+ * Starts a new polling interval for a given chainId (this should be deprecated in favor of _executePoll)
+ * @deprecated This method is deprecated and will be removed in the future.
+ * Consider using the new polling approach instead
  */
-async function _TokenListController_startPolling() {
-    await (0, controller_utils_1.safelyExecute)(() => this.fetchTokenList());
+async function _TokenListController_startDeprecatedPolling() {
+    // renaming this to avoid collision with base class
+    await (0, controller_utils_1.safelyExecute)(() => this.fetchTokenList(this.chainId));
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
     // eslint-disable-next-line @typescript-eslint/no-misused-promises
     this.intervalId = setInterval(async () => {
-        await (0, controller_utils_1.safelyExecute)(() => this.fetchTokenList());
+        await (0, controller_utils_1.safelyExecute)(() => this.fetchTokenList(this.chainId));
     }, this.intervalDelay);
 }, _TokenListController_fetchFromCache =
 /**
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs.map b/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs.map
index e2d4ef3..4ef8cb6 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenListController.cjs","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":";;;;;;;;;AAKA,iEAA2D;AAO3D,qEAA+E;AAE/E,6CAAoC;AAEpC,iDAIsB;AACtB,uDAA0D;AAE1D,MAAM,gBAAgB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AAC7C,MAAM,iBAAiB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC;AAE9C,MAAM,IAAI,GAAG,qBAAqB,CAAC;AAsDnC,MAAM,QAAQ,GAAG;IACf,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE;IAC7C,iBAAiB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE;IACrD,8BAA8B,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE;CACnE,CAAC;AAEK,MAAM,wBAAwB,GAAG,GAAmB,EAAE;IAC3D,OAAO;QACL,SAAS,EAAE,EAAE;QACb,iBAAiB,EAAE,EAAE;QACrB,8BAA8B,EAAE,KAAK;KACtC,CAAC;AACJ,CAAC,CAAC;AANW,QAAA,wBAAwB,4BAMnC;AAOF;;GAEG;AACH,MAAa,mBAAoB,SAAQ,IAAA,oDAA+B,GAIvE;IAaC;;;;;;;;;;;OAWG;IACH,YAAY,EACV,OAAO,EACP,8BAA8B,GAAG,KAAK,EACtC,oBAAoB,EACpB,QAAQ,GAAG,gBAAgB,EAC3B,qBAAqB,GAAG,iBAAiB,EACzC,SAAS,EACT,KAAK,GAWN;QACC,KAAK,CAAC;YACJ,IAAI;YACJ,QAAQ;YACR,SAAS;YACT,KAAK,EAAE,EAAE,GAAG,IAAA,gCAAwB,GAAE,EAAE,GAAG,KAAK,EAAE;SACnD,CAAC,CAAC;;QAhDY,UAAK,GAAG,IAAI,mBAAK,EAAE,CAAC;QAiDnC,IAAI,CAAC,aAAa,GAAG,QAAQ,CAAC;QAC9B,IAAI,CAAC,qBAAqB,GAAG,qBAAqB,CAAC;QACnD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,oCAAoC,CAAC,8BAA8B,CAAC,CAAC;QAC1E,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC7C,IAAI,oBAAoB,EAAE;YACxB,gFAAgF;YAChF,kEAAkE;YAClE,oBAAoB,CAAC,KAAK,EAAE,sBAAsB,EAAE,EAAE;gBACpD,MAAM,uBAAA,IAAI,2FAAgC,MAApC,IAAI,EAAiC,sBAAsB,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,SAAS,CAC5B,+BAA+B;YAC/B,gFAAgF;YAChF,kEAAkE;YAClE,KAAK,EAAE,sBAAsB,EAAE,EAAE;gBAC/B,MAAM,uBAAA,IAAI,2FAAgC,MAApC,IAAI,EAAiC,sBAAsB,CAAC,CAAC;YACrE,CAAC,CACF,CAAC;SACH;IACH,CAAC;IAkCD;;OAEG;IACH,KAAK,CAAC,KAAK;QACT,IAAI,CAAC,IAAA,2CAA8B,EAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACjD,OAAO;SACR;QACD,MAAM,uBAAA,IAAI,yEAAc,MAAlB,IAAI,CAAgB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO;QACX,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,MAAM,uBAAA,IAAI,yEAAc,MAAlB,IAAI,CAAgB,CAAC;IAC7B,CAAC;IAED;;OAEG;IACH,IAAI;QACF,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACM,OAAO;QACd,KAAK,CAAC,OAAO,EAAE,CAAC;QAChB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAEO,WAAW;QACjB,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,aAAa,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAChC;IACH,CAAC;IAcD;;;;;;;OAOG;IACH,KAAK,CAAC,YAAY,CAAC,EACjB,eAAe,GACO;QACtB,OAAO,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,CAAC;IAC9C,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAAC,eAAiC;QACpD,MAAM,WAAW,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC;QAC/C,IAAI,aAAa,CAAC;QAClB,IAAI,eAAe,EAAE;YACnB,aAAa,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACvC,wCAAwC,EACxC,eAAe,CAChB,CAAC;SACH;QACD,MAAM,OAAO,GAAG,aAAa,EAAE,aAAa,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC;QACrE,IAAI;YACF,MAAM,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACzC,IAAI,SAAS,GAAiB,EAAE,CAAC;YACjC,MAAM,YAAY,GAAG,MAAM,IAAA,gCAAa,EAAC,GAAG,EAAE,CAC5C,uBAAA,IAAI,2EAAgB,MAApB,IAAI,EAAiB,OAAO,CAAC,CAC9B,CAAC;YACF,IAAI,YAAY,EAAE;gBAChB,gCAAgC;gBAChC,SAAS,GAAG,EAAE,GAAG,YAAY,EAAE,CAAC;aACjC;iBAAM;gBACL,yBAAyB;gBACzB,MAAM,aAAa,GAAG,MAAM,IAAA,gCAAa,EACvC,GAAG,EAAE,CACH,IAAA,uCAAuB,EACrB,OAAO,EACP,IAAI,CAAC,eAAe,CAAC,MAAM,CACC,CACjC,CAAC;gBAEF,IAAI,CAAC,aAAa,EAAE;oBAClB,oCAAoC;oBACpC,SAAS,GAAG,EAAE,GAAG,CAAC,iBAAiB,CAAC,OAAO,CAAC,EAAE,IAAI,IAAI,EAAE,CAAC,EAAE,CAAC;oBAC5D,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;wBACf,OAAO;4BACL,GAAG,IAAI,CAAC,KAAK;4BACb,SAAS;4BACT,iBAAiB;yBAClB,CAAC;oBACJ,CAAC,CAAC,CAAC;oBACH,OAAO;iBACR;gBACD,KAAK,MAAM,KAAK,IAAI,aAAa,EAAE;oBACjC,MAAM,cAAc,GAAmB;wBACrC,GAAG,KAAK;wBACR,WAAW,EAAE,IAAA,kCAAqB,EAAC,KAAK,CAAC,WAAW,CAAC;wBACrD,OAAO,EAAE,IAAA,mCAAsB,EAAC;4BAC9B,OAAO;4BACP,YAAY,EAAE,KAAK,CAAC,OAAO;yBAC5B,CAAC;qBACH,CAAC;oBACF,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,cAAc,CAAC;iBAC3C;aACF;YACD,MAAM,wBAAwB,GAAsB;gBAClD,GAAG,iBAAiB;gBACpB,CAAC,OAAO,CAAC,EAAE;oBACT,SAAS,EAAE,IAAI,CAAC,GAAG,EAAE;oBACrB,IAAI,EAAE,SAAS;iBAChB;aACF,CAAC;YACF,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;gBACf,OAAO;oBACL,GAAG,IAAI,CAAC,KAAK;oBACb,SAAS;oBACT,iBAAiB,EAAE,wBAAwB;iBAC5C,CAAC;YACJ,CAAC,CAAC,CAAC;SACJ;gBAAS;YACR,WAAW,EAAE,CAAC;SACf;IACH,CAAC;IAsBD;;OAEG;IACH,qBAAqB;QACnB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO;gBACL,GAAG,IAAI,CAAC,KAAK;gBACb,SAAS,EAAE,EAAE;gBACb,iBAAiB,EAAE,EAAE;aACtB,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,oCAAoC,CAAC,oBAA6B;QAChE,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;YACf,OAAO;gBACL,GAAG,IAAI,CAAC,KAAK;gBACb,8BAA8B,EAAE,oBAAoB;aACrD,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AA3SD,kDA2SC;;AA9NC;;;;;GAKG;AACH,KAAK,8DAAiC,sBAAoC;IACxE,MAAM,qBAAqB,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CACrD,wCAAwC,EACxC,sBAAsB,CAAC,uBAAuB,CAC/C,CAAC;IACF,MAAM,EAAE,OAAO,EAAE,GAAG,qBAAqB,CAAC,aAAa,CAAC;IAExD,IAAI,IAAI,CAAC,OAAO,KAAK,OAAO,EAAE;QAC5B,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC;QAC7B,IAAI,CAAC,eAAe,GAAG,IAAI,eAAe,EAAE,CAAC;QAC7C,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,8BAA8B,EAAE;YAC7C,IAAI,CAAC,qBAAqB,EAAE,CAAC;SAC9B;aAAM;YACL,4DAA4D;YAC5D,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE;gBACf,OAAO;oBACL,GAAG,IAAI,CAAC,KAAK;oBACb,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAiB,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,IAAI,IAAI,EAAE;iBAClE,CAAC;YACJ,CAAC,CAAC,CAAC;YACH,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;SACtB;KACF;AACH,CAAC;AA2CD;;GAEG;AACH,KAAK;IACH,MAAM,IAAA,gCAAa,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACjD,gFAAgF;IAChF,kEAAkE;IAClE,IAAI,CAAC,UAAU,GAAG,WAAW,CAAC,KAAK,IAAI,EAAE;QACvC,MAAM,IAAA,gCAAa,EAAC,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;IACnD,CAAC,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;AACzB,CAAC;AA6FD;;;;;;GAMG;AACH,KAAK,8CAAiB,OAAY;IAChC,MAAM,EAAE,iBAAiB,EAAE,GAAmB,IAAI,CAAC,KAAK,CAAC;IACzD,MAAM,SAAS,GAAG,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IACvB,IACE,SAAS,EAAE,IAAI;QACf,GAAG,GAAG,SAAS,EAAE,SAAS,GAAG,IAAI,CAAC,qBAAqB,EACvD;QACA,OAAO,SAAS,CAAC,IAAI,CAAC;KACvB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AA8BH,kBAAe,mBAAmB,CAAC","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { safelyExecute } from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n\nimport {\n  isTokenListSupportedForNetwork,\n  formatAggregatorNames,\n  formatIconUrlWithProxy,\n} from './assetsUtil';\nimport { fetchTokenListByChainId } from './token-service';\n\nconst DEFAULT_INTERVAL = 24 * 60 * 60 * 1000;\nconst DEFAULT_THRESHOLD = 24 * 60 * 60 * 1000;\n\nconst name = 'TokenListController';\n\nexport type TokenListToken = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  occurrences: number;\n  aggregators: string[];\n  iconUrl: string;\n};\n\nexport type TokenListMap = Record<string, TokenListToken>;\n\ntype DataCache = {\n  timestamp: number;\n  data: TokenListMap;\n};\nexport type TokensChainsCache = {\n  [chainId: Hex]: DataCache;\n};\n\nexport type TokenListState = {\n  tokenList: TokenListMap;\n  tokensChainsCache: TokensChainsCache;\n  preventPollingOnNetworkRestart: boolean;\n};\n\nexport type TokenListStateChange = ControllerStateChangeEvent<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerEvents = TokenListStateChange;\n\nexport type GetTokenListState = ControllerGetStateAction<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerActions = GetTokenListState;\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\ntype AllowedEvents = NetworkControllerStateChangeEvent;\n\nexport type TokenListControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  TokenListControllerActions | AllowedActions,\n  TokenListControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nconst metadata = {\n  tokenList: { persist: true, anonymous: true },\n  tokensChainsCache: { persist: true, anonymous: true },\n  preventPollingOnNetworkRestart: { persist: true, anonymous: true },\n};\n\nexport const getDefaultTokenListState = (): TokenListState => {\n  return {\n    tokenList: {},\n    tokensChainsCache: {},\n    preventPollingOnNetworkRestart: false,\n  };\n};\n\n/** The input to start polling for the {@link TokenListController} */\ntype TokenListPollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that passively polls on a set interval for the list of tokens from metaswaps api\n */\nexport class TokenListController extends StaticIntervalPollingController<TokenListPollingInput>()<\n  typeof name,\n  TokenListState,\n  TokenListControllerMessenger\n> {\n  private readonly mutex = new Mutex();\n\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay: number;\n\n  private readonly cacheRefreshThreshold: number;\n\n  private chainId: Hex;\n\n  private abortController: AbortController;\n\n  /**\n   * Creates a TokenListController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onNetworkStateChange - A function for registering an event handler for network state changes.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.cacheRefreshThreshold - The token cache expiry time, in milliseconds.\n   * @param options.messenger - A restricted controller messenger.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.preventPollingOnNetworkRestart - Determines whether to prevent poilling on network restart in extension.\n   */\n  constructor({\n    chainId,\n    preventPollingOnNetworkRestart = false,\n    onNetworkStateChange,\n    interval = DEFAULT_INTERVAL,\n    cacheRefreshThreshold = DEFAULT_THRESHOLD,\n    messenger,\n    state,\n  }: {\n    chainId: Hex;\n    preventPollingOnNetworkRestart?: boolean;\n    onNetworkStateChange?: (\n      listener: (networkState: NetworkState) => void,\n    ) => void;\n    interval?: number;\n    cacheRefreshThreshold?: number;\n    messenger: TokenListControllerMessenger;\n    state?: Partial<TokenListState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...getDefaultTokenListState(), ...state },\n    });\n    this.intervalDelay = interval;\n    this.cacheRefreshThreshold = cacheRefreshThreshold;\n    this.chainId = chainId;\n    this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);\n    this.abortController = new AbortController();\n    if (onNetworkStateChange) {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkStateChange(async (networkControllerState) => {\n        await this.#onNetworkControllerStateChange(networkControllerState);\n      });\n    } else {\n      this.messagingSystem.subscribe(\n        'NetworkController:stateChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerStateChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  /**\n   * Updates state and restarts polling on changes to the network controller\n   * state.\n   *\n   * @param networkControllerState - The updated network controller state.\n   */\n  async #onNetworkControllerStateChange(networkControllerState: NetworkState) {\n    const selectedNetworkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkControllerState.selectedNetworkClientId,\n    );\n    const { chainId } = selectedNetworkClient.configuration;\n\n    if (this.chainId !== chainId) {\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.chainId = chainId;\n      if (this.state.preventPollingOnNetworkRestart) {\n        this.clearingTokenListData();\n      } else {\n        // Ensure tokenList is referencing data from correct network\n        this.update(() => {\n          return {\n            ...this.state,\n            tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},\n          };\n        });\n        await this.restart();\n      }\n    }\n  }\n\n  /**\n   * Start polling for the token list.\n   */\n  async start() {\n    if (!isTokenListSupportedForNetwork(this.chainId)) {\n      return;\n    }\n    await this.#startPolling();\n  }\n\n  /**\n   * Restart polling for the token list.\n   */\n  async restart() {\n    this.stopPolling();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for the token list.\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    await safelyExecute(() => this.fetchTokenList());\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this.fetchTokenList());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({\n    networkClientId,\n  }: TokenListPollingInput): Promise<void> {\n    return this.fetchTokenList(networkClientId);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @param networkClientId - The ID of the network client triggering the fetch.\n   */\n  async fetchTokenList(networkClientId?: NetworkClientId): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    let networkClient;\n    if (networkClientId) {\n      networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n    }\n    const chainId = networkClient?.configuration.chainId ?? this.chainId;\n    try {\n      const { tokensChainsCache } = this.state;\n      let tokenList: TokenListMap = {};\n      const cachedTokens = await safelyExecute(() =>\n        this.#fetchFromCache(chainId),\n      );\n      if (cachedTokens) {\n        // Use non-expired cached tokens\n        tokenList = { ...cachedTokens };\n      } else {\n        // Fetch fresh token list\n        const tokensFromAPI = await safelyExecute(\n          () =>\n            fetchTokenListByChainId(\n              chainId,\n              this.abortController.signal,\n            ) as Promise<TokenListToken[]>,\n        );\n\n        if (!tokensFromAPI) {\n          // Fallback to expired cached tokens\n          tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };\n          this.update(() => {\n            return {\n              ...this.state,\n              tokenList,\n              tokensChainsCache,\n            };\n          });\n          return;\n        }\n        for (const token of tokensFromAPI) {\n          const formattedToken: TokenListToken = {\n            ...token,\n            aggregators: formatAggregatorNames(token.aggregators),\n            iconUrl: formatIconUrlWithProxy({\n              chainId,\n              tokenAddress: token.address,\n            }),\n          };\n          tokenList[token.address] = formattedToken;\n        }\n      }\n      const updatedTokensChainsCache: TokensChainsCache = {\n        ...tokensChainsCache,\n        [chainId]: {\n          timestamp: Date.now(),\n          data: tokenList,\n        },\n      };\n      this.update(() => {\n        return {\n          ...this.state,\n          tokenList,\n          tokensChainsCache: updatedTokensChainsCache,\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Checks if the Cache timestamp is valid,\n   * if yes data in cache will be returned\n   * otherwise null will be returned.\n   * @param chainId - The chain ID of the network for which to fetch the cache.\n   * @returns The cached data, or `null` if the cache was expired.\n   */\n  async #fetchFromCache(chainId: Hex): Promise<TokenListMap | null> {\n    const { tokensChainsCache }: TokenListState = this.state;\n    const dataCache = tokensChainsCache[chainId];\n    const now = Date.now();\n    if (\n      dataCache?.data &&\n      now - dataCache?.timestamp < this.cacheRefreshThreshold\n    ) {\n      return dataCache.data;\n    }\n    return null;\n  }\n\n  /**\n   * Clearing tokenList and tokensChainsCache explicitly.\n   */\n  clearingTokenListData(): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        tokenList: {},\n        tokensChainsCache: {},\n      };\n    });\n  }\n\n  /**\n   * Updates preventPollingOnNetworkRestart from extension.\n   *\n   * @param shouldPreventPolling - Determine whether to prevent polling on network change\n   */\n  updatePreventPollingOnNetworkRestart(shouldPreventPolling: boolean): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        preventPollingOnNetworkRestart: shouldPreventPolling,\n      };\n    });\n  }\n}\n\nexport default TokenListController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenListController.cjs","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { safelyExecute } from '@metamask/controller-utils';\nimport type {\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n\nimport {\n  isTokenListSupportedForNetwork,\n  formatAggregatorNames,\n  formatIconUrlWithProxy,\n} from './assetsUtil';\nimport { fetchTokenListByChainId } from './token-service';\n\nconst DEFAULT_INTERVAL = 24 * 60 * 60 * 1000;\nconst DEFAULT_THRESHOLD = 24 * 60 * 60 * 1000;\n\nconst name = 'TokenListController';\n\nexport type TokenListToken = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  occurrences: number;\n  aggregators: string[];\n  iconUrl: string;\n};\n\nexport type TokenListMap = Record<string, TokenListToken>;\n\ntype DataCache = {\n  timestamp: number;\n  data: TokenListMap;\n};\nexport type TokensChainsCache = {\n  [chainId: Hex]: DataCache;\n};\n\nexport type TokenListState = {\n  tokenList: TokenListMap;\n  tokensChainsCache: TokensChainsCache;\n  preventPollingOnNetworkRestart: boolean;\n};\n\nexport type TokenListStateChange = ControllerStateChangeEvent<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerEvents = TokenListStateChange;\n\nexport type GetTokenListState = ControllerGetStateAction<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerActions = GetTokenListState;\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\ntype AllowedEvents = NetworkControllerStateChangeEvent;\n\nexport type TokenListControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  TokenListControllerActions | AllowedActions,\n  TokenListControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nconst metadata = {\n  tokenList: { persist: true, anonymous: true },\n  tokensChainsCache: { persist: true, anonymous: true },\n  preventPollingOnNetworkRestart: { persist: true, anonymous: true },\n};\n\nexport const getDefaultTokenListState = (): TokenListState => {\n  return {\n    tokenList: {},\n    tokensChainsCache: {},\n    preventPollingOnNetworkRestart: false,\n  };\n};\n\n/** The input to start polling for the {@link TokenListController} */\ntype TokenListPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval for the list of tokens from metaswaps api\n */\nexport class TokenListController extends StaticIntervalPollingController<TokenListPollingInput>()<\n  typeof name,\n  TokenListState,\n  TokenListControllerMessenger\n> {\n  private readonly mutex = new Mutex();\n\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay: number;\n\n  private readonly cacheRefreshThreshold: number;\n\n  private chainId: Hex;\n\n  private abortController: AbortController;\n\n  /**\n   * Creates a TokenListController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onNetworkStateChange - A function for registering an event handler for network state changes.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.cacheRefreshThreshold - The token cache expiry time, in milliseconds.\n   * @param options.messenger - A restricted controller messenger.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.preventPollingOnNetworkRestart - Determines whether to prevent poilling on network restart in extension.\n   */\n  constructor({\n    chainId,\n    preventPollingOnNetworkRestart = false,\n    onNetworkStateChange,\n    interval = DEFAULT_INTERVAL,\n    cacheRefreshThreshold = DEFAULT_THRESHOLD,\n    messenger,\n    state,\n  }: {\n    chainId: Hex;\n    preventPollingOnNetworkRestart?: boolean;\n    onNetworkStateChange?: (\n      listener: (networkState: NetworkState) => void,\n    ) => void;\n    interval?: number;\n    cacheRefreshThreshold?: number;\n    messenger: TokenListControllerMessenger;\n    state?: Partial<TokenListState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...getDefaultTokenListState(), ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.cacheRefreshThreshold = cacheRefreshThreshold;\n    this.chainId = chainId;\n    this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);\n    this.abortController = new AbortController();\n    if (onNetworkStateChange) {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkStateChange(async (networkControllerState) => {\n        await this.#onNetworkControllerStateChange(networkControllerState);\n      });\n    } else {\n      this.messagingSystem.subscribe(\n        'NetworkController:stateChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerStateChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  /**\n   * Updates state and restarts polling on changes to the network controller\n   * state.\n   *\n   * @param networkControllerState - The updated network controller state.\n   */\n  async #onNetworkControllerStateChange(networkControllerState: NetworkState) {\n    const selectedNetworkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkControllerState.selectedNetworkClientId,\n    );\n    const { chainId } = selectedNetworkClient.configuration;\n\n    if (this.chainId !== chainId) {\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.chainId = chainId;\n      if (this.state.preventPollingOnNetworkRestart) {\n        this.clearingTokenListData();\n      } else {\n        // Ensure tokenList is referencing data from correct network\n        this.update(() => {\n          return {\n            ...this.state,\n            tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},\n          };\n        });\n      }\n    }\n  }\n\n  // Eventually we want to remove start/restart/stop controls in favor of new _executePoll API\n  // Maintaining these functions for now until we can safely deprecate them for backwards compatibility\n  /**\n   * Start polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async start() {\n    if (!isTokenListSupportedForNetwork(this.chainId)) {\n      return;\n    }\n    await this.#startDeprecatedPolling();\n  }\n\n  /**\n   * Restart polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async restart() {\n    this.stopPolling();\n    await this.#startDeprecatedPolling();\n  }\n\n  /**\n   * Stop polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  /**\n   * This stops any active polling.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  /**\n   * This stops any active polling intervals.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval for a given chainId (this should be deprecated in favor of _executePoll)\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async #startDeprecatedPolling(): Promise<void> {\n    // renaming this to avoid collision with base class\n    await safelyExecute(() => this.fetchTokenList(this.chainId));\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this.fetchTokenList(this.chainId));\n    }, this.intervalDelay);\n  }\n\n  /**\n   * This starts a new polling loop for any given chain. Under the hood it is deduping polls\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.chainId - The chainId of the chain to trigger the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ chainId }: TokenListPollingInput): Promise<void> {\n    return this.fetchTokenList(chainId);\n  }\n\n  /**\n   * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)\n   *\n   * @param chainId - The chainId of the current chain triggering the fetch.\n   */\n  async fetchTokenList(chainId: Hex): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { tokensChainsCache } = this.state;\n      let tokenList: TokenListMap = {};\n      // Attempt to fetch cached tokens\n      const cachedTokens = await safelyExecute(() =>\n        this.#fetchFromCache(chainId),\n      );\n      if (cachedTokens) {\n        // Use non-expired cached tokens\n        tokenList = { ...cachedTokens };\n      } else {\n        // Fetch fresh token list from the API\n        const tokensFromAPI = await safelyExecute(\n          () =>\n            fetchTokenListByChainId(\n              chainId,\n              this.abortController.signal,\n            ) as Promise<TokenListToken[]>,\n        );\n\n        if (tokensFromAPI) {\n          // Format tokens from API (HTTP) and update tokenList\n          tokenList = {};\n          for (const token of tokensFromAPI) {\n            tokenList[token.address] = {\n              ...token,\n              aggregators: formatAggregatorNames(token.aggregators),\n              iconUrl: formatIconUrlWithProxy({\n                chainId,\n                tokenAddress: token.address,\n              }),\n            };\n          }\n        } else {\n          // Fallback to expired cached tokens\n          tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };\n        }\n      }\n\n      // Update the state with a single update for both tokenList and tokenChainsCache\n      this.update(() => {\n        return {\n          ...this.state,\n          tokenList:\n            this.chainId === chainId ? tokenList : this.state.tokenList,\n          tokensChainsCache: {\n            ...tokensChainsCache,\n            [chainId]: {\n              timestamp: Date.now(),\n              data: tokenList,\n            },\n          },\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Checks if the Cache timestamp is valid,\n   * if yes data in cache will be returned\n   * otherwise null will be returned.\n   * @param chainId - The chain ID of the network for which to fetch the cache.\n   * @returns The cached data, or `null` if the cache was expired.\n   */\n  async #fetchFromCache(chainId: Hex): Promise<TokenListMap | null> {\n    const { tokensChainsCache }: TokenListState = this.state;\n    const dataCache = tokensChainsCache[chainId];\n    const now = Date.now();\n    if (\n      dataCache?.data &&\n      now - dataCache?.timestamp < this.cacheRefreshThreshold\n    ) {\n      return dataCache.data;\n    }\n    return null;\n  }\n\n  /**\n   * Clearing tokenList and tokensChainsCache explicitly.\n   */\n  clearingTokenListData(): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        tokenList: {},\n        tokensChainsCache: {},\n      };\n    });\n  }\n\n  /**\n   * Updates preventPollingOnNetworkRestart from extension.\n   *\n   * @param shouldPreventPolling - Determine whether to prevent polling on network change\n   */\n  updatePreventPollingOnNetworkRestart(shouldPreventPolling: boolean): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        preventPollingOnNetworkRestart: shouldPreventPolling,\n      };\n    });\n  }\n}\n\nexport default TokenListController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts
index f5693e9..7115b90 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts
@@ -1,5 +1,5 @@
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedControllerMessenger } from "@metamask/base-controller";
-import type { NetworkClientId, NetworkControllerStateChangeEvent, NetworkState, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
+import type { NetworkControllerStateChangeEvent, NetworkState, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
 import type { Hex } from "@metamask/utils";
 declare const name = "TokenListController";
 export type TokenListToken = {
@@ -34,17 +34,17 @@ export type TokenListControllerMessenger = RestrictedControllerMessenger<typeof
 export declare const getDefaultTokenListState: () => TokenListState;
 /** The input to start polling for the {@link TokenListController} */
 type TokenListPollingInput = {
-    networkClientId: NetworkClientId;
+    chainId: Hex;
 };
 declare const TokenListController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenListPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenListPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenListPollingInput) => void>>;
     _executePoll(input: TokenListPollingInput): Promise<void>;
     startPolling(input: TokenListPollingInput): string;
     stopAllPolling(): void;
@@ -85,38 +85,49 @@ export declare class TokenListController extends TokenListController_base<typeof
     });
     /**
      * Start polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     start(): Promise<void>;
     /**
      * Restart polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     restart(): Promise<void>;
     /**
      * Stop polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     stop(): void;
     /**
-     * Prepare to discard this controller.
-     *
      * This stops any active polling.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     destroy(): void;
+    /**
+     * This stops any active polling intervals.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
+     */
     private stopPolling;
     /**
-     * Fetching token list from the Token Service API.
+     * This starts a new polling loop for any given chain. Under the hood it is deduping polls
      *
      * @private
      * @param input - The input for the poll.
-     * @param input.networkClientId - The ID of the network client triggering the fetch.
+     * @param input.chainId - The chainId of the chain to trigger the fetch.
      * @returns A promise that resolves when this operation completes.
      */
-    _executePoll({ networkClientId, }: TokenListPollingInput): Promise<void>;
+    _executePoll({ chainId }: TokenListPollingInput): Promise<void>;
     /**
-     * Fetching token list from the Token Service API.
+     * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)
      *
-     * @param networkClientId - The ID of the network client triggering the fetch.
+     * @param chainId - The chainId of the current chain triggering the fetch.
      */
-    fetchTokenList(networkClientId?: NetworkClientId): Promise<void>;
+    fetchTokenList(chainId: Hex): Promise<void>;
     /**
      * Clearing tokenList and tokensChainsCache explicitly.
      */
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts.map b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts.map
index 4f69bd9..41fc256 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenListController.d.cts","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TokenListController.d.cts","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts
index 4c05b44..19765b6 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts
@@ -1,5 +1,5 @@
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedControllerMessenger } from "@metamask/base-controller";
-import type { NetworkClientId, NetworkControllerStateChangeEvent, NetworkState, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
+import type { NetworkControllerStateChangeEvent, NetworkState, NetworkControllerGetNetworkClientByIdAction } from "@metamask/network-controller";
 import type { Hex } from "@metamask/utils";
 declare const name = "TokenListController";
 export type TokenListToken = {
@@ -34,17 +34,17 @@ export type TokenListControllerMessenger = RestrictedControllerMessenger<typeof
 export declare const getDefaultTokenListState: () => TokenListState;
 /** The input to start polling for the {@link TokenListController} */
 type TokenListPollingInput = {
-    networkClientId: NetworkClientId;
+    chainId: Hex;
 };
 declare const TokenListController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenListPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenListPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenListPollingInput) => void>>;
     _executePoll(input: TokenListPollingInput): Promise<void>;
     startPolling(input: TokenListPollingInput): string;
     stopAllPolling(): void;
@@ -85,38 +85,49 @@ export declare class TokenListController extends TokenListController_base<typeof
     });
     /**
      * Start polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     start(): Promise<void>;
     /**
      * Restart polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     restart(): Promise<void>;
     /**
      * Stop polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     stop(): void;
     /**
-     * Prepare to discard this controller.
-     *
      * This stops any active polling.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     destroy(): void;
+    /**
+     * This stops any active polling intervals.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
+     */
     private stopPolling;
     /**
-     * Fetching token list from the Token Service API.
+     * This starts a new polling loop for any given chain. Under the hood it is deduping polls
      *
      * @private
      * @param input - The input for the poll.
-     * @param input.networkClientId - The ID of the network client triggering the fetch.
+     * @param input.chainId - The chainId of the chain to trigger the fetch.
      * @returns A promise that resolves when this operation completes.
      */
-    _executePoll({ networkClientId, }: TokenListPollingInput): Promise<void>;
+    _executePoll({ chainId }: TokenListPollingInput): Promise<void>;
     /**
-     * Fetching token list from the Token Service API.
+     * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)
      *
-     * @param networkClientId - The ID of the network client triggering the fetch.
+     * @param chainId - The chainId of the current chain triggering the fetch.
      */
-    fetchTokenList(networkClientId?: NetworkClientId): Promise<void>;
+    fetchTokenList(chainId: Hex): Promise<void>;
     /**
      * Clearing tokenList and tokensChainsCache explicitly.
      */
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts.map b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts.map
index bf50c2d..9a94418 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenListController.d.mts","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,kCAAkC;AAEnC,OAAO,KAAK,EACV,eAAe,EACf,iCAAiC,EACjC,YAAY,EACZ,2CAA2C,EAC5C,qCAAqC;AAEtC,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAa3C,QAAA,MAAM,IAAI,wBAAwB,CAAC;AAEnC,MAAM,MAAM,cAAc,GAAG;IAC3B,IAAI,EAAE,MAAM,CAAC;IACb,MAAM,EAAE,MAAM,CAAC;IACf,QAAQ,EAAE,MAAM,CAAC;IACjB,OAAO,EAAE,MAAM,CAAC;IAChB,WAAW,EAAE,MAAM,CAAC;IACpB,WAAW,EAAE,MAAM,EAAE,CAAC;IACtB,OAAO,EAAE,MAAM,CAAC;CACjB,CAAC;AAEF,MAAM,MAAM,YAAY,GAAG,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;AAE1D,KAAK,SAAS,GAAG;IACf,SAAS,EAAE,MAAM,CAAC;IAClB,IAAI,EAAE,YAAY,CAAC;CACpB,CAAC;AACF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,CAAC,OAAO,EAAE,GAAG,GAAG,SAAS,CAAC;CAC3B,CAAC;AAEF,MAAM,MAAM,cAAc,GAAG;IAC3B,SAAS,EAAE,YAAY,CAAC;IACxB,iBAAiB,EAAE,iBAAiB,CAAC;IACrC,8BAA8B,EAAE,OAAO,CAAC;CACzC,CAAC;AAEF,MAAM,MAAM,oBAAoB,GAAG,0BAA0B,CAC3D,OAAO,IAAI,EACX,cAAc,CACf,CAAC;AAEF,MAAM,MAAM,yBAAyB,GAAG,oBAAoB,CAAC;AAE7D,MAAM,MAAM,iBAAiB,GAAG,wBAAwB,CACtD,OAAO,IAAI,EACX,cAAc,CACf,CAAC;AAEF,MAAM,MAAM,0BAA0B,GAAG,iBAAiB,CAAC;AAE3D,KAAK,cAAc,GAAG,2CAA2C,CAAC;AAElE,KAAK,aAAa,GAAG,iCAAiC,CAAC;AAEvD,MAAM,MAAM,4BAA4B,GAAG,6BAA6B,CACtE,OAAO,IAAI,EACX,0BAA0B,GAAG,cAAc,EAC3C,yBAAyB,GAAG,aAAa,EACzC,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AAQF,eAAO,MAAM,wBAAwB,QAAO,cAM3C,CAAC;AAEF,qEAAqE;AACrE,KAAK,qBAAqB,GAAG;IAC3B,eAAe,EAAE,eAAe,CAAC;CAClC,CAAC;;;;;;;;;;;;;;;;AAEF;;GAEG;AACH,qBAAa,mBAAoB,SAAQ,yBACvC,OAAO,IAAI,EACX,cAAc,EACd,4BAA4B,CAC7B;;IACC,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAe;IAErC,OAAO,CAAC,UAAU,CAAC,CAAgC;IAEnD,OAAO,CAAC,QAAQ,CAAC,aAAa,CAAS;IAEvC,OAAO,CAAC,QAAQ,CAAC,qBAAqB,CAAS;IAE/C,OAAO,CAAC,OAAO,CAAM;IAErB,OAAO,CAAC,eAAe,CAAkB;IAEzC;;;;;;;;;;;OAWG;gBACS,EACV,OAAO,EACP,8BAAsC,EACtC,oBAAoB,EACpB,QAA2B,EAC3B,qBAAyC,EACzC,SAAS,EACT,KAAK,GACN,EAAE;QACD,OAAO,EAAE,GAAG,CAAC;QACb,8BAA8B,CAAC,EAAE,OAAO,CAAC;QACzC,oBAAoB,CAAC,EAAE,CACrB,QAAQ,EAAE,CAAC,YAAY,EAAE,YAAY,KAAK,IAAI,KAC3C,IAAI,CAAC;QACV,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,qBAAqB,CAAC,EAAE,MAAM,CAAC;QAC/B,SAAS,EAAE,4BAA4B,CAAC;QACxC,KAAK,CAAC,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;KACjC;IA8DD;;OAEG;IACG,KAAK;IAOX;;OAEG;IACG,OAAO;IAKb;;OAEG;IACH,IAAI;IAIJ;;;;OAIG;IACM,OAAO;IAKhB,OAAO,CAAC,WAAW;IAkBnB;;;;;;;OAOG;IACG,YAAY,CAAC,EACjB,eAAe,GAChB,EAAE,qBAAqB,GAAG,OAAO,CAAC,IAAI,CAAC;IAIxC;;;;OAIG;IACG,cAAc,CAAC,eAAe,CAAC,EAAE,eAAe,GAAG,OAAO,CAAC,IAAI,CAAC;IA4FtE;;OAEG;IACH,qBAAqB,IAAI,IAAI;IAU7B;;;;OAIG;IACH,oCAAoC,CAAC,oBAAoB,EAAE,OAAO,GAAG,IAAI;CAQ1E;AAED,eAAe,mBAAmB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenListController.d.mts","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs
index 72617c7..7a167a8 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs
@@ -3,7 +3,7 @@ var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (
     if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
     return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
 };
-var _TokenListController_instances, _TokenListController_onNetworkControllerStateChange, _TokenListController_startPolling, _TokenListController_fetchFromCache;
+var _TokenListController_instances, _TokenListController_onNetworkControllerStateChange, _TokenListController_startDeprecatedPolling, _TokenListController_fetchFromCache;
 import { safelyExecute } from "@metamask/controller-utils";
 import { StaticIntervalPollingController } from "@metamask/polling-controller";
 import { Mutex } from "async-mutex";
@@ -50,6 +50,7 @@ export class TokenListController extends StaticIntervalPollingController() {
         _TokenListController_instances.add(this);
         this.mutex = new Mutex();
         this.intervalDelay = interval;
+        this.setIntervalLength(interval);
         this.cacheRefreshThreshold = cacheRefreshThreshold;
         this.chainId = chainId;
         this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);
@@ -70,112 +71,116 @@ export class TokenListController extends StaticIntervalPollingController() {
             });
         }
     }
+    // Eventually we want to remove start/restart/stop controls in favor of new _executePoll API
+    // Maintaining these functions for now until we can safely deprecate them for backwards compatibility
     /**
      * Start polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     async start() {
         if (!isTokenListSupportedForNetwork(this.chainId)) {
             return;
         }
-        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startPolling).call(this);
+        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startDeprecatedPolling).call(this);
     }
     /**
      * Restart polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     async restart() {
         this.stopPolling();
-        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startPolling).call(this);
+        await __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_startDeprecatedPolling).call(this);
     }
     /**
      * Stop polling for the token list.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     stop() {
         this.stopPolling();
     }
     /**
-     * Prepare to discard this controller.
-     *
      * This stops any active polling.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
      */
     destroy() {
         super.destroy();
         this.stopPolling();
     }
+    /**
+     * This stops any active polling intervals.
+     * @deprecated This method is deprecated and will be removed in the future.
+     * Consider using the new polling approach instead
+     */
     stopPolling() {
         if (this.intervalId) {
             clearInterval(this.intervalId);
         }
     }
     /**
-     * Fetching token list from the Token Service API.
+     * This starts a new polling loop for any given chain. Under the hood it is deduping polls
      *
      * @private
      * @param input - The input for the poll.
-     * @param input.networkClientId - The ID of the network client triggering the fetch.
+     * @param input.chainId - The chainId of the chain to trigger the fetch.
      * @returns A promise that resolves when this operation completes.
      */
-    async _executePoll({ networkClientId, }) {
-        return this.fetchTokenList(networkClientId);
+    async _executePoll({ chainId }) {
+        return this.fetchTokenList(chainId);
     }
     /**
-     * Fetching token list from the Token Service API.
+     * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)
      *
-     * @param networkClientId - The ID of the network client triggering the fetch.
+     * @param chainId - The chainId of the current chain triggering the fetch.
      */
-    async fetchTokenList(networkClientId) {
+    async fetchTokenList(chainId) {
         const releaseLock = await this.mutex.acquire();
-        let networkClient;
-        if (networkClientId) {
-            networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);
-        }
-        const chainId = networkClient?.configuration.chainId ?? this.chainId;
         try {
             const { tokensChainsCache } = this.state;
             let tokenList = {};
+            // Attempt to fetch cached tokens
             const cachedTokens = await safelyExecute(() => __classPrivateFieldGet(this, _TokenListController_instances, "m", _TokenListController_fetchFromCache).call(this, chainId));
             if (cachedTokens) {
                 // Use non-expired cached tokens
                 tokenList = { ...cachedTokens };
             }
             else {
-                // Fetch fresh token list
+                // Fetch fresh token list from the API
                 const tokensFromAPI = await safelyExecute(() => fetchTokenListByChainId(chainId, this.abortController.signal));
-                if (!tokensFromAPI) {
-                    // Fallback to expired cached tokens
-                    tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };
-                    this.update(() => {
-                        return {
-                            ...this.state,
-                            tokenList,
-                            tokensChainsCache,
+                if (tokensFromAPI) {
+                    // Format tokens from API (HTTP) and update tokenList
+                    tokenList = {};
+                    for (const token of tokensFromAPI) {
+                        tokenList[token.address] = {
+                            ...token,
+                            aggregators: formatAggregatorNames(token.aggregators),
+                            iconUrl: formatIconUrlWithProxy({
+                                chainId,
+                                tokenAddress: token.address,
+                            }),
                         };
-                    });
-                    return;
+                    }
                 }
-                for (const token of tokensFromAPI) {
-                    const formattedToken = {
-                        ...token,
-                        aggregators: formatAggregatorNames(token.aggregators),
-                        iconUrl: formatIconUrlWithProxy({
-                            chainId,
-                            tokenAddress: token.address,
-                        }),
-                    };
-                    tokenList[token.address] = formattedToken;
+                else {
+                    // Fallback to expired cached tokens
+                    tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };
                 }
             }
-            const updatedTokensChainsCache = {
-                ...tokensChainsCache,
-                [chainId]: {
-                    timestamp: Date.now(),
-                    data: tokenList,
-                },
-            };
+            // Update the state with a single update for both tokenList and tokenChainsCache
             this.update(() => {
                 return {
                     ...this.state,
-                    tokenList,
-                    tokensChainsCache: updatedTokensChainsCache,
+                    tokenList: this.chainId === chainId ? tokenList : this.state.tokenList,
+                    tokensChainsCache: {
+                        ...tokensChainsCache,
+                        [chainId]: {
+                            timestamp: Date.now(),
+                            data: tokenList,
+                        },
+                    },
                 };
             });
         }
@@ -234,19 +239,21 @@ async function _TokenListController_onNetworkControllerStateChange(networkContro
                     tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},
                 };
             });
-            await this.restart();
         }
     }
-}, _TokenListController_startPolling =
+}, _TokenListController_startDeprecatedPolling =
 /**
- * Starts a new polling interval.
+ * Starts a new polling interval for a given chainId (this should be deprecated in favor of _executePoll)
+ * @deprecated This method is deprecated and will be removed in the future.
+ * Consider using the new polling approach instead
  */
-async function _TokenListController_startPolling() {
-    await safelyExecute(() => this.fetchTokenList());
+async function _TokenListController_startDeprecatedPolling() {
+    // renaming this to avoid collision with base class
+    await safelyExecute(() => this.fetchTokenList(this.chainId));
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
     // eslint-disable-next-line @typescript-eslint/no-misused-promises
     this.intervalId = setInterval(async () => {
-        await safelyExecute(() => this.fetchTokenList());
+        await safelyExecute(() => this.fetchTokenList(this.chainId));
     }, this.intervalDelay);
 }, _TokenListController_fetchFromCache =
 /**
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs.map b/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs.map
index 03eab1b..89c26b5 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenListController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenListController.mjs","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { safelyExecute } from '@metamask/controller-utils';\nimport type {\n  NetworkClientId,\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n\nimport {\n  isTokenListSupportedForNetwork,\n  formatAggregatorNames,\n  formatIconUrlWithProxy,\n} from './assetsUtil';\nimport { fetchTokenListByChainId } from './token-service';\n\nconst DEFAULT_INTERVAL = 24 * 60 * 60 * 1000;\nconst DEFAULT_THRESHOLD = 24 * 60 * 60 * 1000;\n\nconst name = 'TokenListController';\n\nexport type TokenListToken = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  occurrences: number;\n  aggregators: string[];\n  iconUrl: string;\n};\n\nexport type TokenListMap = Record<string, TokenListToken>;\n\ntype DataCache = {\n  timestamp: number;\n  data: TokenListMap;\n};\nexport type TokensChainsCache = {\n  [chainId: Hex]: DataCache;\n};\n\nexport type TokenListState = {\n  tokenList: TokenListMap;\n  tokensChainsCache: TokensChainsCache;\n  preventPollingOnNetworkRestart: boolean;\n};\n\nexport type TokenListStateChange = ControllerStateChangeEvent<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerEvents = TokenListStateChange;\n\nexport type GetTokenListState = ControllerGetStateAction<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerActions = GetTokenListState;\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\ntype AllowedEvents = NetworkControllerStateChangeEvent;\n\nexport type TokenListControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  TokenListControllerActions | AllowedActions,\n  TokenListControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nconst metadata = {\n  tokenList: { persist: true, anonymous: true },\n  tokensChainsCache: { persist: true, anonymous: true },\n  preventPollingOnNetworkRestart: { persist: true, anonymous: true },\n};\n\nexport const getDefaultTokenListState = (): TokenListState => {\n  return {\n    tokenList: {},\n    tokensChainsCache: {},\n    preventPollingOnNetworkRestart: false,\n  };\n};\n\n/** The input to start polling for the {@link TokenListController} */\ntype TokenListPollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that passively polls on a set interval for the list of tokens from metaswaps api\n */\nexport class TokenListController extends StaticIntervalPollingController<TokenListPollingInput>()<\n  typeof name,\n  TokenListState,\n  TokenListControllerMessenger\n> {\n  private readonly mutex = new Mutex();\n\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay: number;\n\n  private readonly cacheRefreshThreshold: number;\n\n  private chainId: Hex;\n\n  private abortController: AbortController;\n\n  /**\n   * Creates a TokenListController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onNetworkStateChange - A function for registering an event handler for network state changes.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.cacheRefreshThreshold - The token cache expiry time, in milliseconds.\n   * @param options.messenger - A restricted controller messenger.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.preventPollingOnNetworkRestart - Determines whether to prevent poilling on network restart in extension.\n   */\n  constructor({\n    chainId,\n    preventPollingOnNetworkRestart = false,\n    onNetworkStateChange,\n    interval = DEFAULT_INTERVAL,\n    cacheRefreshThreshold = DEFAULT_THRESHOLD,\n    messenger,\n    state,\n  }: {\n    chainId: Hex;\n    preventPollingOnNetworkRestart?: boolean;\n    onNetworkStateChange?: (\n      listener: (networkState: NetworkState) => void,\n    ) => void;\n    interval?: number;\n    cacheRefreshThreshold?: number;\n    messenger: TokenListControllerMessenger;\n    state?: Partial<TokenListState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...getDefaultTokenListState(), ...state },\n    });\n    this.intervalDelay = interval;\n    this.cacheRefreshThreshold = cacheRefreshThreshold;\n    this.chainId = chainId;\n    this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);\n    this.abortController = new AbortController();\n    if (onNetworkStateChange) {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkStateChange(async (networkControllerState) => {\n        await this.#onNetworkControllerStateChange(networkControllerState);\n      });\n    } else {\n      this.messagingSystem.subscribe(\n        'NetworkController:stateChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerStateChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  /**\n   * Updates state and restarts polling on changes to the network controller\n   * state.\n   *\n   * @param networkControllerState - The updated network controller state.\n   */\n  async #onNetworkControllerStateChange(networkControllerState: NetworkState) {\n    const selectedNetworkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkControllerState.selectedNetworkClientId,\n    );\n    const { chainId } = selectedNetworkClient.configuration;\n\n    if (this.chainId !== chainId) {\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.chainId = chainId;\n      if (this.state.preventPollingOnNetworkRestart) {\n        this.clearingTokenListData();\n      } else {\n        // Ensure tokenList is referencing data from correct network\n        this.update(() => {\n          return {\n            ...this.state,\n            tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},\n          };\n        });\n        await this.restart();\n      }\n    }\n  }\n\n  /**\n   * Start polling for the token list.\n   */\n  async start() {\n    if (!isTokenListSupportedForNetwork(this.chainId)) {\n      return;\n    }\n    await this.#startPolling();\n  }\n\n  /**\n   * Restart polling for the token list.\n   */\n  async restart() {\n    this.stopPolling();\n    await this.#startPolling();\n  }\n\n  /**\n   * Stop polling for the token list.\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  /**\n   * Prepare to discard this controller.\n   *\n   * This stops any active polling.\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval.\n   */\n  async #startPolling(): Promise<void> {\n    await safelyExecute(() => this.fetchTokenList());\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this.fetchTokenList());\n    }, this.intervalDelay);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The ID of the network client triggering the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({\n    networkClientId,\n  }: TokenListPollingInput): Promise<void> {\n    return this.fetchTokenList(networkClientId);\n  }\n\n  /**\n   * Fetching token list from the Token Service API.\n   *\n   * @param networkClientId - The ID of the network client triggering the fetch.\n   */\n  async fetchTokenList(networkClientId?: NetworkClientId): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    let networkClient;\n    if (networkClientId) {\n      networkClient = this.messagingSystem.call(\n        'NetworkController:getNetworkClientById',\n        networkClientId,\n      );\n    }\n    const chainId = networkClient?.configuration.chainId ?? this.chainId;\n    try {\n      const { tokensChainsCache } = this.state;\n      let tokenList: TokenListMap = {};\n      const cachedTokens = await safelyExecute(() =>\n        this.#fetchFromCache(chainId),\n      );\n      if (cachedTokens) {\n        // Use non-expired cached tokens\n        tokenList = { ...cachedTokens };\n      } else {\n        // Fetch fresh token list\n        const tokensFromAPI = await safelyExecute(\n          () =>\n            fetchTokenListByChainId(\n              chainId,\n              this.abortController.signal,\n            ) as Promise<TokenListToken[]>,\n        );\n\n        if (!tokensFromAPI) {\n          // Fallback to expired cached tokens\n          tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };\n          this.update(() => {\n            return {\n              ...this.state,\n              tokenList,\n              tokensChainsCache,\n            };\n          });\n          return;\n        }\n        for (const token of tokensFromAPI) {\n          const formattedToken: TokenListToken = {\n            ...token,\n            aggregators: formatAggregatorNames(token.aggregators),\n            iconUrl: formatIconUrlWithProxy({\n              chainId,\n              tokenAddress: token.address,\n            }),\n          };\n          tokenList[token.address] = formattedToken;\n        }\n      }\n      const updatedTokensChainsCache: TokensChainsCache = {\n        ...tokensChainsCache,\n        [chainId]: {\n          timestamp: Date.now(),\n          data: tokenList,\n        },\n      };\n      this.update(() => {\n        return {\n          ...this.state,\n          tokenList,\n          tokensChainsCache: updatedTokensChainsCache,\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Checks if the Cache timestamp is valid,\n   * if yes data in cache will be returned\n   * otherwise null will be returned.\n   * @param chainId - The chain ID of the network for which to fetch the cache.\n   * @returns The cached data, or `null` if the cache was expired.\n   */\n  async #fetchFromCache(chainId: Hex): Promise<TokenListMap | null> {\n    const { tokensChainsCache }: TokenListState = this.state;\n    const dataCache = tokensChainsCache[chainId];\n    const now = Date.now();\n    if (\n      dataCache?.data &&\n      now - dataCache?.timestamp < this.cacheRefreshThreshold\n    ) {\n      return dataCache.data;\n    }\n    return null;\n  }\n\n  /**\n   * Clearing tokenList and tokensChainsCache explicitly.\n   */\n  clearingTokenListData(): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        tokenList: {},\n        tokensChainsCache: {},\n      };\n    });\n  }\n\n  /**\n   * Updates preventPollingOnNetworkRestart from extension.\n   *\n   * @param shouldPreventPolling - Determine whether to prevent polling on network change\n   */\n  updatePreventPollingOnNetworkRestart(shouldPreventPolling: boolean): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        preventPollingOnNetworkRestart: shouldPreventPolling,\n      };\n    });\n  }\n}\n\nexport default TokenListController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenListController.mjs","sourceRoot":"","sources":["../src/TokenListController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport { safelyExecute } from '@metamask/controller-utils';\nimport type {\n  NetworkControllerStateChangeEvent,\n  NetworkState,\n  NetworkControllerGetNetworkClientByIdAction,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport type { Hex } from '@metamask/utils';\nimport { Mutex } from 'async-mutex';\n\nimport {\n  isTokenListSupportedForNetwork,\n  formatAggregatorNames,\n  formatIconUrlWithProxy,\n} from './assetsUtil';\nimport { fetchTokenListByChainId } from './token-service';\n\nconst DEFAULT_INTERVAL = 24 * 60 * 60 * 1000;\nconst DEFAULT_THRESHOLD = 24 * 60 * 60 * 1000;\n\nconst name = 'TokenListController';\n\nexport type TokenListToken = {\n  name: string;\n  symbol: string;\n  decimals: number;\n  address: string;\n  occurrences: number;\n  aggregators: string[];\n  iconUrl: string;\n};\n\nexport type TokenListMap = Record<string, TokenListToken>;\n\ntype DataCache = {\n  timestamp: number;\n  data: TokenListMap;\n};\nexport type TokensChainsCache = {\n  [chainId: Hex]: DataCache;\n};\n\nexport type TokenListState = {\n  tokenList: TokenListMap;\n  tokensChainsCache: TokensChainsCache;\n  preventPollingOnNetworkRestart: boolean;\n};\n\nexport type TokenListStateChange = ControllerStateChangeEvent<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerEvents = TokenListStateChange;\n\nexport type GetTokenListState = ControllerGetStateAction<\n  typeof name,\n  TokenListState\n>;\n\nexport type TokenListControllerActions = GetTokenListState;\n\ntype AllowedActions = NetworkControllerGetNetworkClientByIdAction;\n\ntype AllowedEvents = NetworkControllerStateChangeEvent;\n\nexport type TokenListControllerMessenger = RestrictedControllerMessenger<\n  typeof name,\n  TokenListControllerActions | AllowedActions,\n  TokenListControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\nconst metadata = {\n  tokenList: { persist: true, anonymous: true },\n  tokensChainsCache: { persist: true, anonymous: true },\n  preventPollingOnNetworkRestart: { persist: true, anonymous: true },\n};\n\nexport const getDefaultTokenListState = (): TokenListState => {\n  return {\n    tokenList: {},\n    tokensChainsCache: {},\n    preventPollingOnNetworkRestart: false,\n  };\n};\n\n/** The input to start polling for the {@link TokenListController} */\ntype TokenListPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval for the list of tokens from metaswaps api\n */\nexport class TokenListController extends StaticIntervalPollingController<TokenListPollingInput>()<\n  typeof name,\n  TokenListState,\n  TokenListControllerMessenger\n> {\n  private readonly mutex = new Mutex();\n\n  private intervalId?: ReturnType<typeof setTimeout>;\n\n  private readonly intervalDelay: number;\n\n  private readonly cacheRefreshThreshold: number;\n\n  private chainId: Hex;\n\n  private abortController: AbortController;\n\n  /**\n   * Creates a TokenListController instance.\n   *\n   * @param options - The controller options.\n   * @param options.chainId - The chain ID of the current network.\n   * @param options.onNetworkStateChange - A function for registering an event handler for network state changes.\n   * @param options.interval - The polling interval, in milliseconds.\n   * @param options.cacheRefreshThreshold - The token cache expiry time, in milliseconds.\n   * @param options.messenger - A restricted controller messenger.\n   * @param options.state - Initial state to set on this controller.\n   * @param options.preventPollingOnNetworkRestart - Determines whether to prevent poilling on network restart in extension.\n   */\n  constructor({\n    chainId,\n    preventPollingOnNetworkRestart = false,\n    onNetworkStateChange,\n    interval = DEFAULT_INTERVAL,\n    cacheRefreshThreshold = DEFAULT_THRESHOLD,\n    messenger,\n    state,\n  }: {\n    chainId: Hex;\n    preventPollingOnNetworkRestart?: boolean;\n    onNetworkStateChange?: (\n      listener: (networkState: NetworkState) => void,\n    ) => void;\n    interval?: number;\n    cacheRefreshThreshold?: number;\n    messenger: TokenListControllerMessenger;\n    state?: Partial<TokenListState>;\n  }) {\n    super({\n      name,\n      metadata,\n      messenger,\n      state: { ...getDefaultTokenListState(), ...state },\n    });\n    this.intervalDelay = interval;\n    this.setIntervalLength(interval);\n    this.cacheRefreshThreshold = cacheRefreshThreshold;\n    this.chainId = chainId;\n    this.updatePreventPollingOnNetworkRestart(preventPollingOnNetworkRestart);\n    this.abortController = new AbortController();\n    if (onNetworkStateChange) {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      onNetworkStateChange(async (networkControllerState) => {\n        await this.#onNetworkControllerStateChange(networkControllerState);\n      });\n    } else {\n      this.messagingSystem.subscribe(\n        'NetworkController:stateChange',\n        // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n        // eslint-disable-next-line @typescript-eslint/no-misused-promises\n        async (networkControllerState) => {\n          await this.#onNetworkControllerStateChange(networkControllerState);\n        },\n      );\n    }\n  }\n\n  /**\n   * Updates state and restarts polling on changes to the network controller\n   * state.\n   *\n   * @param networkControllerState - The updated network controller state.\n   */\n  async #onNetworkControllerStateChange(networkControllerState: NetworkState) {\n    const selectedNetworkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkControllerState.selectedNetworkClientId,\n    );\n    const { chainId } = selectedNetworkClient.configuration;\n\n    if (this.chainId !== chainId) {\n      this.abortController.abort();\n      this.abortController = new AbortController();\n      this.chainId = chainId;\n      if (this.state.preventPollingOnNetworkRestart) {\n        this.clearingTokenListData();\n      } else {\n        // Ensure tokenList is referencing data from correct network\n        this.update(() => {\n          return {\n            ...this.state,\n            tokenList: this.state.tokensChainsCache[this.chainId]?.data || {},\n          };\n        });\n      }\n    }\n  }\n\n  // Eventually we want to remove start/restart/stop controls in favor of new _executePoll API\n  // Maintaining these functions for now until we can safely deprecate them for backwards compatibility\n  /**\n   * Start polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async start() {\n    if (!isTokenListSupportedForNetwork(this.chainId)) {\n      return;\n    }\n    await this.#startDeprecatedPolling();\n  }\n\n  /**\n   * Restart polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async restart() {\n    this.stopPolling();\n    await this.#startDeprecatedPolling();\n  }\n\n  /**\n   * Stop polling for the token list.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  stop() {\n    this.stopPolling();\n  }\n\n  /**\n   * This stops any active polling.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  override destroy() {\n    super.destroy();\n    this.stopPolling();\n  }\n\n  /**\n   * This stops any active polling intervals.\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  private stopPolling() {\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Starts a new polling interval for a given chainId (this should be deprecated in favor of _executePoll)\n   * @deprecated This method is deprecated and will be removed in the future.\n   * Consider using the new polling approach instead\n   */\n  async #startDeprecatedPolling(): Promise<void> {\n    // renaming this to avoid collision with base class\n    await safelyExecute(() => this.fetchTokenList(this.chainId));\n    // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n    // eslint-disable-next-line @typescript-eslint/no-misused-promises\n    this.intervalId = setInterval(async () => {\n      await safelyExecute(() => this.fetchTokenList(this.chainId));\n    }, this.intervalDelay);\n  }\n\n  /**\n   * This starts a new polling loop for any given chain. Under the hood it is deduping polls\n   *\n   * @private\n   * @param input - The input for the poll.\n   * @param input.chainId - The chainId of the chain to trigger the fetch.\n   * @returns A promise that resolves when this operation completes.\n   */\n  async _executePoll({ chainId }: TokenListPollingInput): Promise<void> {\n    return this.fetchTokenList(chainId);\n  }\n\n  /**\n   * Fetching token list from the Token Service API. This will fetch tokens across chains. It will update tokensChainsCache (scoped across chains), and also the tokenList (scoped for the selected chain)\n   *\n   * @param chainId - The chainId of the current chain triggering the fetch.\n   */\n  async fetchTokenList(chainId: Hex): Promise<void> {\n    const releaseLock = await this.mutex.acquire();\n    try {\n      const { tokensChainsCache } = this.state;\n      let tokenList: TokenListMap = {};\n      // Attempt to fetch cached tokens\n      const cachedTokens = await safelyExecute(() =>\n        this.#fetchFromCache(chainId),\n      );\n      if (cachedTokens) {\n        // Use non-expired cached tokens\n        tokenList = { ...cachedTokens };\n      } else {\n        // Fetch fresh token list from the API\n        const tokensFromAPI = await safelyExecute(\n          () =>\n            fetchTokenListByChainId(\n              chainId,\n              this.abortController.signal,\n            ) as Promise<TokenListToken[]>,\n        );\n\n        if (tokensFromAPI) {\n          // Format tokens from API (HTTP) and update tokenList\n          tokenList = {};\n          for (const token of tokensFromAPI) {\n            tokenList[token.address] = {\n              ...token,\n              aggregators: formatAggregatorNames(token.aggregators),\n              iconUrl: formatIconUrlWithProxy({\n                chainId,\n                tokenAddress: token.address,\n              }),\n            };\n          }\n        } else {\n          // Fallback to expired cached tokens\n          tokenList = { ...(tokensChainsCache[chainId]?.data || {}) };\n        }\n      }\n\n      // Update the state with a single update for both tokenList and tokenChainsCache\n      this.update(() => {\n        return {\n          ...this.state,\n          tokenList:\n            this.chainId === chainId ? tokenList : this.state.tokenList,\n          tokensChainsCache: {\n            ...tokensChainsCache,\n            [chainId]: {\n              timestamp: Date.now(),\n              data: tokenList,\n            },\n          },\n        };\n      });\n    } finally {\n      releaseLock();\n    }\n  }\n\n  /**\n   * Checks if the Cache timestamp is valid,\n   * if yes data in cache will be returned\n   * otherwise null will be returned.\n   * @param chainId - The chain ID of the network for which to fetch the cache.\n   * @returns The cached data, or `null` if the cache was expired.\n   */\n  async #fetchFromCache(chainId: Hex): Promise<TokenListMap | null> {\n    const { tokensChainsCache }: TokenListState = this.state;\n    const dataCache = tokensChainsCache[chainId];\n    const now = Date.now();\n    if (\n      dataCache?.data &&\n      now - dataCache?.timestamp < this.cacheRefreshThreshold\n    ) {\n      return dataCache.data;\n    }\n    return null;\n  }\n\n  /**\n   * Clearing tokenList and tokensChainsCache explicitly.\n   */\n  clearingTokenListData(): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        tokenList: {},\n        tokensChainsCache: {},\n      };\n    });\n  }\n\n  /**\n   * Updates preventPollingOnNetworkRestart from extension.\n   *\n   * @param shouldPreventPolling - Determine whether to prevent polling on network change\n   */\n  updatePreventPollingOnNetworkRestart(shouldPreventPolling: boolean): void {\n    this.update(() => {\n      return {\n        ...this.state,\n        preventPollingOnNetworkRestart: shouldPreventPolling,\n      };\n    });\n  }\n}\n\nexport default TokenListController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs
index beb4f95..8eb9e01 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs
@@ -206,13 +206,26 @@ class TokenRatesController extends (0, polling_controller_1.StaticIntervalPollin
      * Updates token rates for the given networkClientId
      *
      * @param input - The input for the poll.
-     * @param input.networkClientId - The network client ID used to get a ticker value.
+     * @param input.chainId - The chain id to poll token rates on.
      */
-    async _executePoll({ networkClientId, }) {
-        const networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);
+    async _executePoll({ chainId }) {
+        const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+        const networkConfiguration = networkConfigurationsByChainId[chainId];
+        if (!networkConfiguration) {
+            console.error(`TokenRatesController: No network configuration found for chainId ${chainId}`);
+            return;
+        }
         await this.updateExchangeRatesByChainId({
-            chainId: networkClient.configuration.chainId,
-            nativeCurrency: networkClient.configuration.ticker,
+            chainId,
+            nativeCurrency: networkConfiguration.nativeCurrency,
+        });
+    }
+    /**
+     * Reset the controller state to the default state.
+     */
+    resetState() {
+        this.update(() => {
+            return (0, exports.getDefaultTokenRatesControllerState)();
         });
     }
 }
@@ -222,14 +235,29 @@ _TokenRatesController_handle = new WeakMap(), _TokenRatesController_pollState =
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
     // eslint-disable-next-line @typescript-eslint/no-misused-promises
     async ({ allTokens, allDetectedTokens }) => {
-        const previousTokenAddresses = __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_getTokenAddresses).call(this, __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"));
+        if (__classPrivateFieldGet(this, _TokenRatesController_disabled, "f")) {
+            return;
+        }
+        const chainIds = [
+            ...new Set([
+                ...Object.keys(allTokens),
+                ...Object.keys(allDetectedTokens),
+            ]),
+        ];
+        const chainIdsToUpdate = chainIds.filter((chainId) => !(0, lodash_1.isEqual)(__classPrivateFieldGet(this, _TokenRatesController_allTokens, "f")[chainId], allTokens[chainId]) ||
+            !(0, lodash_1.isEqual)(__classPrivateFieldGet(this, _TokenRatesController_allDetectedTokens, "f")[chainId], allDetectedTokens[chainId]));
         __classPrivateFieldSet(this, _TokenRatesController_allTokens, allTokens, "f");
         __classPrivateFieldSet(this, _TokenRatesController_allDetectedTokens, allDetectedTokens, "f");
-        const newTokenAddresses = __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_getTokenAddresses).call(this, __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"));
-        if (!(0, lodash_1.isEqual)(previousTokenAddresses, newTokenAddresses) &&
-            __classPrivateFieldGet(this, _TokenRatesController_pollState, "f") === PollState.Active) {
-            await this.updateExchangeRates();
-        }
+        const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+        await Promise.allSettled(chainIdsToUpdate.map(async (chainId) => {
+            const nativeCurrency = networkConfigurationsByChainId[chainId]?.nativeCurrency;
+            if (nativeCurrency) {
+                await this.updateExchangeRatesByChainId({
+                    chainId: chainId,
+                    nativeCurrency,
+                });
+            }
+        }));
     }, ({ allTokens, allDetectedTokens }) => {
         return { allTokens, allDetectedTokens };
     });
@@ -324,6 +352,7 @@ async function _TokenRatesController_fetchAndMapExchangeRates({ tokenAddresses,
         });
     }
     return await __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency).call(this, {
+        chainId,
         tokenAddresses,
         nativeCurrency,
     });
@@ -387,17 +416,18 @@ async function _TokenRatesController_fetchAndMapExchangeRatesForSupportedNativeC
  * API, then convert the prices to our desired native currency.
  *
  * @param args - The arguments to this function.
+ * @param args.chainId - The chain id to fetch prices for.
  * @param args.tokenAddresses - Addresses for tokens.
  * @param args.nativeCurrency - The native currency in which to request
  * prices.
  * @returns A map of the token addresses (as checksums) to their prices in the
  * native currency.
  */
-async function _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency({ tokenAddresses, nativeCurrency, }) {
+async function _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency({ chainId, tokenAddresses, nativeCurrency, }) {
     const [contractExchangeInformations, fallbackCurrencyToNativeCurrencyConversionRate,] = await Promise.all([
         __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_fetchAndMapExchangeRatesForSupportedNativeCurrency).call(this, {
             tokenAddresses,
-            chainId: __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"),
+            chainId,
             nativeCurrency: controller_utils_1.FALL_BACK_VS_CURRENCY,
         }),
         getCurrencyConversionRate({
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs.map b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs.map
index 5ac1d4d..22cf0b7 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.cjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenRatesController.cjs","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetAccountAction,\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport { createDeferredPromise, type Hex } from '@metamask/utils';\nimport { isEqual } from 'lodash';\n\nimport { reduceInBatchesSerially, TOKEN_PRICES_BATCH_SIZE } from './assetsUtil';\nimport { fetchExchangeRate as fetchNativeCurrencyExchangeRate } from './crypto-compare-service';\nimport type { AbstractTokenPricesService } from './token-prices-service/abstract-token-prices-service';\nimport { ZERO_ADDRESS } from './token-prices-service/codefi-v2';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerStateChangeEvent,\n  TokensControllerState,\n} from './TokensController';\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property aggregators - An array containing the token's aggregators\n * @property image - Image of the token, url or bit32 image\n * @property hasBalanceError - 'true' if there is an error while updating the token balance\n * @property isERC721 - 'true' if the token is a ERC721 token\n * @property name - Name of the token\n */\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  hasBalanceError?: boolean;\n  isERC721?: boolean;\n  name?: string;\n};\n\nconst DEFAULT_INTERVAL = 180000;\n\nexport type ContractExchangeRates = {\n  [address: string]: number | undefined;\n};\n\nexport type MarketDataDetails = {\n  tokenAddress: `0x${string}`;\n  currency: string;\n  allTimeHigh: number;\n  allTimeLow: number;\n  circulatingSupply: number;\n  dilutedMarketCap: number;\n  high1d: number;\n  low1d: number;\n  marketCap: number;\n  marketCapPercentChange1d: number;\n  price: number;\n  priceChange1d: number;\n  pricePercentChange1d: number;\n  pricePercentChange1h: number;\n  pricePercentChange1y: number;\n  pricePercentChange7d: number;\n  pricePercentChange14d: number;\n  pricePercentChange30d: number;\n  pricePercentChange200d: number;\n  totalVolume: number;\n};\n\n/**\n * Represents a mapping of token contract addresses to their market data.\n */\nexport type ContractMarketData = Record<Hex, MarketDataDetails>;\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * The external actions available to the {@link TokenRatesController}.\n */\nexport type AllowedActions =\n  | TokensControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | AccountsControllerGetAccountAction\n  | AccountsControllerGetSelectedAccountAction;\n\n/**\n * The external events available to the {@link TokenRatesController}.\n */\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent\n  | AccountsControllerSelectedEvmAccountChangeEvent;\n\n/**\n * The name of the {@link TokenRatesController}.\n */\nexport const controllerName = 'TokenRatesController';\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property marketData - Market data for tokens, keyed by chain ID and then token contract address.\n */\nexport type TokenRatesControllerState = {\n  marketData: Record<Hex, Record<Hex, MarketDataDetails>>;\n};\n\n/**\n * The action that can be performed to get the state of the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerActions = TokenRatesControllerGetStateAction;\n\n/**\n * The event that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The events that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerEvents = TokenRatesControllerStateChangeEvent;\n\n/**\n * The messenger of the {@link TokenRatesController} for communication.\n */\nexport type TokenRatesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenRatesControllerActions | AllowedActions,\n  TokenRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Uses the CryptoCompare API to fetch the exchange rate between one currency\n * and another, i.e., the multiplier to apply the amount of one currency in\n * order to convert it to another.\n *\n * @param args - The arguments to this function.\n * @param args.from - The currency to convert from.\n * @param args.to - The currency to convert to.\n * @returns The exchange rate between `fromCurrency` to `toCurrency` if one\n * exists, or null if one does not.\n */\nasync function getCurrencyConversionRate({\n  from,\n  to,\n}: {\n  from: string;\n  to: string;\n}) {\n  const includeUSDRate = false;\n  try {\n    const result = await fetchNativeCurrencyExchangeRate(\n      to,\n      from,\n      includeUSDRate,\n    );\n    return result.conversionRate;\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message.includes('market does not exist for this coin pair')\n    ) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nconst tokenRatesControllerMetadata = {\n  marketData: { persist: true, anonymous: false },\n};\n\n/**\n * Get the default {@link TokenRatesController} state.\n *\n * @returns The default {@link TokenRatesController} state.\n */\nexport const getDefaultTokenRatesControllerState =\n  (): TokenRatesControllerState => {\n    return {\n      marketData: {},\n    };\n  };\n\n/** The input to start polling for the {@link TokenRatesController} */\nexport type TokenRatesPollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends StaticIntervalPollingController<TokenRatesPollingInput>()<\n  typeof controllerName,\n  TokenRatesControllerState,\n  TokenRatesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #pollState = PollState.Inactive;\n\n  #tokenPricesService: AbstractTokenPricesService;\n\n  #inProcessExchangeRateUpdates: Record<`${Hex}:${string}`, Promise<void>> = {};\n\n  #selectedAccountId: string;\n\n  #disabled: boolean;\n\n  #chainId: Hex;\n\n  #ticker: string;\n\n  #interval: number;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The polling interval in ms\n   * @param options.disabled - Boolean to track if network requests are blocked\n   * @param options.tokenPricesService - An object in charge of retrieving token price\n   * @param options.messenger - The controller messenger instance for communication\n   * @param options.state - Initial state to set on this controller\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = false,\n    tokenPricesService,\n    messenger,\n    state,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    tokenPricesService: AbstractTokenPricesService;\n    messenger: TokenRatesControllerMessenger;\n    state?: Partial<TokenRatesControllerState>;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: { ...getDefaultTokenRatesControllerState(), ...state },\n      metadata: tokenRatesControllerMetadata,\n    });\n\n    this.setIntervalLength(interval);\n    this.#tokenPricesService = tokenPricesService;\n    this.#disabled = disabled;\n    this.#interval = interval;\n\n    const { chainId: currentChainId, ticker: currentTicker } =\n      this.#getChainIdAndTicker();\n    this.#chainId = currentChainId;\n    this.#ticker = currentTicker;\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { allTokens, allDetectedTokens } = this.#getTokensControllerState();\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.#subscribeToTokensStateChange();\n\n    this.#subscribeToNetworkStateChange();\n  }\n\n  #subscribeToTokensStateChange() {\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ allTokens, allDetectedTokens }) => {\n        const previousTokenAddresses = this.#getTokenAddresses(this.#chainId);\n        this.#allTokens = allTokens;\n        this.#allDetectedTokens = allDetectedTokens;\n\n        const newTokenAddresses = this.#getTokenAddresses(this.#chainId);\n        if (\n          !isEqual(previousTokenAddresses, newTokenAddresses) &&\n          this.#pollState === PollState.Active\n        ) {\n          await this.updateExchangeRates();\n        }\n      },\n      ({ allTokens, allDetectedTokens }) => {\n        return { allTokens, allDetectedTokens };\n      },\n    );\n  }\n\n  #subscribeToNetworkStateChange() {\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const {\n          configuration: { chainId, ticker },\n        } = this.messagingSystem.call(\n          'NetworkController:getNetworkClientById',\n          selectedNetworkClientId,\n        );\n\n        if (this.#chainId !== chainId || this.#ticker !== ticker) {\n          this.#chainId = chainId;\n          this.#ticker = ticker;\n          if (this.#pollState === PollState.Active) {\n            await this.updateExchangeRates();\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Get the tokens for the given chain.\n   *\n   * @param chainId - The chain ID.\n   * @returns The list of tokens addresses for the current chain\n   */\n  #getTokenAddresses(chainId: Hex): Hex[] {\n    const getTokens = (allTokens: Record<Hex, { address: string }[]>) =>\n      Object.values(allTokens ?? {}).flatMap((tokens) =>\n        tokens.map(({ address }) => toHex(toChecksumHexAddress(address))),\n      );\n\n    const tokenAddresses = getTokens(this.#allTokens[chainId]);\n    const detectedTokenAddresses = getTokens(this.#allDetectedTokens[chainId]);\n\n    return [...new Set([...tokenAddresses, ...detectedTokenAddresses])].sort();\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  #getSelectedAccount(): InternalAccount {\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    return selectedAccount;\n  }\n\n  #getChainIdAndTicker(): {\n    chainId: Hex;\n    ticker: string;\n  } {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId: networkClient.configuration.chainId,\n      ticker: networkClient.configuration.ticker,\n    };\n  }\n\n  #getTokensControllerState(): {\n    allTokens: TokensControllerState['allTokens'];\n    allDetectedTokens: TokensControllerState['allDetectedTokens'];\n  } {\n    const { allTokens, allDetectedTokens } = this.messagingSystem.call(\n      'TokensController:getState',\n    );\n\n    return {\n      allTokens,\n      allDetectedTokens,\n    };\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#poll();\n    }, this.#interval);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    await this.updateExchangeRatesByChainId({\n      chainId: this.#chainId,\n      nativeCurrency: this.#ticker,\n    });\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   *\n   * @param options - The options to fetch exchange rates.\n   * @param options.chainId - The chain ID.\n   * @param options.nativeCurrency - The ticker for the chain.\n   */\n  async updateExchangeRatesByChainId({\n    chainId,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    nativeCurrency: string;\n  }) {\n    if (this.#disabled) {\n      return;\n    }\n\n    const tokenAddresses = this.#getTokenAddresses(chainId);\n\n    const updateKey: `${Hex}:${string}` = `${chainId}:${nativeCurrency}`;\n    if (updateKey in this.#inProcessExchangeRateUpdates) {\n      // This prevents redundant updates\n      // This promise is resolved after the in-progress update has finished,\n      // and state has been updated.\n      await this.#inProcessExchangeRateUpdates[updateKey];\n      return;\n    }\n\n    const {\n      promise: inProgressUpdate,\n      resolve: updateSucceeded,\n      reject: updateFailed,\n    } = createDeferredPromise({ suppressUnhandledRejection: true });\n    this.#inProcessExchangeRateUpdates[updateKey] = inProgressUpdate;\n\n    try {\n      const contractInformations = await this.#fetchAndMapExchangeRates({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n\n      const marketData = {\n        [chainId]: {\n          ...(contractInformations ?? {}),\n        },\n      };\n\n      this.update((state) => {\n        state.marketData = {\n          ...state.marketData,\n          ...marketData,\n        };\n      });\n      updateSucceeded();\n    } catch (error: unknown) {\n      updateFailed(error);\n      throw error;\n    } finally {\n      delete this.#inProcessExchangeRateUpdates[updateKey];\n    }\n  }\n\n  /**\n   * Uses the token prices service to retrieve exchange rates for tokens in a\n   * particular currency.\n   *\n   * If the price API does not support the given chain ID, returns an empty\n   * object.\n   *\n   * If the price API does not support the given currency, retrieves exchange\n   * rates in a known currency instead, then converts those rates using the\n   * exchange rate between the known currency and desired currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * exchange rates.\n   * @returns A map from token address to its exchange rate in the native\n   * currency, or an empty map if no exchange rates can be obtained for the\n   * chain ID.\n   */\n  async #fetchAndMapExchangeRates({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    if (!this.#tokenPricesService.validateChainIdSupported(chainId)) {\n      return tokenAddresses.reduce((obj, tokenAddress) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: undefined,\n        };\n\n        return obj;\n      }, {});\n    }\n\n    if (this.#tokenPricesService.validateCurrencySupported(nativeCurrency)) {\n      return await this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n    }\n\n    return await this.#fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n      tokenAddresses,\n      nativeCurrency,\n    });\n  }\n\n  /**\n   * Updates token rates for the given networkClientId\n   *\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The network client ID used to get a ticker value.\n   */\n  async _executePoll({\n    networkClientId,\n  }: TokenRatesPollingInput): Promise<void> {\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n    await this.updateExchangeRatesByChainId({\n      chainId: networkClient.configuration.chainId,\n      nativeCurrency: networkClient.configuration.ticker,\n    });\n  }\n\n  /**\n   * Retrieves prices in the given currency for the given tokens on the given\n   * chain. Ensures that token addresses are checksum addresses.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForSupportedNativeCurrency({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    let contractNativeInformations;\n    const tokenPricesByTokenAddress = await reduceInBatchesSerially<\n      Hex,\n      Awaited<ReturnType<AbstractTokenPricesService['fetchTokenPrices']>>\n    >({\n      values: [...tokenAddresses].sort(),\n      batchSize: TOKEN_PRICES_BATCH_SIZE,\n      eachBatch: async (allTokenPricesByTokenAddress, batch) => {\n        const tokenPricesByTokenAddressForBatch =\n          await this.#tokenPricesService.fetchTokenPrices({\n            tokenAddresses: batch,\n            chainId,\n            currency: nativeCurrency,\n          });\n\n        return {\n          ...allTokenPricesByTokenAddress,\n          ...tokenPricesByTokenAddressForBatch,\n        };\n      },\n      initialResult: {},\n    });\n    contractNativeInformations = tokenPricesByTokenAddress;\n\n    // fetch for native token\n    if (tokenAddresses.length === 0) {\n      const contractNativeInformationsNative =\n        await this.#tokenPricesService.fetchTokenPrices({\n          tokenAddresses: [],\n          chainId,\n          currency: nativeCurrency,\n        });\n\n      contractNativeInformations = {\n        [ZERO_ADDRESS]: {\n          currency: nativeCurrency,\n          ...contractNativeInformationsNative[ZERO_ADDRESS],\n        },\n      };\n    }\n    return Object.entries(contractNativeInformations).reduce(\n      (obj, [tokenAddress, token]) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: { ...token },\n        };\n\n        return obj;\n      },\n      {},\n    );\n  }\n\n  /**\n   * If the price API does not support a given native currency, then we need to\n   * convert it to a fallback currency and feed that currency into the price\n   * API, then convert the prices to our desired native currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n    tokenAddresses,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    const [\n      contractExchangeInformations,\n      fallbackCurrencyToNativeCurrencyConversionRate,\n    ] = await Promise.all([\n      this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId: this.#chainId,\n        nativeCurrency: FALL_BACK_VS_CURRENCY,\n      }),\n      getCurrencyConversionRate({\n        from: FALL_BACK_VS_CURRENCY,\n        to: nativeCurrency,\n      }),\n    ]);\n\n    if (fallbackCurrencyToNativeCurrencyConversionRate === null) {\n      return {};\n    }\n\n    // Converts the price in the fallback currency to the native currency\n    const convertFallbackToNative = (value: number | undefined) =>\n      value !== undefined && value !== null\n        ? value * fallbackCurrencyToNativeCurrencyConversionRate\n        : undefined;\n\n    const updatedContractExchangeRates = Object.entries(\n      contractExchangeInformations,\n    ).reduce((acc, [tokenAddress, token]) => {\n      acc = {\n        ...acc,\n        [tokenAddress]: {\n          ...token,\n          currency: nativeCurrency,\n          price: convertFallbackToNative(token.price),\n          marketCap: convertFallbackToNative(token.marketCap),\n          allTimeHigh: convertFallbackToNative(token.allTimeHigh),\n          allTimeLow: convertFallbackToNative(token.allTimeLow),\n          totalVolume: convertFallbackToNative(token.totalVolume),\n          high1d: convertFallbackToNative(token.high1d),\n          low1d: convertFallbackToNative(token.low1d),\n          dilutedMarketCap: convertFallbackToNative(token.dilutedMarketCap),\n        },\n      };\n      return acc;\n    }, {});\n\n    return updatedContractExchangeRates;\n  }\n}\n\nexport default TokenRatesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenRatesController.cjs","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetAccountAction,\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport { createDeferredPromise, type Hex } from '@metamask/utils';\nimport { isEqual } from 'lodash';\n\nimport { reduceInBatchesSerially, TOKEN_PRICES_BATCH_SIZE } from './assetsUtil';\nimport { fetchExchangeRate as fetchNativeCurrencyExchangeRate } from './crypto-compare-service';\nimport type { AbstractTokenPricesService } from './token-prices-service/abstract-token-prices-service';\nimport { ZERO_ADDRESS } from './token-prices-service/codefi-v2';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerStateChangeEvent,\n  TokensControllerState,\n} from './TokensController';\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property aggregators - An array containing the token's aggregators\n * @property image - Image of the token, url or bit32 image\n * @property hasBalanceError - 'true' if there is an error while updating the token balance\n * @property isERC721 - 'true' if the token is a ERC721 token\n * @property name - Name of the token\n */\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  hasBalanceError?: boolean;\n  isERC721?: boolean;\n  name?: string;\n};\n\nconst DEFAULT_INTERVAL = 180000;\n\nexport type ContractExchangeRates = {\n  [address: string]: number | undefined;\n};\n\nexport type MarketDataDetails = {\n  tokenAddress: `0x${string}`;\n  currency: string;\n  allTimeHigh: number;\n  allTimeLow: number;\n  circulatingSupply: number;\n  dilutedMarketCap: number;\n  high1d: number;\n  low1d: number;\n  marketCap: number;\n  marketCapPercentChange1d: number;\n  price: number;\n  priceChange1d: number;\n  pricePercentChange1d: number;\n  pricePercentChange1h: number;\n  pricePercentChange1y: number;\n  pricePercentChange7d: number;\n  pricePercentChange14d: number;\n  pricePercentChange30d: number;\n  pricePercentChange200d: number;\n  totalVolume: number;\n};\n\n/**\n * Represents a mapping of token contract addresses to their market data.\n */\nexport type ContractMarketData = Record<Hex, MarketDataDetails>;\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * The external actions available to the {@link TokenRatesController}.\n */\nexport type AllowedActions =\n  | TokensControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | AccountsControllerGetAccountAction\n  | AccountsControllerGetSelectedAccountAction;\n\n/**\n * The external events available to the {@link TokenRatesController}.\n */\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent\n  | AccountsControllerSelectedEvmAccountChangeEvent;\n\n/**\n * The name of the {@link TokenRatesController}.\n */\nexport const controllerName = 'TokenRatesController';\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property marketData - Market data for tokens, keyed by chain ID and then token contract address.\n */\nexport type TokenRatesControllerState = {\n  marketData: Record<Hex, Record<Hex, MarketDataDetails>>;\n};\n\n/**\n * The action that can be performed to get the state of the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerActions = TokenRatesControllerGetStateAction;\n\n/**\n * The event that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The events that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerEvents = TokenRatesControllerStateChangeEvent;\n\n/**\n * The messenger of the {@link TokenRatesController} for communication.\n */\nexport type TokenRatesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenRatesControllerActions | AllowedActions,\n  TokenRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Uses the CryptoCompare API to fetch the exchange rate between one currency\n * and another, i.e., the multiplier to apply the amount of one currency in\n * order to convert it to another.\n *\n * @param args - The arguments to this function.\n * @param args.from - The currency to convert from.\n * @param args.to - The currency to convert to.\n * @returns The exchange rate between `fromCurrency` to `toCurrency` if one\n * exists, or null if one does not.\n */\nasync function getCurrencyConversionRate({\n  from,\n  to,\n}: {\n  from: string;\n  to: string;\n}) {\n  const includeUSDRate = false;\n  try {\n    const result = await fetchNativeCurrencyExchangeRate(\n      to,\n      from,\n      includeUSDRate,\n    );\n    return result.conversionRate;\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message.includes('market does not exist for this coin pair')\n    ) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nconst tokenRatesControllerMetadata = {\n  marketData: { persist: true, anonymous: false },\n};\n\n/**\n * Get the default {@link TokenRatesController} state.\n *\n * @returns The default {@link TokenRatesController} state.\n */\nexport const getDefaultTokenRatesControllerState =\n  (): TokenRatesControllerState => {\n    return {\n      marketData: {},\n    };\n  };\n\n/** The input to start polling for the {@link TokenRatesController} */\nexport type TokenRatesPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends StaticIntervalPollingController<TokenRatesPollingInput>()<\n  typeof controllerName,\n  TokenRatesControllerState,\n  TokenRatesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #pollState = PollState.Inactive;\n\n  #tokenPricesService: AbstractTokenPricesService;\n\n  #inProcessExchangeRateUpdates: Record<`${Hex}:${string}`, Promise<void>> = {};\n\n  #selectedAccountId: string;\n\n  #disabled: boolean;\n\n  #chainId: Hex;\n\n  #ticker: string;\n\n  #interval: number;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The polling interval in ms\n   * @param options.disabled - Boolean to track if network requests are blocked\n   * @param options.tokenPricesService - An object in charge of retrieving token price\n   * @param options.messenger - The controller messenger instance for communication\n   * @param options.state - Initial state to set on this controller\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = false,\n    tokenPricesService,\n    messenger,\n    state,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    tokenPricesService: AbstractTokenPricesService;\n    messenger: TokenRatesControllerMessenger;\n    state?: Partial<TokenRatesControllerState>;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: { ...getDefaultTokenRatesControllerState(), ...state },\n      metadata: tokenRatesControllerMetadata,\n    });\n\n    this.setIntervalLength(interval);\n    this.#tokenPricesService = tokenPricesService;\n    this.#disabled = disabled;\n    this.#interval = interval;\n\n    const { chainId: currentChainId, ticker: currentTicker } =\n      this.#getChainIdAndTicker();\n    this.#chainId = currentChainId;\n    this.#ticker = currentTicker;\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { allTokens, allDetectedTokens } = this.#getTokensControllerState();\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.#subscribeToTokensStateChange();\n\n    this.#subscribeToNetworkStateChange();\n  }\n\n  #subscribeToTokensStateChange() {\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ allTokens, allDetectedTokens }) => {\n        if (this.#disabled) {\n          return;\n        }\n\n        const chainIds = [\n          ...new Set([\n            ...Object.keys(allTokens),\n            ...Object.keys(allDetectedTokens),\n          ]),\n        ] as Hex[];\n\n        const chainIdsToUpdate = chainIds.filter(\n          (chainId) =>\n            !isEqual(this.#allTokens[chainId], allTokens[chainId]) ||\n            !isEqual(\n              this.#allDetectedTokens[chainId],\n              allDetectedTokens[chainId],\n            ),\n        );\n\n        this.#allTokens = allTokens;\n        this.#allDetectedTokens = allDetectedTokens;\n\n        const { networkConfigurationsByChainId } = this.messagingSystem.call(\n          'NetworkController:getState',\n        );\n\n        await Promise.allSettled(\n          chainIdsToUpdate.map(async (chainId) => {\n            const nativeCurrency =\n              networkConfigurationsByChainId[chainId as Hex]?.nativeCurrency;\n\n            if (nativeCurrency) {\n              await this.updateExchangeRatesByChainId({\n                chainId: chainId as Hex,\n                nativeCurrency,\n              });\n            }\n          }),\n        );\n      },\n      ({ allTokens, allDetectedTokens }) => {\n        return { allTokens, allDetectedTokens };\n      },\n    );\n  }\n\n  #subscribeToNetworkStateChange() {\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const {\n          configuration: { chainId, ticker },\n        } = this.messagingSystem.call(\n          'NetworkController:getNetworkClientById',\n          selectedNetworkClientId,\n        );\n\n        if (this.#chainId !== chainId || this.#ticker !== ticker) {\n          this.#chainId = chainId;\n          this.#ticker = ticker;\n          if (this.#pollState === PollState.Active) {\n            await this.updateExchangeRates();\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Get the tokens for the given chain.\n   *\n   * @param chainId - The chain ID.\n   * @returns The list of tokens addresses for the current chain\n   */\n  #getTokenAddresses(chainId: Hex): Hex[] {\n    const getTokens = (allTokens: Record<Hex, { address: string }[]>) =>\n      Object.values(allTokens ?? {}).flatMap((tokens) =>\n        tokens.map(({ address }) => toHex(toChecksumHexAddress(address))),\n      );\n\n    const tokenAddresses = getTokens(this.#allTokens[chainId]);\n    const detectedTokenAddresses = getTokens(this.#allDetectedTokens[chainId]);\n\n    return [...new Set([...tokenAddresses, ...detectedTokenAddresses])].sort();\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  #getSelectedAccount(): InternalAccount {\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    return selectedAccount;\n  }\n\n  #getChainIdAndTicker(): {\n    chainId: Hex;\n    ticker: string;\n  } {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId: networkClient.configuration.chainId,\n      ticker: networkClient.configuration.ticker,\n    };\n  }\n\n  #getTokensControllerState(): {\n    allTokens: TokensControllerState['allTokens'];\n    allDetectedTokens: TokensControllerState['allDetectedTokens'];\n  } {\n    const { allTokens, allDetectedTokens } = this.messagingSystem.call(\n      'TokensController:getState',\n    );\n\n    return {\n      allTokens,\n      allDetectedTokens,\n    };\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#poll();\n    }, this.#interval);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    await this.updateExchangeRatesByChainId({\n      chainId: this.#chainId,\n      nativeCurrency: this.#ticker,\n    });\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   *\n   * @param options - The options to fetch exchange rates.\n   * @param options.chainId - The chain ID.\n   * @param options.nativeCurrency - The ticker for the chain.\n   */\n  async updateExchangeRatesByChainId({\n    chainId,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    nativeCurrency: string;\n  }) {\n    if (this.#disabled) {\n      return;\n    }\n\n    const tokenAddresses = this.#getTokenAddresses(chainId);\n\n    const updateKey: `${Hex}:${string}` = `${chainId}:${nativeCurrency}`;\n    if (updateKey in this.#inProcessExchangeRateUpdates) {\n      // This prevents redundant updates\n      // This promise is resolved after the in-progress update has finished,\n      // and state has been updated.\n      await this.#inProcessExchangeRateUpdates[updateKey];\n      return;\n    }\n\n    const {\n      promise: inProgressUpdate,\n      resolve: updateSucceeded,\n      reject: updateFailed,\n    } = createDeferredPromise({ suppressUnhandledRejection: true });\n    this.#inProcessExchangeRateUpdates[updateKey] = inProgressUpdate;\n\n    try {\n      const contractInformations = await this.#fetchAndMapExchangeRates({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n\n      const marketData = {\n        [chainId]: {\n          ...(contractInformations ?? {}),\n        },\n      };\n\n      this.update((state) => {\n        state.marketData = {\n          ...state.marketData,\n          ...marketData,\n        };\n      });\n      updateSucceeded();\n    } catch (error: unknown) {\n      updateFailed(error);\n      throw error;\n    } finally {\n      delete this.#inProcessExchangeRateUpdates[updateKey];\n    }\n  }\n\n  /**\n   * Uses the token prices service to retrieve exchange rates for tokens in a\n   * particular currency.\n   *\n   * If the price API does not support the given chain ID, returns an empty\n   * object.\n   *\n   * If the price API does not support the given currency, retrieves exchange\n   * rates in a known currency instead, then converts those rates using the\n   * exchange rate between the known currency and desired currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * exchange rates.\n   * @returns A map from token address to its exchange rate in the native\n   * currency, or an empty map if no exchange rates can be obtained for the\n   * chain ID.\n   */\n  async #fetchAndMapExchangeRates({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    if (!this.#tokenPricesService.validateChainIdSupported(chainId)) {\n      return tokenAddresses.reduce((obj, tokenAddress) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: undefined,\n        };\n\n        return obj;\n      }, {});\n    }\n\n    if (this.#tokenPricesService.validateCurrencySupported(nativeCurrency)) {\n      return await this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n    }\n\n    return await this.#fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n      chainId,\n      tokenAddresses,\n      nativeCurrency,\n    });\n  }\n\n  /**\n   * Updates token rates for the given networkClientId\n   *\n   * @param input - The input for the poll.\n   * @param input.chainId - The chain id to poll token rates on.\n   */\n  async _executePoll({ chainId }: TokenRatesPollingInput): Promise<void> {\n    const { networkConfigurationsByChainId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n\n    const networkConfiguration = networkConfigurationsByChainId[chainId];\n    if (!networkConfiguration) {\n      console.error(\n        `TokenRatesController: No network configuration found for chainId ${chainId}`,\n      );\n      return;\n    }\n\n    await this.updateExchangeRatesByChainId({\n      chainId,\n      nativeCurrency: networkConfiguration.nativeCurrency,\n    });\n  }\n\n  /**\n   * Retrieves prices in the given currency for the given tokens on the given\n   * chain. Ensures that token addresses are checksum addresses.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForSupportedNativeCurrency({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    let contractNativeInformations;\n    const tokenPricesByTokenAddress = await reduceInBatchesSerially<\n      Hex,\n      Awaited<ReturnType<AbstractTokenPricesService['fetchTokenPrices']>>\n    >({\n      values: [...tokenAddresses].sort(),\n      batchSize: TOKEN_PRICES_BATCH_SIZE,\n      eachBatch: async (allTokenPricesByTokenAddress, batch) => {\n        const tokenPricesByTokenAddressForBatch =\n          await this.#tokenPricesService.fetchTokenPrices({\n            tokenAddresses: batch,\n            chainId,\n            currency: nativeCurrency,\n          });\n\n        return {\n          ...allTokenPricesByTokenAddress,\n          ...tokenPricesByTokenAddressForBatch,\n        };\n      },\n      initialResult: {},\n    });\n    contractNativeInformations = tokenPricesByTokenAddress;\n\n    // fetch for native token\n    if (tokenAddresses.length === 0) {\n      const contractNativeInformationsNative =\n        await this.#tokenPricesService.fetchTokenPrices({\n          tokenAddresses: [],\n          chainId,\n          currency: nativeCurrency,\n        });\n\n      contractNativeInformations = {\n        [ZERO_ADDRESS]: {\n          currency: nativeCurrency,\n          ...contractNativeInformationsNative[ZERO_ADDRESS],\n        },\n      };\n    }\n    return Object.entries(contractNativeInformations).reduce(\n      (obj, [tokenAddress, token]) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: { ...token },\n        };\n\n        return obj;\n      },\n      {},\n    );\n  }\n\n  /**\n   * If the price API does not support a given native currency, then we need to\n   * convert it to a fallback currency and feed that currency into the price\n   * API, then convert the prices to our desired native currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.chainId - The chain id to fetch prices for.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n    chainId,\n    tokenAddresses,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    tokenAddresses: Hex[];\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    const [\n      contractExchangeInformations,\n      fallbackCurrencyToNativeCurrencyConversionRate,\n    ] = await Promise.all([\n      this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency: FALL_BACK_VS_CURRENCY,\n      }),\n      getCurrencyConversionRate({\n        from: FALL_BACK_VS_CURRENCY,\n        to: nativeCurrency,\n      }),\n    ]);\n\n    if (fallbackCurrencyToNativeCurrencyConversionRate === null) {\n      return {};\n    }\n\n    // Converts the price in the fallback currency to the native currency\n    const convertFallbackToNative = (value: number | undefined) =>\n      value !== undefined && value !== null\n        ? value * fallbackCurrencyToNativeCurrencyConversionRate\n        : undefined;\n\n    const updatedContractExchangeRates = Object.entries(\n      contractExchangeInformations,\n    ).reduce((acc, [tokenAddress, token]) => {\n      acc = {\n        ...acc,\n        [tokenAddress]: {\n          ...token,\n          currency: nativeCurrency,\n          price: convertFallbackToNative(token.price),\n          marketCap: convertFallbackToNative(token.marketCap),\n          allTimeHigh: convertFallbackToNative(token.allTimeHigh),\n          allTimeLow: convertFallbackToNative(token.allTimeLow),\n          totalVolume: convertFallbackToNative(token.totalVolume),\n          high1d: convertFallbackToNative(token.high1d),\n          low1d: convertFallbackToNative(token.low1d),\n          dilutedMarketCap: convertFallbackToNative(token.dilutedMarketCap),\n        },\n      };\n      return acc;\n    }, {});\n\n    return updatedContractExchangeRates;\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenRatesControllerState();\n    });\n  }\n}\n\nexport default TokenRatesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts
index a5d6404..460f793 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts
@@ -1,6 +1,6 @@
 import type { AccountsControllerGetAccountAction, AccountsControllerGetSelectedAccountAction, AccountsControllerSelectedEvmAccountChangeEvent } from "@metamask/accounts-controller";
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedControllerMessenger } from "@metamask/base-controller";
-import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
 import { type Hex } from "@metamask/utils";
 import type { AbstractTokenPricesService } from "./token-prices-service/abstract-token-prices-service.cjs";
 import type { TokensControllerGetStateAction, TokensControllerStateChangeEvent } from "./TokensController.cjs";
@@ -105,17 +105,17 @@ export type TokenRatesControllerMessenger = RestrictedControllerMessenger<typeof
 export declare const getDefaultTokenRatesControllerState: () => TokenRatesControllerState;
 /** The input to start polling for the {@link TokenRatesController} */
 export type TokenRatesPollingInput = {
-    networkClientId: NetworkClientId;
+    chainId: Hex;
 };
 declare const TokenRatesController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenRatesPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenRatesPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenRatesPollingInput) => void>>;
     _executePoll(input: TokenRatesPollingInput): Promise<void>;
     startPolling(input: TokenRatesPollingInput): string;
     stopAllPolling(): void;
@@ -180,9 +180,13 @@ export declare class TokenRatesController extends TokenRatesController_base<type
      * Updates token rates for the given networkClientId
      *
      * @param input - The input for the poll.
-     * @param input.networkClientId - The network client ID used to get a ticker value.
+     * @param input.chainId - The chain id to poll token rates on.
      */
-    _executePoll({ networkClientId, }: TokenRatesPollingInput): Promise<void>;
+    _executePoll({ chainId }: TokenRatesPollingInput): Promise<void>;
+    /**
+     * Reset the controller state to the default state.
+     */
+    resetState(): void;
 }
 export default TokenRatesController;
 //# sourceMappingURL=TokenRatesController.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts.map b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts.map
index 71202f7..85d9f1e 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.cts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenRatesController.d.cts","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TokenRatesController.d.cts","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,kCAAkC,EAClC,0CAA0C,EAC1C,+CAA+C,EAChD,sCAAsC;AACvC,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,kCAAkC;AAQnC,OAAO,KAAK,EACV,2CAA2C,EAC3C,+BAA+B,EAC/B,iCAAiC,EAClC,qCAAqC;AAEtC,OAAO,EAAyB,KAAK,GAAG,EAAE,wBAAwB;AAKlE,OAAO,KAAK,EAAE,0BAA0B,EAAE,iEAA6D;AAEvG,OAAO,KAAK,EACV,8BAA8B,EAC9B,gCAAgC,EAEjC,+BAA2B;AAE5B;;;;;;;;;;;;GAYG;AACH,MAAM,MAAM,KAAK,GAAG;IAClB,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,WAAW,CAAC,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,eAAe,CAAC,EAAE,OAAO,CAAC;IAC1B,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,IAAI,CAAC,EAAE,MAAM,CAAC;CACf,CAAC;AAIF,MAAM,MAAM,qBAAqB,GAAG;IAClC,CAAC,OAAO,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;CACvC,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,YAAY,EAAE,KAAK,MAAM,EAAE,CAAC;IAC5B,QAAQ,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,UAAU,EAAE,MAAM,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,gBAAgB,EAAE,MAAM,CAAC;IACzB,MAAM,EAAE,MAAM,CAAC;IACf,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,wBAAwB,EAAE,MAAM,CAAC;IACjC,KAAK,EAAE,MAAM,CAAC;IACd,aAAa,EAAE,MAAM,CAAC;IACtB,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,qBAAqB,EAAE,MAAM,CAAC;IAC9B,qBAAqB,EAAE,MAAM,CAAC;IAC9B,sBAAsB,EAAE,MAAM,CAAC;IAC/B,WAAW,EAAE,MAAM,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,kBAAkB,GAAG,MAAM,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAOhE;;GAEG;AACH,MAAM,MAAM,cAAc,GACtB,8BAA8B,GAC9B,2CAA2C,GAC3C,+BAA+B,GAC/B,kCAAkC,GAClC,0CAA0C,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,aAAa,GACrB,gCAAgC,GAChC,iCAAiC,GACjC,+CAA+C,CAAC;AAEpD;;GAEG;AACH,eAAO,MAAM,cAAc,yBAAyB,CAAC;AAErD;;;;;GAKG;AACH,MAAM,MAAM,yBAAyB,GAAG;IACtC,UAAU,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;CACzD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAAG,wBAAwB,CACvE,OAAO,cAAc,EACrB,yBAAyB,CAC1B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG,kCAAkC,CAAC;AAE7E;;GAEG;AACH,MAAM,MAAM,oCAAoC,GAAG,0BAA0B,CAC3E,OAAO,cAAc,EACrB,yBAAyB,CAC1B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0BAA0B,GAAG,oCAAoC,CAAC;AAE9E;;GAEG;AACH,MAAM,MAAM,6BAA6B,GAAG,6BAA6B,CACvE,OAAO,cAAc,EACrB,2BAA2B,GAAG,cAAc,EAC5C,0BAA0B,GAAG,aAAa,EAC1C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AA2CF;;;;GAIG;AACH,eAAO,MAAM,mCAAmC,QAC1C,yBAIH,CAAC;AAEJ,sEAAsE;AACtE,MAAM,MAAM,sBAAsB,GAAG;IACnC,OAAO,EAAE,GAAG,CAAC;CACd,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,oBAAqB,SAAQ,0BACxC,OAAO,cAAc,EACrB,yBAAyB,EACzB,6BAA6B,CAC9B;;IAuBC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,QAAgB,EAChB,kBAAkB,EAClB,SAAS,EACT,KAAK,GACN,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAE,OAAO,CAAC;QACnB,kBAAkB,EAAE,0BAA0B,CAAC;QAC/C,SAAS,EAAE,6BAA6B,CAAC;QACzC,KAAK,CAAC,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IA4HD;;OAEG;IACH,MAAM,IAAI,IAAI;IAId;;OAEG;IACH,OAAO,IAAI,IAAI;IAIf;;OAEG;IACG,KAAK;IAMX;;OAEG;IACH,IAAI;IAoEJ;;OAEG;IACG,mBAAmB;IAOzB;;;;;;OAMG;IACG,4BAA4B,CAAC,EACjC,OAAO,EACP,cAAc,GACf,EAAE;QACD,OAAO,EAAE,GAAG,CAAC;QACb,cAAc,EAAE,MAAM,CAAC;KACxB;IA0GD;;;;;OAKG;IACG,YAAY,CAAC,EAAE,OAAO,EAAE,EAAE,sBAAsB,GAAG,OAAO,CAAC,IAAI,CAAC;IAoKtE;;OAEG;IACH,UAAU;CAKX;AAED,eAAe,oBAAoB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts
index 14c6b5f..12fb1f2 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts
@@ -1,6 +1,6 @@
 import type { AccountsControllerGetAccountAction, AccountsControllerGetSelectedAccountAction, AccountsControllerSelectedEvmAccountChangeEvent } from "@metamask/accounts-controller";
 import type { ControllerGetStateAction, ControllerStateChangeEvent, RestrictedControllerMessenger } from "@metamask/base-controller";
-import type { NetworkClientId, NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
+import type { NetworkControllerGetNetworkClientByIdAction, NetworkControllerGetStateAction, NetworkControllerStateChangeEvent } from "@metamask/network-controller";
 import { type Hex } from "@metamask/utils";
 import type { AbstractTokenPricesService } from "./token-prices-service/abstract-token-prices-service.mjs";
 import type { TokensControllerGetStateAction, TokensControllerStateChangeEvent } from "./TokensController.mjs";
@@ -105,17 +105,17 @@ export type TokenRatesControllerMessenger = RestrictedControllerMessenger<typeof
 export declare const getDefaultTokenRatesControllerState: () => TokenRatesControllerState;
 /** The input to start polling for the {@link TokenRatesController} */
 export type TokenRatesPollingInput = {
-    networkClientId: NetworkClientId;
+    chainId: Hex;
 };
 declare const TokenRatesController_base: (abstract new (...args: any[]) => {
-    readonly "__#787890@#intervalIds": Record<string, NodeJS.Timeout>;
-    "__#787890@#intervalLength": number | undefined;
+    readonly "__#786018@#intervalIds": Record<string, NodeJS.Timeout>;
+    "__#786018@#intervalLength": number | undefined;
     setIntervalLength(intervalLength: number): void;
     getIntervalLength(): number | undefined;
     _startPolling(input: TokenRatesPollingInput): void;
     _stopPollingByPollingTokenSetId(key: string): void;
-    readonly "__#787882@#pollingTokenSets": Map<string, Set<string>>;
-    "__#787882@#callbacks": Map<string, Set<(input: TokenRatesPollingInput) => void>>;
+    readonly "__#786010@#pollingTokenSets": Map<string, Set<string>>;
+    "__#786010@#callbacks": Map<string, Set<(input: TokenRatesPollingInput) => void>>;
     _executePoll(input: TokenRatesPollingInput): Promise<void>;
     startPolling(input: TokenRatesPollingInput): string;
     stopAllPolling(): void;
@@ -180,9 +180,13 @@ export declare class TokenRatesController extends TokenRatesController_base<type
      * Updates token rates for the given networkClientId
      *
      * @param input - The input for the poll.
-     * @param input.networkClientId - The network client ID used to get a ticker value.
+     * @param input.chainId - The chain id to poll token rates on.
      */
-    _executePoll({ networkClientId, }: TokenRatesPollingInput): Promise<void>;
+    _executePoll({ chainId }: TokenRatesPollingInput): Promise<void>;
+    /**
+     * Reset the controller state to the default state.
+     */
+    resetState(): void;
 }
 export default TokenRatesController;
 //# sourceMappingURL=TokenRatesController.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts.map b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts.map
index f7d4f13..1769437 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.d.mts.map
@@ -1 +1 @@
-{"version":3,"file":"TokenRatesController.d.mts","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,kCAAkC,EAClC,0CAA0C,EAC1C,+CAA+C,EAChD,sCAAsC;AACvC,OAAO,KAAK,EACV,wBAAwB,EACxB,0BAA0B,EAC1B,6BAA6B,EAC9B,kCAAkC;AAQnC,OAAO,KAAK,EACV,eAAe,EACf,2CAA2C,EAC3C,+BAA+B,EAC/B,iCAAiC,EAClC,qCAAqC;AAEtC,OAAO,EAAyB,KAAK,GAAG,EAAE,wBAAwB;AAKlE,OAAO,KAAK,EAAE,0BAA0B,EAAE,iEAA6D;AAEvG,OAAO,KAAK,EACV,8BAA8B,EAC9B,gCAAgC,EAEjC,+BAA2B;AAE5B;;;;;;;;;;;;GAYG;AACH,MAAM,MAAM,KAAK,GAAG;IAClB,OAAO,EAAE,MAAM,CAAC;IAChB,QAAQ,EAAE,MAAM,CAAC;IACjB,MAAM,EAAE,MAAM,CAAC;IACf,WAAW,CAAC,EAAE,MAAM,EAAE,CAAC;IACvB,KAAK,CAAC,EAAE,MAAM,CAAC;IACf,eAAe,CAAC,EAAE,OAAO,CAAC;IAC1B,QAAQ,CAAC,EAAE,OAAO,CAAC;IACnB,IAAI,CAAC,EAAE,MAAM,CAAC;CACf,CAAC;AAIF,MAAM,MAAM,qBAAqB,GAAG;IAClC,CAAC,OAAO,EAAE,MAAM,GAAG,MAAM,GAAG,SAAS,CAAC;CACvC,CAAC;AAEF,MAAM,MAAM,iBAAiB,GAAG;IAC9B,YAAY,EAAE,KAAK,MAAM,EAAE,CAAC;IAC5B,QAAQ,EAAE,MAAM,CAAC;IACjB,WAAW,EAAE,MAAM,CAAC;IACpB,UAAU,EAAE,MAAM,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,gBAAgB,EAAE,MAAM,CAAC;IACzB,MAAM,EAAE,MAAM,CAAC;IACf,KAAK,EAAE,MAAM,CAAC;IACd,SAAS,EAAE,MAAM,CAAC;IAClB,wBAAwB,EAAE,MAAM,CAAC;IACjC,KAAK,EAAE,MAAM,CAAC;IACd,aAAa,EAAE,MAAM,CAAC;IACtB,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,oBAAoB,EAAE,MAAM,CAAC;IAC7B,qBAAqB,EAAE,MAAM,CAAC;IAC9B,qBAAqB,EAAE,MAAM,CAAC;IAC9B,sBAAsB,EAAE,MAAM,CAAC;IAC/B,WAAW,EAAE,MAAM,CAAC;CACrB,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,kBAAkB,GAAG,MAAM,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC;AAOhE;;GAEG;AACH,MAAM,MAAM,cAAc,GACtB,8BAA8B,GAC9B,2CAA2C,GAC3C,+BAA+B,GAC/B,kCAAkC,GAClC,0CAA0C,CAAC;AAE/C;;GAEG;AACH,MAAM,MAAM,aAAa,GACrB,gCAAgC,GAChC,iCAAiC,GACjC,+CAA+C,CAAC;AAEpD;;GAEG;AACH,eAAO,MAAM,cAAc,yBAAyB,CAAC;AAErD;;;;;GAKG;AACH,MAAM,MAAM,yBAAyB,GAAG;IACtC,UAAU,EAAE,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,GAAG,EAAE,iBAAiB,CAAC,CAAC,CAAC;CACzD,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,kCAAkC,GAAG,wBAAwB,CACvE,OAAO,cAAc,EACrB,yBAAyB,CAC1B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,2BAA2B,GAAG,kCAAkC,CAAC;AAE7E;;GAEG;AACH,MAAM,MAAM,oCAAoC,GAAG,0BAA0B,CAC3E,OAAO,cAAc,EACrB,yBAAyB,CAC1B,CAAC;AAEF;;GAEG;AACH,MAAM,MAAM,0BAA0B,GAAG,oCAAoC,CAAC;AAE9E;;GAEG;AACH,MAAM,MAAM,6BAA6B,GAAG,6BAA6B,CACvE,OAAO,cAAc,EACrB,2BAA2B,GAAG,cAAc,EAC5C,0BAA0B,GAAG,aAAa,EAC1C,cAAc,CAAC,MAAM,CAAC,EACtB,aAAa,CAAC,MAAM,CAAC,CACtB,CAAC;AA2CF;;;;GAIG;AACH,eAAO,MAAM,mCAAmC,QAC1C,yBAIH,CAAC;AAEJ,sEAAsE;AACtE,MAAM,MAAM,sBAAsB,GAAG;IACnC,eAAe,EAAE,eAAe,CAAC;CAClC,CAAC;;;;;;;;;;;;;;;;AAEF;;;GAGG;AACH,qBAAa,oBAAqB,SAAQ,0BACxC,OAAO,cAAc,EACrB,yBAAyB,EACzB,6BAA6B,CAC9B;;IAuBC;;;;;;;;;OASG;gBACS,EACV,QAA2B,EAC3B,QAAgB,EAChB,kBAAkB,EAClB,SAAS,EACT,KAAK,GACN,EAAE;QACD,QAAQ,CAAC,EAAE,MAAM,CAAC;QAClB,QAAQ,CAAC,EAAE,OAAO,CAAC;QACnB,kBAAkB,EAAE,0BAA0B,CAAC;QAC/C,SAAS,EAAE,6BAA6B,CAAC;QACzC,KAAK,CAAC,EAAE,OAAO,CAAC,yBAAyB,CAAC,CAAC;KAC5C;IA+FD;;OAEG;IACH,MAAM,IAAI,IAAI;IAId;;OAEG;IACH,OAAO,IAAI,IAAI;IAIf;;OAEG;IACG,KAAK;IAMX;;OAEG;IACH,IAAI;IAoEJ;;OAEG;IACG,mBAAmB;IAOzB;;;;;;OAMG;IACG,4BAA4B,CAAC,EACjC,OAAO,EACP,cAAc,GACf,EAAE;QACD,OAAO,EAAE,GAAG,CAAC;QACb,cAAc,EAAE,MAAM,CAAC;KACxB;IAyGD;;;;;OAKG;IACG,YAAY,CAAC,EACjB,eAAe,GAChB,EAAE,sBAAsB,GAAG,OAAO,CAAC,IAAI,CAAC;CAwJ1C;AAED,eAAe,oBAAoB,CAAC"}
\ No newline at end of file
+{"version":3,"file":"TokenRatesController.d.mts","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs
index 1303d14..ae7310a 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs
@@ -203,13 +203,26 @@ export class TokenRatesController extends StaticIntervalPollingController() {
      * Updates token rates for the given networkClientId
      *
      * @param input - The input for the poll.
-     * @param input.networkClientId - The network client ID used to get a ticker value.
+     * @param input.chainId - The chain id to poll token rates on.
      */
-    async _executePoll({ networkClientId, }) {
-        const networkClient = this.messagingSystem.call('NetworkController:getNetworkClientById', networkClientId);
+    async _executePoll({ chainId }) {
+        const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+        const networkConfiguration = networkConfigurationsByChainId[chainId];
+        if (!networkConfiguration) {
+            console.error(`TokenRatesController: No network configuration found for chainId ${chainId}`);
+            return;
+        }
         await this.updateExchangeRatesByChainId({
-            chainId: networkClient.configuration.chainId,
-            nativeCurrency: networkClient.configuration.ticker,
+            chainId,
+            nativeCurrency: networkConfiguration.nativeCurrency,
+        });
+    }
+    /**
+     * Reset the controller state to the default state.
+     */
+    resetState() {
+        this.update(() => {
+            return getDefaultTokenRatesControllerState();
         });
     }
 }
@@ -218,14 +231,29 @@ _TokenRatesController_handle = new WeakMap(), _TokenRatesController_pollState =
     // TODO: Either fix this lint violation or explain why it's necessary to ignore.
     // eslint-disable-next-line @typescript-eslint/no-misused-promises
     async ({ allTokens, allDetectedTokens }) => {
-        const previousTokenAddresses = __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_getTokenAddresses).call(this, __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"));
+        if (__classPrivateFieldGet(this, _TokenRatesController_disabled, "f")) {
+            return;
+        }
+        const chainIds = [
+            ...new Set([
+                ...Object.keys(allTokens),
+                ...Object.keys(allDetectedTokens),
+            ]),
+        ];
+        const chainIdsToUpdate = chainIds.filter((chainId) => !isEqual(__classPrivateFieldGet(this, _TokenRatesController_allTokens, "f")[chainId], allTokens[chainId]) ||
+            !isEqual(__classPrivateFieldGet(this, _TokenRatesController_allDetectedTokens, "f")[chainId], allDetectedTokens[chainId]));
         __classPrivateFieldSet(this, _TokenRatesController_allTokens, allTokens, "f");
         __classPrivateFieldSet(this, _TokenRatesController_allDetectedTokens, allDetectedTokens, "f");
-        const newTokenAddresses = __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_getTokenAddresses).call(this, __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"));
-        if (!isEqual(previousTokenAddresses, newTokenAddresses) &&
-            __classPrivateFieldGet(this, _TokenRatesController_pollState, "f") === PollState.Active) {
-            await this.updateExchangeRates();
-        }
+        const { networkConfigurationsByChainId } = this.messagingSystem.call('NetworkController:getState');
+        await Promise.allSettled(chainIdsToUpdate.map(async (chainId) => {
+            const nativeCurrency = networkConfigurationsByChainId[chainId]?.nativeCurrency;
+            if (nativeCurrency) {
+                await this.updateExchangeRatesByChainId({
+                    chainId: chainId,
+                    nativeCurrency,
+                });
+            }
+        }));
     }, ({ allTokens, allDetectedTokens }) => {
         return { allTokens, allDetectedTokens };
     });
@@ -320,6 +348,7 @@ async function _TokenRatesController_fetchAndMapExchangeRates({ tokenAddresses,
         });
     }
     return await __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency).call(this, {
+        chainId,
         tokenAddresses,
         nativeCurrency,
     });
@@ -383,17 +412,18 @@ async function _TokenRatesController_fetchAndMapExchangeRatesForSupportedNativeC
  * API, then convert the prices to our desired native currency.
  *
  * @param args - The arguments to this function.
+ * @param args.chainId - The chain id to fetch prices for.
  * @param args.tokenAddresses - Addresses for tokens.
  * @param args.nativeCurrency - The native currency in which to request
  * prices.
  * @returns A map of the token addresses (as checksums) to their prices in the
  * native currency.
  */
-async function _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency({ tokenAddresses, nativeCurrency, }) {
+async function _TokenRatesController_fetchAndMapExchangeRatesForUnsupportedNativeCurrency({ chainId, tokenAddresses, nativeCurrency, }) {
     const [contractExchangeInformations, fallbackCurrencyToNativeCurrencyConversionRate,] = await Promise.all([
         __classPrivateFieldGet(this, _TokenRatesController_instances, "m", _TokenRatesController_fetchAndMapExchangeRatesForSupportedNativeCurrency).call(this, {
             tokenAddresses,
-            chainId: __classPrivateFieldGet(this, _TokenRatesController_chainId, "f"),
+            chainId,
             nativeCurrency: FALL_BACK_VS_CURRENCY,
         }),
         getCurrencyConversionRate({
diff --git a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs.map b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs.map
index 20df9ee..d3fca7e 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs.map
+++ b/node_modules/@metamask/assets-controllers/dist/TokenRatesController.mjs.map
@@ -1 +1 @@
-{"version":3,"file":"TokenRatesController.mjs","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetAccountAction,\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport type {\n  NetworkClientId,\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport { createDeferredPromise, type Hex } from '@metamask/utils';\nimport { isEqual } from 'lodash';\n\nimport { reduceInBatchesSerially, TOKEN_PRICES_BATCH_SIZE } from './assetsUtil';\nimport { fetchExchangeRate as fetchNativeCurrencyExchangeRate } from './crypto-compare-service';\nimport type { AbstractTokenPricesService } from './token-prices-service/abstract-token-prices-service';\nimport { ZERO_ADDRESS } from './token-prices-service/codefi-v2';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerStateChangeEvent,\n  TokensControllerState,\n} from './TokensController';\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property aggregators - An array containing the token's aggregators\n * @property image - Image of the token, url or bit32 image\n * @property hasBalanceError - 'true' if there is an error while updating the token balance\n * @property isERC721 - 'true' if the token is a ERC721 token\n * @property name - Name of the token\n */\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  hasBalanceError?: boolean;\n  isERC721?: boolean;\n  name?: string;\n};\n\nconst DEFAULT_INTERVAL = 180000;\n\nexport type ContractExchangeRates = {\n  [address: string]: number | undefined;\n};\n\nexport type MarketDataDetails = {\n  tokenAddress: `0x${string}`;\n  currency: string;\n  allTimeHigh: number;\n  allTimeLow: number;\n  circulatingSupply: number;\n  dilutedMarketCap: number;\n  high1d: number;\n  low1d: number;\n  marketCap: number;\n  marketCapPercentChange1d: number;\n  price: number;\n  priceChange1d: number;\n  pricePercentChange1d: number;\n  pricePercentChange1h: number;\n  pricePercentChange1y: number;\n  pricePercentChange7d: number;\n  pricePercentChange14d: number;\n  pricePercentChange30d: number;\n  pricePercentChange200d: number;\n  totalVolume: number;\n};\n\n/**\n * Represents a mapping of token contract addresses to their market data.\n */\nexport type ContractMarketData = Record<Hex, MarketDataDetails>;\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * The external actions available to the {@link TokenRatesController}.\n */\nexport type AllowedActions =\n  | TokensControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | AccountsControllerGetAccountAction\n  | AccountsControllerGetSelectedAccountAction;\n\n/**\n * The external events available to the {@link TokenRatesController}.\n */\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent\n  | AccountsControllerSelectedEvmAccountChangeEvent;\n\n/**\n * The name of the {@link TokenRatesController}.\n */\nexport const controllerName = 'TokenRatesController';\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property marketData - Market data for tokens, keyed by chain ID and then token contract address.\n */\nexport type TokenRatesControllerState = {\n  marketData: Record<Hex, Record<Hex, MarketDataDetails>>;\n};\n\n/**\n * The action that can be performed to get the state of the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerActions = TokenRatesControllerGetStateAction;\n\n/**\n * The event that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The events that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerEvents = TokenRatesControllerStateChangeEvent;\n\n/**\n * The messenger of the {@link TokenRatesController} for communication.\n */\nexport type TokenRatesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenRatesControllerActions | AllowedActions,\n  TokenRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Uses the CryptoCompare API to fetch the exchange rate between one currency\n * and another, i.e., the multiplier to apply the amount of one currency in\n * order to convert it to another.\n *\n * @param args - The arguments to this function.\n * @param args.from - The currency to convert from.\n * @param args.to - The currency to convert to.\n * @returns The exchange rate between `fromCurrency` to `toCurrency` if one\n * exists, or null if one does not.\n */\nasync function getCurrencyConversionRate({\n  from,\n  to,\n}: {\n  from: string;\n  to: string;\n}) {\n  const includeUSDRate = false;\n  try {\n    const result = await fetchNativeCurrencyExchangeRate(\n      to,\n      from,\n      includeUSDRate,\n    );\n    return result.conversionRate;\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message.includes('market does not exist for this coin pair')\n    ) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nconst tokenRatesControllerMetadata = {\n  marketData: { persist: true, anonymous: false },\n};\n\n/**\n * Get the default {@link TokenRatesController} state.\n *\n * @returns The default {@link TokenRatesController} state.\n */\nexport const getDefaultTokenRatesControllerState =\n  (): TokenRatesControllerState => {\n    return {\n      marketData: {},\n    };\n  };\n\n/** The input to start polling for the {@link TokenRatesController} */\nexport type TokenRatesPollingInput = {\n  networkClientId: NetworkClientId;\n};\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends StaticIntervalPollingController<TokenRatesPollingInput>()<\n  typeof controllerName,\n  TokenRatesControllerState,\n  TokenRatesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #pollState = PollState.Inactive;\n\n  #tokenPricesService: AbstractTokenPricesService;\n\n  #inProcessExchangeRateUpdates: Record<`${Hex}:${string}`, Promise<void>> = {};\n\n  #selectedAccountId: string;\n\n  #disabled: boolean;\n\n  #chainId: Hex;\n\n  #ticker: string;\n\n  #interval: number;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The polling interval in ms\n   * @param options.disabled - Boolean to track if network requests are blocked\n   * @param options.tokenPricesService - An object in charge of retrieving token price\n   * @param options.messenger - The controller messenger instance for communication\n   * @param options.state - Initial state to set on this controller\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = false,\n    tokenPricesService,\n    messenger,\n    state,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    tokenPricesService: AbstractTokenPricesService;\n    messenger: TokenRatesControllerMessenger;\n    state?: Partial<TokenRatesControllerState>;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: { ...getDefaultTokenRatesControllerState(), ...state },\n      metadata: tokenRatesControllerMetadata,\n    });\n\n    this.setIntervalLength(interval);\n    this.#tokenPricesService = tokenPricesService;\n    this.#disabled = disabled;\n    this.#interval = interval;\n\n    const { chainId: currentChainId, ticker: currentTicker } =\n      this.#getChainIdAndTicker();\n    this.#chainId = currentChainId;\n    this.#ticker = currentTicker;\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { allTokens, allDetectedTokens } = this.#getTokensControllerState();\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.#subscribeToTokensStateChange();\n\n    this.#subscribeToNetworkStateChange();\n  }\n\n  #subscribeToTokensStateChange() {\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ allTokens, allDetectedTokens }) => {\n        const previousTokenAddresses = this.#getTokenAddresses(this.#chainId);\n        this.#allTokens = allTokens;\n        this.#allDetectedTokens = allDetectedTokens;\n\n        const newTokenAddresses = this.#getTokenAddresses(this.#chainId);\n        if (\n          !isEqual(previousTokenAddresses, newTokenAddresses) &&\n          this.#pollState === PollState.Active\n        ) {\n          await this.updateExchangeRates();\n        }\n      },\n      ({ allTokens, allDetectedTokens }) => {\n        return { allTokens, allDetectedTokens };\n      },\n    );\n  }\n\n  #subscribeToNetworkStateChange() {\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const {\n          configuration: { chainId, ticker },\n        } = this.messagingSystem.call(\n          'NetworkController:getNetworkClientById',\n          selectedNetworkClientId,\n        );\n\n        if (this.#chainId !== chainId || this.#ticker !== ticker) {\n          this.#chainId = chainId;\n          this.#ticker = ticker;\n          if (this.#pollState === PollState.Active) {\n            await this.updateExchangeRates();\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Get the tokens for the given chain.\n   *\n   * @param chainId - The chain ID.\n   * @returns The list of tokens addresses for the current chain\n   */\n  #getTokenAddresses(chainId: Hex): Hex[] {\n    const getTokens = (allTokens: Record<Hex, { address: string }[]>) =>\n      Object.values(allTokens ?? {}).flatMap((tokens) =>\n        tokens.map(({ address }) => toHex(toChecksumHexAddress(address))),\n      );\n\n    const tokenAddresses = getTokens(this.#allTokens[chainId]);\n    const detectedTokenAddresses = getTokens(this.#allDetectedTokens[chainId]);\n\n    return [...new Set([...tokenAddresses, ...detectedTokenAddresses])].sort();\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  #getSelectedAccount(): InternalAccount {\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    return selectedAccount;\n  }\n\n  #getChainIdAndTicker(): {\n    chainId: Hex;\n    ticker: string;\n  } {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId: networkClient.configuration.chainId,\n      ticker: networkClient.configuration.ticker,\n    };\n  }\n\n  #getTokensControllerState(): {\n    allTokens: TokensControllerState['allTokens'];\n    allDetectedTokens: TokensControllerState['allDetectedTokens'];\n  } {\n    const { allTokens, allDetectedTokens } = this.messagingSystem.call(\n      'TokensController:getState',\n    );\n\n    return {\n      allTokens,\n      allDetectedTokens,\n    };\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#poll();\n    }, this.#interval);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    await this.updateExchangeRatesByChainId({\n      chainId: this.#chainId,\n      nativeCurrency: this.#ticker,\n    });\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   *\n   * @param options - The options to fetch exchange rates.\n   * @param options.chainId - The chain ID.\n   * @param options.nativeCurrency - The ticker for the chain.\n   */\n  async updateExchangeRatesByChainId({\n    chainId,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    nativeCurrency: string;\n  }) {\n    if (this.#disabled) {\n      return;\n    }\n\n    const tokenAddresses = this.#getTokenAddresses(chainId);\n\n    const updateKey: `${Hex}:${string}` = `${chainId}:${nativeCurrency}`;\n    if (updateKey in this.#inProcessExchangeRateUpdates) {\n      // This prevents redundant updates\n      // This promise is resolved after the in-progress update has finished,\n      // and state has been updated.\n      await this.#inProcessExchangeRateUpdates[updateKey];\n      return;\n    }\n\n    const {\n      promise: inProgressUpdate,\n      resolve: updateSucceeded,\n      reject: updateFailed,\n    } = createDeferredPromise({ suppressUnhandledRejection: true });\n    this.#inProcessExchangeRateUpdates[updateKey] = inProgressUpdate;\n\n    try {\n      const contractInformations = await this.#fetchAndMapExchangeRates({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n\n      const marketData = {\n        [chainId]: {\n          ...(contractInformations ?? {}),\n        },\n      };\n\n      this.update((state) => {\n        state.marketData = {\n          ...state.marketData,\n          ...marketData,\n        };\n      });\n      updateSucceeded();\n    } catch (error: unknown) {\n      updateFailed(error);\n      throw error;\n    } finally {\n      delete this.#inProcessExchangeRateUpdates[updateKey];\n    }\n  }\n\n  /**\n   * Uses the token prices service to retrieve exchange rates for tokens in a\n   * particular currency.\n   *\n   * If the price API does not support the given chain ID, returns an empty\n   * object.\n   *\n   * If the price API does not support the given currency, retrieves exchange\n   * rates in a known currency instead, then converts those rates using the\n   * exchange rate between the known currency and desired currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * exchange rates.\n   * @returns A map from token address to its exchange rate in the native\n   * currency, or an empty map if no exchange rates can be obtained for the\n   * chain ID.\n   */\n  async #fetchAndMapExchangeRates({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    if (!this.#tokenPricesService.validateChainIdSupported(chainId)) {\n      return tokenAddresses.reduce((obj, tokenAddress) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: undefined,\n        };\n\n        return obj;\n      }, {});\n    }\n\n    if (this.#tokenPricesService.validateCurrencySupported(nativeCurrency)) {\n      return await this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n    }\n\n    return await this.#fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n      tokenAddresses,\n      nativeCurrency,\n    });\n  }\n\n  /**\n   * Updates token rates for the given networkClientId\n   *\n   * @param input - The input for the poll.\n   * @param input.networkClientId - The network client ID used to get a ticker value.\n   */\n  async _executePoll({\n    networkClientId,\n  }: TokenRatesPollingInput): Promise<void> {\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      networkClientId,\n    );\n    await this.updateExchangeRatesByChainId({\n      chainId: networkClient.configuration.chainId,\n      nativeCurrency: networkClient.configuration.ticker,\n    });\n  }\n\n  /**\n   * Retrieves prices in the given currency for the given tokens on the given\n   * chain. Ensures that token addresses are checksum addresses.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForSupportedNativeCurrency({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    let contractNativeInformations;\n    const tokenPricesByTokenAddress = await reduceInBatchesSerially<\n      Hex,\n      Awaited<ReturnType<AbstractTokenPricesService['fetchTokenPrices']>>\n    >({\n      values: [...tokenAddresses].sort(),\n      batchSize: TOKEN_PRICES_BATCH_SIZE,\n      eachBatch: async (allTokenPricesByTokenAddress, batch) => {\n        const tokenPricesByTokenAddressForBatch =\n          await this.#tokenPricesService.fetchTokenPrices({\n            tokenAddresses: batch,\n            chainId,\n            currency: nativeCurrency,\n          });\n\n        return {\n          ...allTokenPricesByTokenAddress,\n          ...tokenPricesByTokenAddressForBatch,\n        };\n      },\n      initialResult: {},\n    });\n    contractNativeInformations = tokenPricesByTokenAddress;\n\n    // fetch for native token\n    if (tokenAddresses.length === 0) {\n      const contractNativeInformationsNative =\n        await this.#tokenPricesService.fetchTokenPrices({\n          tokenAddresses: [],\n          chainId,\n          currency: nativeCurrency,\n        });\n\n      contractNativeInformations = {\n        [ZERO_ADDRESS]: {\n          currency: nativeCurrency,\n          ...contractNativeInformationsNative[ZERO_ADDRESS],\n        },\n      };\n    }\n    return Object.entries(contractNativeInformations).reduce(\n      (obj, [tokenAddress, token]) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: { ...token },\n        };\n\n        return obj;\n      },\n      {},\n    );\n  }\n\n  /**\n   * If the price API does not support a given native currency, then we need to\n   * convert it to a fallback currency and feed that currency into the price\n   * API, then convert the prices to our desired native currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n    tokenAddresses,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    const [\n      contractExchangeInformations,\n      fallbackCurrencyToNativeCurrencyConversionRate,\n    ] = await Promise.all([\n      this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId: this.#chainId,\n        nativeCurrency: FALL_BACK_VS_CURRENCY,\n      }),\n      getCurrencyConversionRate({\n        from: FALL_BACK_VS_CURRENCY,\n        to: nativeCurrency,\n      }),\n    ]);\n\n    if (fallbackCurrencyToNativeCurrencyConversionRate === null) {\n      return {};\n    }\n\n    // Converts the price in the fallback currency to the native currency\n    const convertFallbackToNative = (value: number | undefined) =>\n      value !== undefined && value !== null\n        ? value * fallbackCurrencyToNativeCurrencyConversionRate\n        : undefined;\n\n    const updatedContractExchangeRates = Object.entries(\n      contractExchangeInformations,\n    ).reduce((acc, [tokenAddress, token]) => {\n      acc = {\n        ...acc,\n        [tokenAddress]: {\n          ...token,\n          currency: nativeCurrency,\n          price: convertFallbackToNative(token.price),\n          marketCap: convertFallbackToNative(token.marketCap),\n          allTimeHigh: convertFallbackToNative(token.allTimeHigh),\n          allTimeLow: convertFallbackToNative(token.allTimeLow),\n          totalVolume: convertFallbackToNative(token.totalVolume),\n          high1d: convertFallbackToNative(token.high1d),\n          low1d: convertFallbackToNative(token.low1d),\n          dilutedMarketCap: convertFallbackToNative(token.dilutedMarketCap),\n        },\n      };\n      return acc;\n    }, {});\n\n    return updatedContractExchangeRates;\n  }\n}\n\nexport default TokenRatesController;\n"]}
\ No newline at end of file
+{"version":3,"file":"TokenRatesController.mjs","sourceRoot":"","sources":["../src/TokenRatesController.ts"],"names":[],"mappings":"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","sourcesContent":["import type {\n  AccountsControllerGetAccountAction,\n  AccountsControllerGetSelectedAccountAction,\n  AccountsControllerSelectedEvmAccountChangeEvent,\n} from '@metamask/accounts-controller';\nimport type {\n  ControllerGetStateAction,\n  ControllerStateChangeEvent,\n  RestrictedControllerMessenger,\n} from '@metamask/base-controller';\nimport {\n  safelyExecute,\n  toChecksumHexAddress,\n  FALL_BACK_VS_CURRENCY,\n  toHex,\n} from '@metamask/controller-utils';\nimport type { InternalAccount } from '@metamask/keyring-api';\nimport type {\n  NetworkControllerGetNetworkClientByIdAction,\n  NetworkControllerGetStateAction,\n  NetworkControllerStateChangeEvent,\n} from '@metamask/network-controller';\nimport { StaticIntervalPollingController } from '@metamask/polling-controller';\nimport { createDeferredPromise, type Hex } from '@metamask/utils';\nimport { isEqual } from 'lodash';\n\nimport { reduceInBatchesSerially, TOKEN_PRICES_BATCH_SIZE } from './assetsUtil';\nimport { fetchExchangeRate as fetchNativeCurrencyExchangeRate } from './crypto-compare-service';\nimport type { AbstractTokenPricesService } from './token-prices-service/abstract-token-prices-service';\nimport { ZERO_ADDRESS } from './token-prices-service/codefi-v2';\nimport type {\n  TokensControllerGetStateAction,\n  TokensControllerStateChangeEvent,\n  TokensControllerState,\n} from './TokensController';\n\n/**\n * @type Token\n *\n * Token representation\n * @property address - Hex address of the token contract\n * @property decimals - Number of decimals the token uses\n * @property symbol - Symbol of the token\n * @property aggregators - An array containing the token's aggregators\n * @property image - Image of the token, url or bit32 image\n * @property hasBalanceError - 'true' if there is an error while updating the token balance\n * @property isERC721 - 'true' if the token is a ERC721 token\n * @property name - Name of the token\n */\nexport type Token = {\n  address: string;\n  decimals: number;\n  symbol: string;\n  aggregators?: string[];\n  image?: string;\n  hasBalanceError?: boolean;\n  isERC721?: boolean;\n  name?: string;\n};\n\nconst DEFAULT_INTERVAL = 180000;\n\nexport type ContractExchangeRates = {\n  [address: string]: number | undefined;\n};\n\nexport type MarketDataDetails = {\n  tokenAddress: `0x${string}`;\n  currency: string;\n  allTimeHigh: number;\n  allTimeLow: number;\n  circulatingSupply: number;\n  dilutedMarketCap: number;\n  high1d: number;\n  low1d: number;\n  marketCap: number;\n  marketCapPercentChange1d: number;\n  price: number;\n  priceChange1d: number;\n  pricePercentChange1d: number;\n  pricePercentChange1h: number;\n  pricePercentChange1y: number;\n  pricePercentChange7d: number;\n  pricePercentChange14d: number;\n  pricePercentChange30d: number;\n  pricePercentChange200d: number;\n  totalVolume: number;\n};\n\n/**\n * Represents a mapping of token contract addresses to their market data.\n */\nexport type ContractMarketData = Record<Hex, MarketDataDetails>;\n\nenum PollState {\n  Active = 'Active',\n  Inactive = 'Inactive',\n}\n\n/**\n * The external actions available to the {@link TokenRatesController}.\n */\nexport type AllowedActions =\n  | TokensControllerGetStateAction\n  | NetworkControllerGetNetworkClientByIdAction\n  | NetworkControllerGetStateAction\n  | AccountsControllerGetAccountAction\n  | AccountsControllerGetSelectedAccountAction;\n\n/**\n * The external events available to the {@link TokenRatesController}.\n */\nexport type AllowedEvents =\n  | TokensControllerStateChangeEvent\n  | NetworkControllerStateChangeEvent\n  | AccountsControllerSelectedEvmAccountChangeEvent;\n\n/**\n * The name of the {@link TokenRatesController}.\n */\nexport const controllerName = 'TokenRatesController';\n\n/**\n * @type TokenRatesState\n *\n * Token rates controller state\n * @property marketData - Market data for tokens, keyed by chain ID and then token contract address.\n */\nexport type TokenRatesControllerState = {\n  marketData: Record<Hex, Record<Hex, MarketDataDetails>>;\n};\n\n/**\n * The action that can be performed to get the state of the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerGetStateAction = ControllerGetStateAction<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The actions that can be performed using the {@link TokenRatesController}.\n */\nexport type TokenRatesControllerActions = TokenRatesControllerGetStateAction;\n\n/**\n * The event that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerStateChangeEvent = ControllerStateChangeEvent<\n  typeof controllerName,\n  TokenRatesControllerState\n>;\n\n/**\n * The events that {@link TokenRatesController} can emit.\n */\nexport type TokenRatesControllerEvents = TokenRatesControllerStateChangeEvent;\n\n/**\n * The messenger of the {@link TokenRatesController} for communication.\n */\nexport type TokenRatesControllerMessenger = RestrictedControllerMessenger<\n  typeof controllerName,\n  TokenRatesControllerActions | AllowedActions,\n  TokenRatesControllerEvents | AllowedEvents,\n  AllowedActions['type'],\n  AllowedEvents['type']\n>;\n\n/**\n * Uses the CryptoCompare API to fetch the exchange rate between one currency\n * and another, i.e., the multiplier to apply the amount of one currency in\n * order to convert it to another.\n *\n * @param args - The arguments to this function.\n * @param args.from - The currency to convert from.\n * @param args.to - The currency to convert to.\n * @returns The exchange rate between `fromCurrency` to `toCurrency` if one\n * exists, or null if one does not.\n */\nasync function getCurrencyConversionRate({\n  from,\n  to,\n}: {\n  from: string;\n  to: string;\n}) {\n  const includeUSDRate = false;\n  try {\n    const result = await fetchNativeCurrencyExchangeRate(\n      to,\n      from,\n      includeUSDRate,\n    );\n    return result.conversionRate;\n  } catch (error) {\n    if (\n      error instanceof Error &&\n      error.message.includes('market does not exist for this coin pair')\n    ) {\n      return null;\n    }\n    throw error;\n  }\n}\n\nconst tokenRatesControllerMetadata = {\n  marketData: { persist: true, anonymous: false },\n};\n\n/**\n * Get the default {@link TokenRatesController} state.\n *\n * @returns The default {@link TokenRatesController} state.\n */\nexport const getDefaultTokenRatesControllerState =\n  (): TokenRatesControllerState => {\n    return {\n      marketData: {},\n    };\n  };\n\n/** The input to start polling for the {@link TokenRatesController} */\nexport type TokenRatesPollingInput = {\n  chainId: Hex;\n};\n\n/**\n * Controller that passively polls on a set interval for token-to-fiat exchange rates\n * for tokens stored in the TokensController\n */\nexport class TokenRatesController extends StaticIntervalPollingController<TokenRatesPollingInput>()<\n  typeof controllerName,\n  TokenRatesControllerState,\n  TokenRatesControllerMessenger\n> {\n  #handle?: ReturnType<typeof setTimeout>;\n\n  #pollState = PollState.Inactive;\n\n  #tokenPricesService: AbstractTokenPricesService;\n\n  #inProcessExchangeRateUpdates: Record<`${Hex}:${string}`, Promise<void>> = {};\n\n  #selectedAccountId: string;\n\n  #disabled: boolean;\n\n  #chainId: Hex;\n\n  #ticker: string;\n\n  #interval: number;\n\n  #allTokens: TokensControllerState['allTokens'];\n\n  #allDetectedTokens: TokensControllerState['allDetectedTokens'];\n\n  /**\n   * Creates a TokenRatesController instance.\n   *\n   * @param options - The controller options.\n   * @param options.interval - The polling interval in ms\n   * @param options.disabled - Boolean to track if network requests are blocked\n   * @param options.tokenPricesService - An object in charge of retrieving token price\n   * @param options.messenger - The controller messenger instance for communication\n   * @param options.state - Initial state to set on this controller\n   */\n  constructor({\n    interval = DEFAULT_INTERVAL,\n    disabled = false,\n    tokenPricesService,\n    messenger,\n    state,\n  }: {\n    interval?: number;\n    disabled?: boolean;\n    tokenPricesService: AbstractTokenPricesService;\n    messenger: TokenRatesControllerMessenger;\n    state?: Partial<TokenRatesControllerState>;\n  }) {\n    super({\n      name: controllerName,\n      messenger,\n      state: { ...getDefaultTokenRatesControllerState(), ...state },\n      metadata: tokenRatesControllerMetadata,\n    });\n\n    this.setIntervalLength(interval);\n    this.#tokenPricesService = tokenPricesService;\n    this.#disabled = disabled;\n    this.#interval = interval;\n\n    const { chainId: currentChainId, ticker: currentTicker } =\n      this.#getChainIdAndTicker();\n    this.#chainId = currentChainId;\n    this.#ticker = currentTicker;\n\n    this.#selectedAccountId = this.#getSelectedAccount().id;\n\n    const { allTokens, allDetectedTokens } = this.#getTokensControllerState();\n    this.#allTokens = allTokens;\n    this.#allDetectedTokens = allDetectedTokens;\n\n    this.#subscribeToTokensStateChange();\n\n    this.#subscribeToNetworkStateChange();\n  }\n\n  #subscribeToTokensStateChange() {\n    this.messagingSystem.subscribe(\n      'TokensController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ allTokens, allDetectedTokens }) => {\n        if (this.#disabled) {\n          return;\n        }\n\n        const chainIds = [\n          ...new Set([\n            ...Object.keys(allTokens),\n            ...Object.keys(allDetectedTokens),\n          ]),\n        ] as Hex[];\n\n        const chainIdsToUpdate = chainIds.filter(\n          (chainId) =>\n            !isEqual(this.#allTokens[chainId], allTokens[chainId]) ||\n            !isEqual(\n              this.#allDetectedTokens[chainId],\n              allDetectedTokens[chainId],\n            ),\n        );\n\n        this.#allTokens = allTokens;\n        this.#allDetectedTokens = allDetectedTokens;\n\n        const { networkConfigurationsByChainId } = this.messagingSystem.call(\n          'NetworkController:getState',\n        );\n\n        await Promise.allSettled(\n          chainIdsToUpdate.map(async (chainId) => {\n            const nativeCurrency =\n              networkConfigurationsByChainId[chainId as Hex]?.nativeCurrency;\n\n            if (nativeCurrency) {\n              await this.updateExchangeRatesByChainId({\n                chainId: chainId as Hex,\n                nativeCurrency,\n              });\n            }\n          }),\n        );\n      },\n      ({ allTokens, allDetectedTokens }) => {\n        return { allTokens, allDetectedTokens };\n      },\n    );\n  }\n\n  #subscribeToNetworkStateChange() {\n    this.messagingSystem.subscribe(\n      'NetworkController:stateChange',\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      async ({ selectedNetworkClientId }) => {\n        const {\n          configuration: { chainId, ticker },\n        } = this.messagingSystem.call(\n          'NetworkController:getNetworkClientById',\n          selectedNetworkClientId,\n        );\n\n        if (this.#chainId !== chainId || this.#ticker !== ticker) {\n          this.#chainId = chainId;\n          this.#ticker = ticker;\n          if (this.#pollState === PollState.Active) {\n            await this.updateExchangeRates();\n          }\n        }\n      },\n    );\n  }\n\n  /**\n   * Get the tokens for the given chain.\n   *\n   * @param chainId - The chain ID.\n   * @returns The list of tokens addresses for the current chain\n   */\n  #getTokenAddresses(chainId: Hex): Hex[] {\n    const getTokens = (allTokens: Record<Hex, { address: string }[]>) =>\n      Object.values(allTokens ?? {}).flatMap((tokens) =>\n        tokens.map(({ address }) => toHex(toChecksumHexAddress(address))),\n      );\n\n    const tokenAddresses = getTokens(this.#allTokens[chainId]);\n    const detectedTokenAddresses = getTokens(this.#allDetectedTokens[chainId]);\n\n    return [...new Set([...tokenAddresses, ...detectedTokenAddresses])].sort();\n  }\n\n  /**\n   * Allows controller to make active and passive polling requests\n   */\n  enable(): void {\n    this.#disabled = false;\n  }\n\n  /**\n   * Blocks controller from making network calls\n   */\n  disable(): void {\n    this.#disabled = true;\n  }\n\n  /**\n   * Start (or restart) polling.\n   */\n  async start() {\n    this.#stopPoll();\n    this.#pollState = PollState.Active;\n    await this.#poll();\n  }\n\n  /**\n   * Stop polling.\n   */\n  stop() {\n    this.#stopPoll();\n    this.#pollState = PollState.Inactive;\n  }\n\n  #getSelectedAccount(): InternalAccount {\n    const selectedAccount = this.messagingSystem.call(\n      'AccountsController:getSelectedAccount',\n    );\n\n    return selectedAccount;\n  }\n\n  #getChainIdAndTicker(): {\n    chainId: Hex;\n    ticker: string;\n  } {\n    const { selectedNetworkClientId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n    const networkClient = this.messagingSystem.call(\n      'NetworkController:getNetworkClientById',\n      selectedNetworkClientId,\n    );\n    return {\n      chainId: networkClient.configuration.chainId,\n      ticker: networkClient.configuration.ticker,\n    };\n  }\n\n  #getTokensControllerState(): {\n    allTokens: TokensControllerState['allTokens'];\n    allDetectedTokens: TokensControllerState['allDetectedTokens'];\n  } {\n    const { allTokens, allDetectedTokens } = this.messagingSystem.call(\n      'TokensController:getState',\n    );\n\n    return {\n      allTokens,\n      allDetectedTokens,\n    };\n  }\n\n  /**\n   * Clear the active polling timer, if present.\n   */\n  #stopPoll() {\n    if (this.#handle) {\n      clearTimeout(this.#handle);\n    }\n  }\n\n  /**\n   * Poll for exchange rate updates.\n   */\n  async #poll() {\n    await safelyExecute(() => this.updateExchangeRates());\n\n    // Poll using recursive `setTimeout` instead of `setInterval` so that\n    // requests don't stack if they take longer than the polling interval\n    this.#handle = setTimeout(() => {\n      // TODO: Either fix this lint violation or explain why it's necessary to ignore.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.#poll();\n    }, this.#interval);\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   */\n  async updateExchangeRates() {\n    await this.updateExchangeRatesByChainId({\n      chainId: this.#chainId,\n      nativeCurrency: this.#ticker,\n    });\n  }\n\n  /**\n   * Updates exchange rates for all tokens.\n   *\n   * @param options - The options to fetch exchange rates.\n   * @param options.chainId - The chain ID.\n   * @param options.nativeCurrency - The ticker for the chain.\n   */\n  async updateExchangeRatesByChainId({\n    chainId,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    nativeCurrency: string;\n  }) {\n    if (this.#disabled) {\n      return;\n    }\n\n    const tokenAddresses = this.#getTokenAddresses(chainId);\n\n    const updateKey: `${Hex}:${string}` = `${chainId}:${nativeCurrency}`;\n    if (updateKey in this.#inProcessExchangeRateUpdates) {\n      // This prevents redundant updates\n      // This promise is resolved after the in-progress update has finished,\n      // and state has been updated.\n      await this.#inProcessExchangeRateUpdates[updateKey];\n      return;\n    }\n\n    const {\n      promise: inProgressUpdate,\n      resolve: updateSucceeded,\n      reject: updateFailed,\n    } = createDeferredPromise({ suppressUnhandledRejection: true });\n    this.#inProcessExchangeRateUpdates[updateKey] = inProgressUpdate;\n\n    try {\n      const contractInformations = await this.#fetchAndMapExchangeRates({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n\n      const marketData = {\n        [chainId]: {\n          ...(contractInformations ?? {}),\n        },\n      };\n\n      this.update((state) => {\n        state.marketData = {\n          ...state.marketData,\n          ...marketData,\n        };\n      });\n      updateSucceeded();\n    } catch (error: unknown) {\n      updateFailed(error);\n      throw error;\n    } finally {\n      delete this.#inProcessExchangeRateUpdates[updateKey];\n    }\n  }\n\n  /**\n   * Uses the token prices service to retrieve exchange rates for tokens in a\n   * particular currency.\n   *\n   * If the price API does not support the given chain ID, returns an empty\n   * object.\n   *\n   * If the price API does not support the given currency, retrieves exchange\n   * rates in a known currency instead, then converts those rates using the\n   * exchange rate between the known currency and desired currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * exchange rates.\n   * @returns A map from token address to its exchange rate in the native\n   * currency, or an empty map if no exchange rates can be obtained for the\n   * chain ID.\n   */\n  async #fetchAndMapExchangeRates({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    if (!this.#tokenPricesService.validateChainIdSupported(chainId)) {\n      return tokenAddresses.reduce((obj, tokenAddress) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: undefined,\n        };\n\n        return obj;\n      }, {});\n    }\n\n    if (this.#tokenPricesService.validateCurrencySupported(nativeCurrency)) {\n      return await this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency,\n      });\n    }\n\n    return await this.#fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n      chainId,\n      tokenAddresses,\n      nativeCurrency,\n    });\n  }\n\n  /**\n   * Updates token rates for the given networkClientId\n   *\n   * @param input - The input for the poll.\n   * @param input.chainId - The chain id to poll token rates on.\n   */\n  async _executePoll({ chainId }: TokenRatesPollingInput): Promise<void> {\n    const { networkConfigurationsByChainId } = this.messagingSystem.call(\n      'NetworkController:getState',\n    );\n\n    const networkConfiguration = networkConfigurationsByChainId[chainId];\n    if (!networkConfiguration) {\n      console.error(\n        `TokenRatesController: No network configuration found for chainId ${chainId}`,\n      );\n      return;\n    }\n\n    await this.updateExchangeRatesByChainId({\n      chainId,\n      nativeCurrency: networkConfiguration.nativeCurrency,\n    });\n  }\n\n  /**\n   * Retrieves prices in the given currency for the given tokens on the given\n   * chain. Ensures that token addresses are checksum addresses.\n   *\n   * @param args - The arguments to this function.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.chainId - The EIP-155 ID of the chain where the tokens live.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForSupportedNativeCurrency({\n    tokenAddresses,\n    chainId,\n    nativeCurrency,\n  }: {\n    tokenAddresses: Hex[];\n    chainId: Hex;\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    let contractNativeInformations;\n    const tokenPricesByTokenAddress = await reduceInBatchesSerially<\n      Hex,\n      Awaited<ReturnType<AbstractTokenPricesService['fetchTokenPrices']>>\n    >({\n      values: [...tokenAddresses].sort(),\n      batchSize: TOKEN_PRICES_BATCH_SIZE,\n      eachBatch: async (allTokenPricesByTokenAddress, batch) => {\n        const tokenPricesByTokenAddressForBatch =\n          await this.#tokenPricesService.fetchTokenPrices({\n            tokenAddresses: batch,\n            chainId,\n            currency: nativeCurrency,\n          });\n\n        return {\n          ...allTokenPricesByTokenAddress,\n          ...tokenPricesByTokenAddressForBatch,\n        };\n      },\n      initialResult: {},\n    });\n    contractNativeInformations = tokenPricesByTokenAddress;\n\n    // fetch for native token\n    if (tokenAddresses.length === 0) {\n      const contractNativeInformationsNative =\n        await this.#tokenPricesService.fetchTokenPrices({\n          tokenAddresses: [],\n          chainId,\n          currency: nativeCurrency,\n        });\n\n      contractNativeInformations = {\n        [ZERO_ADDRESS]: {\n          currency: nativeCurrency,\n          ...contractNativeInformationsNative[ZERO_ADDRESS],\n        },\n      };\n    }\n    return Object.entries(contractNativeInformations).reduce(\n      (obj, [tokenAddress, token]) => {\n        obj = {\n          ...obj,\n          [tokenAddress]: { ...token },\n        };\n\n        return obj;\n      },\n      {},\n    );\n  }\n\n  /**\n   * If the price API does not support a given native currency, then we need to\n   * convert it to a fallback currency and feed that currency into the price\n   * API, then convert the prices to our desired native currency.\n   *\n   * @param args - The arguments to this function.\n   * @param args.chainId - The chain id to fetch prices for.\n   * @param args.tokenAddresses - Addresses for tokens.\n   * @param args.nativeCurrency - The native currency in which to request\n   * prices.\n   * @returns A map of the token addresses (as checksums) to their prices in the\n   * native currency.\n   */\n  async #fetchAndMapExchangeRatesForUnsupportedNativeCurrency({\n    chainId,\n    tokenAddresses,\n    nativeCurrency,\n  }: {\n    chainId: Hex;\n    tokenAddresses: Hex[];\n    nativeCurrency: string;\n  }): Promise<ContractMarketData> {\n    const [\n      contractExchangeInformations,\n      fallbackCurrencyToNativeCurrencyConversionRate,\n    ] = await Promise.all([\n      this.#fetchAndMapExchangeRatesForSupportedNativeCurrency({\n        tokenAddresses,\n        chainId,\n        nativeCurrency: FALL_BACK_VS_CURRENCY,\n      }),\n      getCurrencyConversionRate({\n        from: FALL_BACK_VS_CURRENCY,\n        to: nativeCurrency,\n      }),\n    ]);\n\n    if (fallbackCurrencyToNativeCurrencyConversionRate === null) {\n      return {};\n    }\n\n    // Converts the price in the fallback currency to the native currency\n    const convertFallbackToNative = (value: number | undefined) =>\n      value !== undefined && value !== null\n        ? value * fallbackCurrencyToNativeCurrencyConversionRate\n        : undefined;\n\n    const updatedContractExchangeRates = Object.entries(\n      contractExchangeInformations,\n    ).reduce((acc, [tokenAddress, token]) => {\n      acc = {\n        ...acc,\n        [tokenAddress]: {\n          ...token,\n          currency: nativeCurrency,\n          price: convertFallbackToNative(token.price),\n          marketCap: convertFallbackToNative(token.marketCap),\n          allTimeHigh: convertFallbackToNative(token.allTimeHigh),\n          allTimeLow: convertFallbackToNative(token.allTimeLow),\n          totalVolume: convertFallbackToNative(token.totalVolume),\n          high1d: convertFallbackToNative(token.high1d),\n          low1d: convertFallbackToNative(token.low1d),\n          dilutedMarketCap: convertFallbackToNative(token.dilutedMarketCap),\n        },\n      };\n      return acc;\n    }, {});\n\n    return updatedContractExchangeRates;\n  }\n\n  /**\n   * Reset the controller state to the default state.\n   */\n  resetState() {\n    this.update(() => {\n      return getDefaultTokenRatesControllerState();\n    });\n  }\n}\n\nexport default TokenRatesController;\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
index 742de5b..651d1dd 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.cjs
@@ -109,6 +109,19 @@ class TokensController extends base_controller_1.BaseController {
             }
         });
     }
+
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+     */
+    reset() {
+        this.update((state) => {
+        state.allTokens = {};
+        state.allIgnoredTokens = {};
+        state.ignoredTokens = [];
+        state.tokens = [];
+        });
+    }
     /**
      * Adds a token to the stored token list.
      *
diff --git a/node_modules/@metamask/assets-controllers/dist/TokensController.d.cts b/node_modules/@metamask/assets-controllers/dist/TokensController.d.cts
index 3fbbc66..4f99591 100644
--- a/node_modules/@metamask/assets-controllers/dist/TokensController.d.cts
+++ b/node_modules/@metamask/assets-controllers/dist/TokensController.d.cts
@@ -160,6 +160,11 @@ export declare class TokensController extends BaseController<typeof controllerNa
      * Removes all tokens from the ignored list.
      */
     clearIgnoredTokens(): void;
+    /**
+     * THIS FUNCTIONS IS CURRENTLY PATCHED AND STILL NEEDS TO BE IMPLEMENTED ON THE CORE REPO
+     * Resets to the default state
+    */
+    reset(): void;
 }
 export default TokensController;
 //# sourceMappingURL=TokensController.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.cjs b/node_modules/@metamask/assets-controllers/dist/multicall.cjs
new file mode 100644
index 0000000..3350cc9
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.cjs
@@ -0,0 +1,350 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.multicallOrFallback = void 0;
+const contracts_1 = require("@ethersproject/contracts");
+const assetsUtil_1 = require("./assetsUtil.cjs");
+// https://github.com/mds1/multicall/blob/main/deployments.json
+const MULTICALL_CONTRACT_BY_CHAINID = {
+    '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x53': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x52': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',
+    '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x405': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x406': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x659': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',
+};
+const multicallAbi = [
+    {
+        name: 'tryAggregate',
+        type: 'function',
+        stateMutability: 'payable',
+        inputs: [
+            { name: 'requireSuccess', type: 'bool' },
+            {
+                name: 'calls',
+                type: 'tuple[]',
+                components: [
+                    { name: 'target', type: 'address' },
+                    { name: 'callData', type: 'bytes' },
+                ],
+            },
+        ],
+        outputs: [
+            {
+                name: 'returnData',
+                type: 'tuple[]',
+                components: [
+                    { name: 'success', type: 'bool' },
+                    { name: 'returnData', type: 'bytes' },
+                ],
+            },
+        ],
+    },
+];
+const multicall = async (calls, multicallAddress, provider, maxCallsPerMulticall) => {
+    const multicallContract = new contracts_1.Contract(multicallAddress, multicallAbi, provider);
+    return await (0, assetsUtil_1.reduceInBatchesSerially)({
+        values: calls,
+        batchSize: maxCallsPerMulticall,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const calldata = batch.map((call) => ({
+                target: call.contract.address,
+                callData: call.contract.interface.encodeFunctionData(call.contract.interface.functions[call.functionSignature], call.arguments),
+            }));
+            const results = await multicallContract.callStatic.tryAggregate(false, calldata);
+            return [
+                ...workingResult,
+                ...results.map((r, i) => ({
+                    success: r.success,
+                    value: r.success
+                        ? batch[i].contract.interface.decodeFunctionResult(batch[i].functionSignature, r.returnData)[0]
+                        : undefined,
+                })),
+            ];
+        },
+    });
+};
+const fallback = async (calls, maxCallsParallel) => {
+    return await (0, assetsUtil_1.reduceInBatchesSerially)({
+        values: calls,
+        batchSize: maxCallsParallel,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const results = await Promise.allSettled(batch.map((call) => call.contract[call.functionSignature](...call.arguments)));
+            return [
+                ...workingResult,
+                ...results.map((p) => ({
+                    success: p.status === 'fulfilled',
+                    value: p.status === 'fulfilled' ? p.value : undefined,
+                })),
+            ];
+        },
+    });
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+const multicallOrFallback = async (calls, chainId, provider, maxCallsPerMulticall = 1000, maxCallsParallel = 20) => {
+    if (calls.length === 0) {
+        return [];
+    }
+    const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];
+    return await (multicallAddress
+        ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)
+        : fallback(calls, maxCallsParallel));
+};
+exports.multicallOrFallback = multicallOrFallback;
+//# sourceMappingURL=multicall.cjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map b/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map
new file mode 100644
index 0000000..6ca242d
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.cjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.cjs","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":";;;AAAA,wDAAoD;AAIpD,iDAAuD;AAEvD,+DAA+D;AAC/D,MAAM,6BAA6B,GAAG;IACpC,KAAK,EAAE,4CAA4C;IACnD,MAAM,EAAE,4CAA4C;IACpD,KAAK,EAAE,4CAA4C;IACnD,KAAK,EAAE,4CAA4C;IACnD,KAAK,EAAE,4CAA4C;IACnD,UAAU,EAAE,4CAA4C;IACxD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,SAAS,EAAE,4CAA4C;IACvD,UAAU,EAAE,4CAA4C;IACxD,KAAK,EAAE,4CAA4C;IACnD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,UAAU,EAAE,4CAA4C;IACxD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,WAAW,EAAE,4CAA4C;IACzD,MAAM,EAAE,4CAA4C;IACpD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,aAAa,EAAE,4CAA4C;IAC3D,aAAa,EAAE,4CAA4C;IAC3D,YAAY,EAAE,4CAA4C;IAC1D,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,WAAW,EAAE,4CAA4C;IACzD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,KAAK,EAAE,4CAA4C;IACnD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,YAAY,EAAE,4CAA4C;IAC1D,OAAO,EAAE,4CAA4C;IACrD,UAAU,EAAE,4CAA4C;IACxD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,WAAW,EAAE,4CAA4C;IACzD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,UAAU,EAAE,4CAA4C;IACxD,YAAY,EAAE,4CAA4C;IAC1D,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,YAAY,EAAE,4CAA4C;IAC1D,YAAY,EAAE,4CAA4C;IAC1D,WAAW,EAAE,4CAA4C;IACzD,YAAY,EAAE,4CAA4C;IAC1D,YAAY,EAAE,4CAA4C;IAC1D,YAAY,EAAE,4CAA4C;IAC1D,YAAY,EAAE,4CAA4C;IAC1D,YAAY,EAAE,4CAA4C;IAC1D,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,WAAW,EAAE,4CAA4C;IACzD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,aAAa,EAAE,4CAA4C;IAC3D,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,MAAM,EAAE,4CAA4C;IACpD,WAAW,EAAE,4CAA4C;IACzD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,SAAS,EAAE,4CAA4C;IACvD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,WAAW,EAAE,4CAA4C;IACzD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,UAAU,EAAE,4CAA4C;IACxD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,UAAU,EAAE,4CAA4C;IACxD,OAAO,EAAE,4CAA4C;IACrD,SAAS,EAAE,4CAA4C;IACvD,MAAM,EAAE,4CAA4C;IACpD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,WAAW,EAAE,4CAA4C;IACzD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,SAAS,EAAE,4CAA4C;IACvD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,WAAW,EAAE,4CAA4C;IACzD,QAAQ,EAAE,4CAA4C;IACtD,SAAS,EAAE,4CAA4C;IACvD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,aAAa,EAAE,4CAA4C;IAC3D,QAAQ,EAAE,4CAA4C;IACtD,QAAQ,EAAE,4CAA4C;IACtD,OAAO,EAAE,4CAA4C;IACrD,WAAW,EAAE,4CAA4C;IACzD,cAAc,EAAE,4CAA4C;IAC5D,UAAU,EAAE,4CAA4C;IACxD,SAAS,EAAE,4CAA4C;IACvD,QAAQ,EAAE,4CAA4C;IACtD,MAAM,EAAE,4CAA4C;IACpD,MAAM,EAAE,4CAA4C;IACpD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;IACrD,OAAO,EAAE,4CAA4C;CAClC,CAAC;AAEtB,MAAM,YAAY,GAAG;IACnB;QACE,IAAI,EAAE,cAAc;QACpB,IAAI,EAAE,UAAU;QAChB,eAAe,EAAE,SAAS;QAC1B,MAAM,EAAE;YACN,EAAE,IAAI,EAAE,gBAAgB,EAAE,IAAI,EAAE,MAAM,EAAE;YACxC;gBACE,IAAI,EAAE,OAAO;gBACb,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE;oBACnC,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,OAAO,EAAE;iBACpC;aACF;SACF;QACD,OAAO,EAAE;YACP;gBACE,IAAI,EAAE,YAAY;gBAClB,IAAI,EAAE,SAAS;gBACf,UAAU,EAAE;oBACV,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE;oBACjC,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE;iBACtC;aACF;SACF;KACF;CACF,CAAC;AAUF,MAAM,SAAS,GAAG,KAAK,EACrB,KAAa,EACb,gBAAqB,EACrB,QAAsB,EACtB,oBAA4B,EACT,EAAE;IACrB,MAAM,iBAAiB,GAAG,IAAI,oBAAQ,CACpC,gBAAgB,EAChB,YAAY,EACZ,QAAQ,CACT,CAAC;IAEF,OAAO,MAAM,IAAA,oCAAuB,EAAiB;QACnD,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,oBAAoB;QAC/B,aAAa,EAAE,EAAE;QACjB,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE;YACxC,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;gBACpC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,OAAO;gBAC7B,QAAQ,EAAE,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,kBAAkB,CAClD,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,SAAS,CAAC,IAAI,CAAC,iBAAiB,CAAC,EACzD,IAAI,CAAC,SAAS,CACf;aACF,CAAC,CAAC,CAAC;YAEJ,MAAM,OAAO,GAAG,MAAM,iBAAiB,CAAC,UAAU,CAAC,YAAY,CAC7D,KAAK,EACL,QAAQ,CACT,CAAC;YAEF,OAAO;gBACL,GAAG,aAAa;gBAChB,GAAG,OAAO,CAAC,GAAG,CACZ,CAAC,CAA2C,EAAE,CAAS,EAAE,EAAE,CAAC,CAAC;oBAC3D,OAAO,EAAE,CAAC,CAAC,OAAO;oBAClB,KAAK,EAAE,CAAC,CAAC,OAAO;wBACd,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,oBAAoB,CAC9C,KAAK,CAAC,CAAC,CAAC,CAAC,iBAAiB,EAC1B,CAAC,CAAC,UAAU,CACb,CAAC,CAAC,CAAC;wBACN,CAAC,CAAC,SAAS;iBACd,CAAC,CACH;aACF,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,KAAK,EACpB,KAAa,EACb,gBAAwB,EACL,EAAE;IACrB,OAAO,MAAM,IAAA,oCAAuB,EAAiB;QACnD,MAAM,EAAE,KAAK;QACb,SAAS,EAAE,gBAAgB;QAC3B,aAAa,EAAE,EAAE;QACjB,SAAS,EAAE,KAAK,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE;YACxC,MAAM,OAAO,GAAG,MAAM,OAAO,CAAC,UAAU,CACtC,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CACjB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,GAAG,IAAI,CAAC,SAAS,CAAC,CACzD,CACF,CAAC;YACF,OAAO;gBACL,GAAG,aAAa;gBAChB,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;oBACrB,OAAO,EAAE,CAAC,CAAC,MAAM,KAAK,WAAW;oBACjC,KAAK,EAAE,CAAC,CAAC,MAAM,KAAK,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;iBACtD,CAAC,CAAC;aACJ,CAAC;QACJ,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;;;;;;;;;GAUG;AACI,MAAM,mBAAmB,GAAG,KAAK,EACtC,KAAa,EACb,OAAY,EACZ,QAAsB,EACtB,oBAAoB,GAAG,IAAI,EAC3B,gBAAgB,GAAG,EAAE,EACF,EAAE;IACrB,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACtB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,gBAAgB,GAAG,6BAA6B,CAAC,OAAO,CAAC,CAAC;IAChE,OAAO,MAAM,CAAC,gBAAgB;QAC5B,CAAC,CAAC,SAAS,CAAC,KAAK,EAAE,gBAAgB,EAAE,QAAQ,EAAE,oBAAoB,CAAC;QACpE,CAAC,CAAC,QAAQ,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC,CAAC;AACzC,CAAC,CAAC;AAfW,QAAA,mBAAmB,uBAe9B","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport type { Hex } from '@metamask/utils';\n\nimport { reduceInBatchesSerially } from './assetsUtil';\n\n// https://github.com/mds1/multicall/blob/main/deployments.json\nconst MULTICALL_CONTRACT_BY_CHAINID = {\n  '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x53': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x52': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',\n  '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x405': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x406': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x659': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',\n} as Record<Hex, Hex>;\n\nconst multicallAbi = [\n  {\n    name: 'tryAggregate',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'requireSuccess', type: 'bool' },\n      {\n        name: 'calls',\n        type: 'tuple[]',\n        components: [\n          { name: 'target', type: 'address' },\n          { name: 'callData', type: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'returnData',\n        type: 'tuple[]',\n        components: [\n          { name: 'success', type: 'bool' },\n          { name: 'returnData', type: 'bytes' },\n        ],\n      },\n    ],\n  },\n];\n\ntype Call = {\n  contract: Contract;\n  functionSignature: string;\n  arguments: unknown[];\n};\n\ntype Result = { success: boolean; value: unknown };\n\nconst multicall = async (\n  calls: Call[],\n  multicallAddress: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall: number,\n): Promise<Result[]> => {\n  const multicallContract = new Contract(\n    multicallAddress,\n    multicallAbi,\n    provider,\n  );\n\n  return await reduceInBatchesSerially<Call, Result[]>({\n    values: calls,\n    batchSize: maxCallsPerMulticall,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const calldata = batch.map((call) => ({\n        target: call.contract.address,\n        callData: call.contract.interface.encodeFunctionData(\n          call.contract.interface.functions[call.functionSignature],\n          call.arguments,\n        ),\n      }));\n\n      const results = await multicallContract.callStatic.tryAggregate(\n        false,\n        calldata,\n      );\n\n      return [\n        ...workingResult,\n        ...results.map(\n          (r: { success: boolean; returnData: string }, i: number) => ({\n            success: r.success,\n            value: r.success\n              ? batch[i].contract.interface.decodeFunctionResult(\n                  batch[i].functionSignature,\n                  r.returnData,\n                )[0]\n              : undefined,\n          }),\n        ),\n      ];\n    },\n  });\n};\n\nconst fallback = async (\n  calls: Call[],\n  maxCallsParallel: number,\n): Promise<Result[]> => {\n  return await reduceInBatchesSerially<Call, Result[]>({\n    values: calls,\n    batchSize: maxCallsParallel,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const results = await Promise.allSettled(\n        batch.map((call) =>\n          call.contract[call.functionSignature](...call.arguments),\n        ),\n      );\n      return [\n        ...workingResult,\n        ...results.map((p) => ({\n          success: p.status === 'fulfilled',\n          value: p.status === 'fulfilled' ? p.value : undefined,\n        })),\n      ];\n    },\n  });\n};\n\n/**\n * Executes an array of contract calls. If the chain supports multicalls,\n * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).\n * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).\n * @param calls - An array of contract calls to execute.\n * @param chainId - The hexadecimal chain id.\n * @param provider - An ethers rpc provider.\n * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.\n * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.\n * @returns An array of results, with a success boolean and value for each call.\n */\nexport const multicallOrFallback = async (\n  calls: Call[],\n  chainId: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall = 1000,\n  maxCallsParallel = 20,\n): Promise<Result[]> => {\n  if (calls.length === 0) {\n    return [];\n  }\n\n  const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];\n  return await (multicallAddress\n    ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)\n    : fallback(calls, maxCallsParallel));\n};\n"]}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.cts b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts
new file mode 100644
index 0000000..5b57403
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts
@@ -0,0 +1,26 @@
+import { Contract } from "@ethersproject/contracts";
+import type { Web3Provider } from "@ethersproject/providers";
+import type { Hex } from "@metamask/utils";
+type Call = {
+    contract: Contract;
+    functionSignature: string;
+    arguments: unknown[];
+};
+type Result = {
+    success: boolean;
+    value: unknown;
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export declare const multicallOrFallback: (calls: Call[], chainId: Hex, provider: Web3Provider, maxCallsPerMulticall?: number, maxCallsParallel?: number) => Promise<Result[]>;
+export {};
+//# sourceMappingURL=multicall.d.cts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map
new file mode 100644
index 0000000..41d2cbd
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.cts.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.d.cts","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,KAAK,EAAE,YAAY,EAAE,iCAAiC;AAC7D,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAgS3C,KAAK,IAAI,GAAG;IACV,QAAQ,EAAE,QAAQ,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,SAAS,EAAE,OAAO,EAAE,CAAC;CACtB,CAAC;AAEF,KAAK,MAAM,GAAG;IAAE,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,EAAE,OAAO,CAAA;CAAE,CAAC;AA2EnD;;;;;;;;;;GAUG;AACH,eAAO,MAAM,mBAAmB,UACvB,IAAI,EAAE,WACJ,GAAG,YACF,YAAY,+DAGrB,QAAQ,MAAM,EAAE,CASlB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.mts b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts
new file mode 100644
index 0000000..8deab66
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts
@@ -0,0 +1,26 @@
+import { Contract } from "@ethersproject/contracts";
+import type { Web3Provider } from "@ethersproject/providers";
+import type { Hex } from "@metamask/utils";
+type Call = {
+    contract: Contract;
+    functionSignature: string;
+    arguments: unknown[];
+};
+type Result = {
+    success: boolean;
+    value: unknown;
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export declare const multicallOrFallback: (calls: Call[], chainId: Hex, provider: Web3Provider, maxCallsPerMulticall?: number, maxCallsParallel?: number) => Promise<Result[]>;
+export {};
+//# sourceMappingURL=multicall.d.mts.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map
new file mode 100644
index 0000000..d774e40
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.d.mts.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.d.mts","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,iCAAiC;AACpD,OAAO,KAAK,EAAE,YAAY,EAAE,iCAAiC;AAC7D,OAAO,KAAK,EAAE,GAAG,EAAE,wBAAwB;AAgS3C,KAAK,IAAI,GAAG;IACV,QAAQ,EAAE,QAAQ,CAAC;IACnB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,SAAS,EAAE,OAAO,EAAE,CAAC;CACtB,CAAC;AAEF,KAAK,MAAM,GAAG;IAAE,OAAO,EAAE,OAAO,CAAC;IAAC,KAAK,EAAE,OAAO,CAAA;CAAE,CAAC;AA2EnD;;;;;;;;;;GAUG;AACH,eAAO,MAAM,mBAAmB,UACvB,IAAI,EAAE,WACJ,GAAG,YACF,YAAY,+DAGrB,QAAQ,MAAM,EAAE,CASlB,CAAC"}
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.mjs b/node_modules/@metamask/assets-controllers/dist/multicall.mjs
new file mode 100644
index 0000000..336f244
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.mjs
@@ -0,0 +1,346 @@
+import { Contract } from "@ethersproject/contracts";
+import { reduceInBatchesSerially } from "./assetsUtil.mjs";
+// https://github.com/mds1/multicall/blob/main/deployments.json
+const MULTICALL_CONTRACT_BY_CHAINID = {
+    '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x53': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x52': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',
+    '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x405': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',
+    '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x406': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x659': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x59': '0xca11bde05977b3631167028862be2a173976ca11',
+    '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',
+    '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',
+};
+const multicallAbi = [
+    {
+        name: 'tryAggregate',
+        type: 'function',
+        stateMutability: 'payable',
+        inputs: [
+            { name: 'requireSuccess', type: 'bool' },
+            {
+                name: 'calls',
+                type: 'tuple[]',
+                components: [
+                    { name: 'target', type: 'address' },
+                    { name: 'callData', type: 'bytes' },
+                ],
+            },
+        ],
+        outputs: [
+            {
+                name: 'returnData',
+                type: 'tuple[]',
+                components: [
+                    { name: 'success', type: 'bool' },
+                    { name: 'returnData', type: 'bytes' },
+                ],
+            },
+        ],
+    },
+];
+const multicall = async (calls, multicallAddress, provider, maxCallsPerMulticall) => {
+    const multicallContract = new Contract(multicallAddress, multicallAbi, provider);
+    return await reduceInBatchesSerially({
+        values: calls,
+        batchSize: maxCallsPerMulticall,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const calldata = batch.map((call) => ({
+                target: call.contract.address,
+                callData: call.contract.interface.encodeFunctionData(call.contract.interface.functions[call.functionSignature], call.arguments),
+            }));
+            const results = await multicallContract.callStatic.tryAggregate(false, calldata);
+            return [
+                ...workingResult,
+                ...results.map((r, i) => ({
+                    success: r.success,
+                    value: r.success
+                        ? batch[i].contract.interface.decodeFunctionResult(batch[i].functionSignature, r.returnData)[0]
+                        : undefined,
+                })),
+            ];
+        },
+    });
+};
+const fallback = async (calls, maxCallsParallel) => {
+    return await reduceInBatchesSerially({
+        values: calls,
+        batchSize: maxCallsParallel,
+        initialResult: [],
+        eachBatch: async (workingResult, batch) => {
+            const results = await Promise.allSettled(batch.map((call) => call.contract[call.functionSignature](...call.arguments)));
+            return [
+                ...workingResult,
+                ...results.map((p) => ({
+                    success: p.status === 'fulfilled',
+                    value: p.status === 'fulfilled' ? p.value : undefined,
+                })),
+            ];
+        },
+    });
+};
+/**
+ * Executes an array of contract calls. If the chain supports multicalls,
+ * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).
+ * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).
+ * @param calls - An array of contract calls to execute.
+ * @param chainId - The hexadecimal chain id.
+ * @param provider - An ethers rpc provider.
+ * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.
+ * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.
+ * @returns An array of results, with a success boolean and value for each call.
+ */
+export const multicallOrFallback = async (calls, chainId, provider, maxCallsPerMulticall = 1000, maxCallsParallel = 20) => {
+    if (calls.length === 0) {
+        return [];
+    }
+    const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];
+    return await (multicallAddress
+        ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)
+        : fallback(calls, maxCallsParallel));
+};
+//# sourceMappingURL=multicall.mjs.map
\ No newline at end of file
diff --git a/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map b/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map
new file mode 100644
index 0000000..e08f479
--- /dev/null
+++ b/node_modules/@metamask/assets-controllers/dist/multicall.mjs.map
@@ -0,0 +1 @@
+{"version":3,"file":"multicall.mjs","sourceRoot":"","sources":["../src/multicall.ts"],"names":[],"mappings":"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","sourcesContent":["import { Contract } from '@ethersproject/contracts';\nimport type { Web3Provider } from '@ethersproject/providers';\nimport type { Hex } from '@metamask/utils';\n\nimport { reduceInBatchesSerially } from './assetsUtil';\n\n// https://github.com/mds1/multicall/blob/main/deployments.json\nconst MULTICALL_CONTRACT_BY_CHAINID = {\n  '0x1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa36a7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4268': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b6e6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18fc4a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaa37dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ba': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eee': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x66eeb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15f2249': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x89': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13881': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13882': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x44d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x5a2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x98a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x64': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x27d8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa86a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa869': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfa': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfaf0': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xcc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x504': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x505': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2a15c308d': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2a15c3083': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x63564c40': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x19': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5535072': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x10': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x120': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4e454152': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x250': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5c2359': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xec0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x42': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x80': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x440': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x257': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9fe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd3a0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x84444': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2329': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2328': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x12': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa516': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5afe': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa4ec': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xaef3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116ea': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x116e9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2019': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e9': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x7d1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x141': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4d2': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1e15': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1251': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7f08': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8ae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1389': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1388': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f92': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14a33': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x14a34': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2105': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x936': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x46b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x14f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd2af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0ce': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe705': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe704': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe708': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2b6f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x39': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x23a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1644': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdea8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3af': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x171': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3e7': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x76adf1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3b9ac9ff': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2e': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x15b3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x82751': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8274f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x82750': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x96f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cc5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4571': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe99': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7d0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1297': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1d5e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3a14269b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x561bf78b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x235ddd0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3cd156dc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5d456c62': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x79f99296': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x585eb4b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x507aaa2a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1fc3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x32d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a73': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a72': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x8a71': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xe9ac0d6': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1069': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7e5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x53': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x52': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xe298': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x94': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2c6': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2803': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2802': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c5f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c60': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13a': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4cb2f': '0xdbfa261cd7d17bb40479a0493ad6c0fee435859e',\n  '0x7f93': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb660': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xb02113d3f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdad': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xdae': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b38': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15b32': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45c': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x45b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x41a6ace': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa729': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f47b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1b58': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc3': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x16fd8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc7': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x405': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x334': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1ce': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1cf': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0xa70e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x868b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa0c71fd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13e31': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa1337': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xf63': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x144': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x118': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x12c': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x18995f': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0x2b74': '0xF9cda624FBC7e059355ce98a31693d299FACd963',\n  '0xfc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x9da': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x137': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x13ed': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x24b1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xba9302': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x7c8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x138d5': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6d': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x343b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x34a1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x3109': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x91b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa96': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x22c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2be3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xbf03': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b254': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa7b14': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2276': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1b9e': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x6a63bb8': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x15af1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xae3f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x531': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c61': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x28c58': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1d88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x5b9b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4c7e1': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xa53b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1a2b': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x406': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x2cef': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x18b2': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x182a9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xc4': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfdd': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xfde': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x99c0a0f': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x22cf': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x310c5': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x46f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x659': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x139c968f9': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xed88': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0xd036': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1f3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x31bf8c3': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x1cbc67bfdc': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x98967f': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x4f588': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x16db': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x3a': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x59': '0xca11bde05977b3631167028862be2a173976ca11',\n  '0x1e0': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x2eb': '0xcA11bde05977b3631167028862bE2a173976CA11',\n  '0x221': '0xcA11bde05977b3631167028862bE2a173976CA11',\n} as Record<Hex, Hex>;\n\nconst multicallAbi = [\n  {\n    name: 'tryAggregate',\n    type: 'function',\n    stateMutability: 'payable',\n    inputs: [\n      { name: 'requireSuccess', type: 'bool' },\n      {\n        name: 'calls',\n        type: 'tuple[]',\n        components: [\n          { name: 'target', type: 'address' },\n          { name: 'callData', type: 'bytes' },\n        ],\n      },\n    ],\n    outputs: [\n      {\n        name: 'returnData',\n        type: 'tuple[]',\n        components: [\n          { name: 'success', type: 'bool' },\n          { name: 'returnData', type: 'bytes' },\n        ],\n      },\n    ],\n  },\n];\n\ntype Call = {\n  contract: Contract;\n  functionSignature: string;\n  arguments: unknown[];\n};\n\ntype Result = { success: boolean; value: unknown };\n\nconst multicall = async (\n  calls: Call[],\n  multicallAddress: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall: number,\n): Promise<Result[]> => {\n  const multicallContract = new Contract(\n    multicallAddress,\n    multicallAbi,\n    provider,\n  );\n\n  return await reduceInBatchesSerially<Call, Result[]>({\n    values: calls,\n    batchSize: maxCallsPerMulticall,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const calldata = batch.map((call) => ({\n        target: call.contract.address,\n        callData: call.contract.interface.encodeFunctionData(\n          call.contract.interface.functions[call.functionSignature],\n          call.arguments,\n        ),\n      }));\n\n      const results = await multicallContract.callStatic.tryAggregate(\n        false,\n        calldata,\n      );\n\n      return [\n        ...workingResult,\n        ...results.map(\n          (r: { success: boolean; returnData: string }, i: number) => ({\n            success: r.success,\n            value: r.success\n              ? batch[i].contract.interface.decodeFunctionResult(\n                  batch[i].functionSignature,\n                  r.returnData,\n                )[0]\n              : undefined,\n          }),\n        ),\n      ];\n    },\n  });\n};\n\nconst fallback = async (\n  calls: Call[],\n  maxCallsParallel: number,\n): Promise<Result[]> => {\n  return await reduceInBatchesSerially<Call, Result[]>({\n    values: calls,\n    batchSize: maxCallsParallel,\n    initialResult: [],\n    eachBatch: async (workingResult, batch) => {\n      const results = await Promise.allSettled(\n        batch.map((call) =>\n          call.contract[call.functionSignature](...call.arguments),\n        ),\n      );\n      return [\n        ...workingResult,\n        ...results.map((p) => ({\n          success: p.status === 'fulfilled',\n          value: p.status === 'fulfilled' ? p.value : undefined,\n        })),\n      ];\n    },\n  });\n};\n\n/**\n * Executes an array of contract calls. If the chain supports multicalls,\n * the calls will be executed in single RPC requests (up to maxCallsPerMulticall).\n * Otherwise the calls will be executed separately in parallel (up to maxCallsParallel).\n * @param calls - An array of contract calls to execute.\n * @param chainId - The hexadecimal chain id.\n * @param provider - An ethers rpc provider.\n * @param maxCallsPerMulticall - If multicall is supported, the maximum number of calls to exeute in each multicall.\n * @param maxCallsParallel - If multicall is not supported, the maximum number of calls to execute in parallel.\n * @returns An array of results, with a success boolean and value for each call.\n */\nexport const multicallOrFallback = async (\n  calls: Call[],\n  chainId: Hex,\n  provider: Web3Provider,\n  maxCallsPerMulticall = 1000,\n  maxCallsParallel = 20,\n): Promise<Result[]> => {\n  if (calls.length === 0) {\n    return [];\n  }\n\n  const multicallAddress = MULTICALL_CONTRACT_BY_CHAINID[chainId];\n  return await (multicallAddress\n    ? multicall(calls, multicallAddress, provider, maxCallsPerMulticall)\n    : fallback(calls, maxCallsParallel));\n};\n"]}
\ No newline at end of file
