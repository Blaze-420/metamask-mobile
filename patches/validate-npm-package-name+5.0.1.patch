diff --git a/node_modules/validate-npm-package-name/lib/index.js b/node_modules/validate-npm-package-name/lib/index.js
index fd800d5..b720e63 100644
--- a/node_modules/validate-npm-package-name/lib/index.js
+++ b/node_modules/validate-npm-package-name/lib/index.js
@@ -1,105 +1,108 @@
-'use strict'
-const { builtinModules: builtins } = require('module')
-
-var scopedPackagePattern = new RegExp('^(?:@([^/]+?)[/])?([^/]+?)$')
-var blacklist = [
+'use strict';
+
+// Hardcoded list of Node.js core modules
+const builtins = [
+  'assert', 'buffer', 'child_process', 'cluster', 'crypto', 'dgram', 'dns',
+  'domain', 'events', 'fs', 'http', 'https', 'module', 'net', 'os', 'path',
+  'process', 'punycode', 'querystring', 'readline', 'repl', 'stream',
+  'string_decoder', 'timers', 'tls', 'tty', 'url', 'util', 'v8', 'vm',
+  'zlib',
+];
+
+const scopedPackagePattern = new RegExp('^(?:@([^/]+?)[/])?([^/]+?)$');
+const blacklist = [
   'node_modules',
   'favicon.ico',
-]
+];
 
-function validate (name) {
-  var warnings = []
-  var errors = []
+function validate(name) {
+  const warnings = [];
+  const errors = [];
 
   if (name === null) {
-    errors.push('name cannot be null')
-    return done(warnings, errors)
+    errors.push('name cannot be null');
+    return done(warnings, errors);
   }
 
   if (name === undefined) {
-    errors.push('name cannot be undefined')
-    return done(warnings, errors)
+    errors.push('name cannot be undefined');
+    return done(warnings, errors);
   }
 
   if (typeof name !== 'string') {
-    errors.push('name must be a string')
-    return done(warnings, errors)
+    errors.push('name must be a string');
+    return done(warnings, errors);
   }
 
   if (!name.length) {
-    errors.push('name length must be greater than zero')
+    errors.push('name length must be greater than zero');
   }
 
   if (name.match(/^\./)) {
-    errors.push('name cannot start with a period')
+    errors.push('name cannot start with a period');
   }
 
   if (name.match(/^_/)) {
-    errors.push('name cannot start with an underscore')
+    errors.push('name cannot start with an underscore');
   }
 
   if (name.trim() !== name) {
-    errors.push('name cannot contain leading or trailing spaces')
+    errors.push('name cannot contain leading or trailing spaces');
   }
 
   // No funny business
   blacklist.forEach(function (blacklistedName) {
     if (name.toLowerCase() === blacklistedName) {
-      errors.push(blacklistedName + ' is a blacklisted name')
+      errors.push(`${blacklistedName} is a blacklisted name`);
     }
-  })
+  });
 
   // Generate warnings for stuff that used to be allowed
 
-  // core module names like http, events, util, etc
+  // Core module names like http, events, util, etc
   if (builtins.includes(name.toLowerCase())) {
-    warnings.push(name + ' is a core module name')
+    warnings.push(`${name} is a core module name`);
   }
 
   if (name.length > 214) {
-    warnings.push('name can no longer contain more than 214 characters')
+    warnings.push('name can no longer contain more than 214 characters');
   }
 
-  // mIxeD CaSe nAMEs
+  // Mixed-case names
   if (name.toLowerCase() !== name) {
-    warnings.push('name can no longer contain capital letters')
+    warnings.push('name can no longer contain capital letters');
   }
 
   if (/[~'!()*]/.test(name.split('/').slice(-1)[0])) {
-    warnings.push('name can no longer contain special characters ("~\'!()*")')
+    warnings.push('name can no longer contain special characters ("~\'!()*")');
   }
 
   if (encodeURIComponent(name) !== name) {
     // Maybe it's a scoped package name, like @user/package
-    var nameMatch = name.match(scopedPackagePattern)
+    const nameMatch = name.match(scopedPackagePattern);
     if (nameMatch) {
-      var user = nameMatch[1]
-      var pkg = nameMatch[2]
+      const user = nameMatch[1];
+      const pkg = nameMatch[2];
       if (encodeURIComponent(user) === user && encodeURIComponent(pkg) === pkg) {
-        return done(warnings, errors)
+        return done(warnings, errors);
       }
     }
 
-    errors.push('name can only contain URL-friendly characters')
+    errors.push('name can only contain URL-friendly characters');
   }
 
-  return done(warnings, errors)
+  return done(warnings, errors);
 }
 
-var done = function (warnings, errors) {
-  var result = {
+function done(warnings, errors) {
+  const result = {
     validForNewPackages: errors.length === 0 && warnings.length === 0,
     validForOldPackages: errors.length === 0,
-    warnings: warnings,
-    errors: errors,
-  }
-  if (!result.warnings.length) {
-    delete result.warnings
-  }
-  if (!result.errors.length) {
-    delete result.errors
-  }
-  return result
+    warnings: warnings.length ? warnings : undefined,
+    errors: errors.length ? errors : undefined,
+  };
+
+  return result;
 }
 
-module.exports = validate
+module.exports = validate;
