// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TransactionsView renders correctly and matches snapshot 1`] = `
<View
  style={
    {
      "flex": 1,
    }
  }
>
  <RNCSafeAreaProvider
    onInsetsChange={[Function]}
    style={
      [
        {
          "flex": 1,
        },
        undefined,
      ]
    }
  >
    <View
      collapsable={false}
      pointerEvents="box-none"
      style={
        {
          "zIndex": 1,
        }
      }
    >
      <View
        accessibilityElementsHidden={false}
        importantForAccessibility="auto"
        onLayout={[Function]}
        pointerEvents="box-none"
        style={null}
      >
        <View
          collapsable={false}
          pointerEvents="box-none"
          style={
            {
              "bottom": 0,
              "left": 0,
              "opacity": 1,
              "position": "absolute",
              "right": 0,
              "top": 0,
              "zIndex": 0,
            }
          }
        >
          <View
            collapsable={false}
            style={
              {
                "backgroundColor": "rgb(255, 255, 255)",
                "borderBottomColor": "rgb(216, 216, 216)",
                "flex": 1,
                "shadowColor": "rgb(216, 216, 216)",
                "shadowOffset": {
                  "height": 0.5,
                  "width": 0,
                },
                "shadowOpacity": 0.85,
                "shadowRadius": 0,
              }
            }
          />
        </View>
        <View
          collapsable={false}
          pointerEvents="box-none"
          style={
            {
              "height": 64,
              "maxHeight": undefined,
              "minHeight": undefined,
              "opacity": undefined,
              "transform": undefined,
            }
          }
        >
          <View
            pointerEvents="none"
            style={
              {
                "height": 20,
              }
            }
          />
          <View
            pointerEvents="box-none"
            style={
              {
                "alignItems": "center",
                "flex": 1,
                "flexDirection": "row",
                "justifyContent": "center",
              }
            }
          >
            <View
              collapsable={false}
              pointerEvents="box-none"
              style={
                {
                  "marginHorizontal": 16,
                  "opacity": 1,
                }
              }
            >
              <Text
                accessibilityRole="header"
                aria-level="1"
                collapsable={false}
                numberOfLines={1}
                onLayout={[Function]}
                style={
                  {
                    "color": "rgb(28, 28, 30)",
                    "fontSize": 17,
                    "fontWeight": "600",
                  }
                }
              >
                TransactionsView
              </Text>
            </View>
          </View>
        </View>
      </View>
    </View>
    <RNSScreenContainer
      onLayout={[Function]}
      style={
        {
          "flex": 1,
        }
      }
    >
      <RNSScreen
        activityState={2}
        collapsable={false}
        gestureResponseDistance={
          {
            "bottom": -1,
            "end": -1,
            "start": -1,
            "top": -1,
          }
        }
        pointerEvents="box-none"
        style={
          {
            "bottom": 0,
            "left": 0,
            "position": "absolute",
            "right": 0,
            "top": 0,
          }
        }
      >
        <View
          collapsable={false}
          style={
            {
              "opacity": 1,
            }
          }
        />
        <View
          accessibilityElementsHidden={false}
          closing={false}
          gestureVelocityImpact={0.3}
          importantForAccessibility="auto"
          onClose={[Function]}
          onGestureBegin={[Function]}
          onGestureCanceled={[Function]}
          onGestureEnd={[Function]}
          onOpen={[Function]}
          onTransition={[Function]}
          pointerEvents="box-none"
          style={
            [
              {
                "overflow": undefined,
              },
              {
                "bottom": 0,
                "left": 0,
                "position": "absolute",
                "right": 0,
                "top": 0,
              },
            ]
          }
          transitionSpec={
            {
              "close": {
                "animation": "spring",
                "config": {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
              "open": {
                "animation": "spring",
                "config": {
                  "damping": 500,
                  "mass": 3,
                  "overshootClamping": true,
                  "restDisplacementThreshold": 10,
                  "restSpeedThreshold": 10,
                  "stiffness": 1000,
                },
              },
            }
          }
        >
          <View
            collapsable={false}
            needsOffscreenAlphaCompositing={false}
            pointerEvents="box-none"
            style={
              {
                "flex": 1,
              }
            }
          >
            <View
              collapsable={false}
              onGestureHandlerEvent={[Function]}
              onGestureHandlerStateChange={[Function]}
              style={
                {
                  "flex": 1,
                  "transform": [
                    {
                      "translateX": 0,
                    },
                    {
                      "translateX": 0,
                    },
                  ],
                }
              }
            >
              <View
                collapsable={false}
                pointerEvents="none"
                style={
                  {
                    "backgroundColor": "rgb(242, 242, 242)",
                    "bottom": 0,
                    "left": 0,
                    "position": "absolute",
                    "shadowColor": "#000",
                    "shadowOffset": {
                      "height": 1,
                      "width": -1,
                    },
                    "shadowOpacity": 0.3,
                    "shadowRadius": 5,
                    "top": 0,
                    "width": 3,
                  }
                }
              />
              <View
                style={
                  [
                    {
                      "flex": 1,
                      "overflow": "hidden",
                    },
                    [
                      {
                        "backgroundColor": "rgb(242, 242, 242)",
                      },
                      undefined,
                    ],
                  ]
                }
              >
                <View
                  style={
                    {
                      "flex": 1,
                      "flexDirection": "column-reverse",
                    }
                  }
                >
                  <View
                    style={
                      {
                        "flex": 1,
                      }
                    }
                  >
                    <View
                      style={
                        {
                          "flex": 1,
                        }
                      }
                    >
                      <View
                        style={
                          {
                            "backgroundColor": "#ffffff",
                            "flex": 1,
                          }
                        }
                      >
                        <View
                          style={
                            {
                              "backgroundColor": "#ffffff",
                              "flex": 1,
                            }
                          }
                        >
                          <View
                            style={
                              {
                                "flex": 1,
                                "overflow": "hidden",
                              }
                            }
                          >
                            <RCTScrollView
                              ListFooterComponent={
                                <View
                                  style={
                                    {
                                      "alignItems": "center",
                                      "justifyContent": "center",
                                      "paddingBottom": 24,
                                    }
                                  }
                                >
                                  <Text
                                    style={
                                      {
                                        "color": "#9ca1af",
                                        "fontFamily": "CentraNo1-Book",
                                        "fontSize": 20,
                                        "fontWeight": "400",
                                        "textAlign": "center",
                                      }
                                    }
                                  >
                                    Please switch network to view transactions
                                  </Text>
                                </View>
                              }
                              applyWindowCorrection={[Function]}
                              canChangeSize={true}
                              contentContainerStyle={
                                {
                                  "backgroundColor": undefined,
                                  "minHeight": 1,
                                  "minWidth": 1,
                                  "paddingLeft": 0,
                                  "paddingRight": 0,
                                }
                              }
                              contentHeight={0}
                              contentWidth={0}
                              data={[]}
                              dataProvider={
                                DataProvider {
                                  "_data": [],
                                  "_firstIndexToProcess": 0,
                                  "_hasStableIds": true,
                                  "_requiresDataChangeHandling": false,
                                  "_size": 0,
                                  "getStableId": [Function],
                                  "rowHasChanged": [Function],
                                }
                              }
                              disableRecycling={false}
                              extendedState={
                                {
                                  "value": {
                                    "cancel1559IsOpen": false,
                                    "cancelConfirmDisabled": false,
                                    "cancelIsOpen": false,
                                    "errorMsg": undefined,
                                    "isLedgerAccount": undefined,
                                    "isQRHardwareAccount": undefined,
                                    "ready": true,
                                    "refreshing": false,
                                    "retryIsOpen": false,
                                    "rpcBlockExplorer": undefined,
                                    "selectedTx": Map {},
                                    "speedUp1559IsOpen": false,
                                    "speedUpConfirmDisabled": false,
                                    "speedUpIsOpen": false,
                                  },
                                }
                              }
                              externalScrollView={[Function]}
                              extraData={
                                {
                                  "cancel1559IsOpen": false,
                                  "cancelConfirmDisabled": false,
                                  "cancelIsOpen": false,
                                  "errorMsg": undefined,
                                  "isLedgerAccount": undefined,
                                  "isQRHardwareAccount": undefined,
                                  "ready": true,
                                  "refreshing": false,
                                  "retryIsOpen": false,
                                  "rpcBlockExplorer": undefined,
                                  "selectedTx": Map {},
                                  "speedUp1559IsOpen": false,
                                  "speedUpConfirmDisabled": false,
                                  "speedUpIsOpen": false,
                                }
                              }
                              finalRenderAheadOffset={250}
                              forceNonDeterministicRendering={true}
                              getItemLayout={[Function]}
                              horizontal={false}
                              initialNumToRender={10}
                              initialOffset={0}
                              initialRenderIndex={0}
                              isHorizontal={false}
                              keyExtractor={[Function]}
                              layoutProvider={
                                GridLayoutProviderWithProps {
                                  "_acceptableRelayoutDelta": 1,
                                  "_getHeightOrWidth": [Function],
                                  "_getLayoutTypeForIndex": [Function],
                                  "_getSpan": [Function],
                                  "_hasExpired": false,
                                  "_isHorizontal": false,
                                  "_lastLayoutManager": GridLayoutManager {
                                    "_acceptableRelayoutDelta": 1,
                                    "_getSpan": [Function],
                                    "_isGridHorizontal": false,
                                    "_isHorizontal": false,
                                    "_layoutProvider": [Circular],
                                    "_layouts": [],
                                    "_maxSpan": 1,
                                    "_renderWindowSize": {
                                      "height": 900,
                                      "width": 400,
                                    },
                                    "_totalHeight": 0,
                                    "_totalWidth": 400,
                                    "_window": {
                                      "height": 900,
                                      "width": 400,
                                    },
                                  },
                                  "_maxSpan": 1,
                                  "_renderWindowSize": {
                                    "height": 900,
                                    "width": 400,
                                  },
                                  "_setLayoutForType": [Function],
                                  "_tempDim": {
                                    "height": 0,
                                    "width": 0,
                                  },
                                  "averageWindow": AverageWindow {
                                    "currentAverage": 100,
                                    "currentCount": 1,
                                    "inputValues": [
                                      100,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                      ,
                                    ],
                                    "nextIndex": 1,
                                  },
                                  "defaultEstimatedItemSize": 100,
                                  "layoutObject": {
                                    "size": undefined,
                                    "span": undefined,
                                  },
                                  "props": {
                                    "ListFooterComponent": <View
                                      style={
                                        {
                                          "alignItems": "center",
                                          "justifyContent": "center",
                                          "paddingBottom": 24,
                                        }
                                      }
                                    >
                                      <Text
                                        style={
                                          {
                                            "color": "#9ca1af",
                                            "fontFamily": "CentraNo1-Book",
                                            "fontSize": 20,
                                            "fontWeight": "400",
                                            "textAlign": "center",
                                          }
                                        }
                                      >
                                        Please switch network to view transactions
                                      </Text>
                                    </View>,
                                    "ListHeaderComponent": undefined,
                                    "data": [],
                                    "extraData": {
                                      "cancel1559IsOpen": false,
                                      "cancelConfirmDisabled": false,
                                      "cancelIsOpen": false,
                                      "errorMsg": undefined,
                                      "isLedgerAccount": undefined,
                                      "isQRHardwareAccount": undefined,
                                      "ready": true,
                                      "refreshing": false,
                                      "retryIsOpen": false,
                                      "rpcBlockExplorer": undefined,
                                      "selectedTx": Map {},
                                      "speedUp1559IsOpen": false,
                                      "speedUpConfirmDisabled": false,
                                      "speedUpIsOpen": false,
                                    },
                                    "getItemLayout": [Function],
                                    "initialNumToRender": 10,
                                    "keyExtractor": [Function],
                                    "maxToRenderPerBatch": 2,
                                    "numColumns": 1,
                                    "onEndReachedThreshold": 0.5,
                                    "onScroll": [Function],
                                    "refreshControl": <RefreshControlMock
                                      colors={
                                        [
                                          "#4459ff",
                                        ]
                                      }
                                      onRefresh={[Function]}
                                      refreshing={false}
                                      tintColor="#121314"
                                    />,
                                    "renderItem": [Function],
                                    "scrollEnabled": true,
                                    "scrollIndicatorInsets": {
                                      "right": 1,
                                    },
                                    "style": {
                                      "flex": 1,
                                    },
                                    "testID": "transactions-container",
                                  },
                                  "renderWindowInsets": {
                                    "height": 0,
                                    "width": 0,
                                  },
                                  "shouldRefreshWithAnchoring": true,
                                }
                              }
                              maxRenderAhead={750}
                              maxToRenderPerBatch={2}
                              numColumns={1}
                              onEndReached={[Function]}
                              onEndReachedThreshold={0}
                              onEndReachedThresholdRelative={0.5}
                              onItemLayout={[Function]}
                              onLayout={[Function]}
                              onScroll={[Function]}
                              onScrollBeginDrag={[Function]}
                              onSizeChanged={[Function]}
                              onVisibleIndicesChanged={[Function]}
                              refreshControl={
                                <RefreshControlMock
                                  colors={
                                    [
                                      "#4459ff",
                                    ]
                                  }
                                  onRefresh={[Function]}
                                  refreshing={false}
                                  tintColor="#121314"
                                />
                              }
                              removeClippedSubviews={false}
                              renderAheadOffset={0}
                              renderAheadStep={250}
                              renderContentContainer={[Function]}
                              renderItem={[Function]}
                              renderItemContainer={[Function]}
                              rowRenderer={[Function]}
                              scrollEnabled={true}
                              scrollEventThrottle={16}
                              scrollIndicatorInsets={
                                {
                                  "right": 1,
                                }
                              }
                              scrollThrottle={16}
                              scrollViewProps={
                                {
                                  "contentContainerStyle": {
                                    "backgroundColor": undefined,
                                    "minHeight": 1,
                                    "minWidth": 1,
                                    "paddingLeft": 0,
                                    "paddingRight": 0,
                                  },
                                  "onLayout": [Function],
                                  "onScrollBeginDrag": [Function],
                                  "refreshControl": <RefreshControlMock
                                    colors={
                                      [
                                        "#4459ff",
                                      ]
                                    }
                                    onRefresh={[Function]}
                                    refreshing={false}
                                    tintColor="#121314"
                                  />,
                                  "style": {
                                    "minHeight": 1,
                                    "minWidth": 1,
                                  },
                                }
                              }
                              style={
                                {
                                  "minHeight": 1,
                                  "minWidth": 1,
                                }
                              }
                              suppressBoundedSizeException={true}
                              testID="transactions-container"
                              windowCorrectionConfig={
                                {
                                  "applyToInitialOffset": true,
                                  "applyToItemScroll": true,
                                  "value": {
                                    "endCorrection": 0,
                                    "startCorrection": 0,
                                    "windowShift": -0,
                                  },
                                }
                              }
                            >
                              <RCTRefreshControl />
                              <View>
                                <View
                                  style={
                                    {
                                      "flexDirection": "column",
                                    }
                                  }
                                >
                                  <View
                                    style={
                                      {
                                        "paddingLeft": 0,
                                        "paddingTop": 0,
                                      }
                                    }
                                  />
                                  <View
                                    style={
                                      [
                                        undefined,
                                        undefined,
                                      ]
                                    }
                                  />
                                  <AutoLayoutView
                                    enableInstrumentation={false}
                                    horizontal={false}
                                    onBlankAreaEvent={[Function]}
                                    onLayout={[Function]}
                                    renderAheadOffset={0}
                                    scrollOffset={0}
                                    style={
                                      {
                                        "height": 0,
                                        "width": 0,
                                      }
                                    }
                                    windowSize={0}
                                  />
                                  <CellContainer
                                    index={-1}
                                    style={
                                      [
                                        undefined,
                                        undefined,
                                      ]
                                    }
                                  >
                                    <View
                                      style={
                                        {
                                          "alignItems": "center",
                                          "justifyContent": "center",
                                          "paddingBottom": 24,
                                        }
                                      }
                                    >
                                      <Text
                                        style={
                                          {
                                            "color": "#9ca1af",
                                            "fontFamily": "CentraNo1-Book",
                                            "fontSize": 20,
                                            "fontWeight": "400",
                                            "textAlign": "center",
                                          }
                                        }
                                      >
                                        Please switch network to view transactions
                                      </Text>
                                    </View>
                                  </CellContainer>
                                  <View
                                    style={
                                      {
                                        "paddingBottom": 0,
                                        "paddingRight": 0,
                                      }
                                    }
                                  />
                                </View>
                              </View>
                            </RCTScrollView>
                          </View>
                        </View>
                      </View>
                      <Modal
                        animationType="none"
                        deviceHeight={null}
                        deviceWidth={null}
                        hardwareAccelerated={false}
                        hideModalContentWhileAnimating={false}
                        onBackdropPress={[Function]}
                        onModalHide={[Function]}
                        onModalWillHide={[Function]}
                        onModalWillShow={[Function]}
                        onRequestClose={[Function]}
                        onSwipeComplete={[Function]}
                        panResponderThreshold={4}
                        scrollHorizontal={false}
                        scrollOffset={0}
                        scrollOffsetMax={0}
                        scrollTo={null}
                        statusBarTranslucent={false}
                        supportedOrientations={
                          [
                            "portrait",
                            "landscape",
                          ]
                        }
                        swipeDirection="down"
                        swipeThreshold={100}
                        transparent={true}
                        visible={false}
                      />
                    </View>
                  </View>
                </View>
              </View>
            </View>
          </View>
        </View>
      </RNSScreen>
    </RNSScreenContainer>
  </RNCSafeAreaProvider>
</View>
`;
